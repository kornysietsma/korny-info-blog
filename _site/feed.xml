<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-10-16T15:30:23+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Korny’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Korny Sietsma</name></author><entry><title type="html">New job, new blog!</title><link href="http://localhost:4000/2023/10/14/blog-refresh" rel="alternate" type="text/html" title="New job, new blog!" /><published>2023-10-14T00:00:00+01:00</published><updated>2023-10-14T00:00:00+01:00</updated><id>http://localhost:4000/2023/10/14/blog-refresh</id><content type="html" xml:base="http://localhost:4000/2023/10/14/blog-refresh">&lt;p&gt;I quit my job! Yes, after 12 amazing years at Thoughtworks, I decided it was time to move on.&lt;/p&gt;

&lt;p&gt;I’m starting a new job in November - more on that later - but in the meantime I was a bit embarassed at they styling here - I’d had fun hacking something together using &lt;a href=&quot;https://edwardtufte.github.io/tufte-css/&quot;&gt;Tufte CSS&lt;/a&gt; but it was never quite right, with issues here and there with styling and layouts… and it used the venerable Ruby middleman blogging engine, which I’m sure is fine - but Jekyll seems to have taken over as a common default.&lt;/p&gt;

&lt;p&gt;So I’m rebuilding everything in Jekyll - it’ll be fairly vanilla using &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt; for now, but over time I will fiddle with the defaults.  But in the spirit of incremental iterative working, I’ll try to do just enough to get it out with nothing broken, then improve over time.&lt;/p&gt;</content><author><name>Korny Sietsma</name></author><category term="blogging" /><category term="thoughtworks" /><category term="jekyll" /><summary type="html">I quit my job! Yes, after 12 amazing years at Thoughtworks, I decided it was time to move on. I’m starting a new job in November - more on that later - but in the meantime I was a bit embarassed at they styling here - I’d had fun hacking something together using Tufte CSS but it was never quite right, with issues here and there with styling and layouts… and it used the venerable Ruby middleman blogging engine, which I’m sure is fine - but Jekyll seems to have taken over as a common default. So I’m rebuilding everything in Jekyll - it’ll be fairly vanilla using Minimal Mistakes for now, but over time I will fiddle with the defaults. But in the spirit of incremental iterative working, I’ll try to do just enough to get it out with nothing broken, then improve over time.</summary></entry><entry><title type="html">Interesting folks to follow on Mastodon</title><link href="http://localhost:4000/2022/12/01/folks-to-follow-on-mastodon.html" rel="alternate" type="text/html" title="Interesting folks to follow on Mastodon" /><published>2022-12-01T09:27:00+00:00</published><updated>2022-12-01T09:27:00+00:00</updated><id>http://localhost:4000/2022/12/01/folks-to-follow-on-mastodon.html</id><content type="html" xml:base="http://localhost:4000/2022/12/01/folks-to-follow-on-mastodon.html">&lt;h2 id=&quot;my-highly-idiosyncratic-list-of-interesting-people-on-mastodon&quot;&gt;My highly-idiosyncratic list of interesting people on Mastodon&lt;/h2&gt;

&lt;p&gt;I’ve been really enjoying moving from the crumbling mess of Twitter, to the chaotic federated world of Mastodon.  Plenty of other people have talked about the reasons, I’m not going over them all here.&lt;/p&gt;

&lt;p&gt;However, one complaint I’ve heard is “I can’t find anyone to follow” which I find quite surprising, as I’ve found too many people to follow!  So I thought I’d post a short&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, opinionated list, to help lure people in.&lt;/p&gt;

&lt;p&gt;This is mostly tech folks - as that’s my interest area, and Mastodon is mostly attracting tech folks and activists right now.  But there are quite a few random non-tech folks too - sorry, it’s a bit of an idiosyncratic list!&lt;/p&gt;

&lt;h2 id=&quot;aside---how-to-follow-people&quot;&gt;Aside - how to follow people&lt;/h2&gt;

&lt;p&gt;I thought I’d call this out separately, as it’s sometimes a bit fiddly, especially for new users.&lt;/p&gt;

&lt;p&gt;This assumes you are using a browser.  Mobile users can’t easily cut and paste URLs, so following someone not on your instance depends a bit on the app you use.&lt;/p&gt;

&lt;p&gt;For a user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@fergee@one.mega.cities&lt;/code&gt; their instance is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one.mega.cities&lt;/code&gt; and that is where most of their information lives.  You can browse their details with the url &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://one.mega.cities/@fergee&lt;/code&gt; - and there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Follow&lt;/code&gt; button there, but it’s not so easy to use if you are not also a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one.mega.cities&lt;/code&gt; user.  (the behaviour seems to differ by instance - or maybe it’s mobile vs browser? Some say ‘paste this url into search’ and some let you re-log in to your home instance)&lt;/p&gt;

&lt;p&gt;The easy way to manage this is to find the user’s page on &lt;em&gt;your&lt;/em&gt; instance.  This is usually a URL like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://my.instance.name/@fergee@one.mega.cities&lt;/code&gt; though some have slightly different paths.  You can manually make this URL in a browser address bar by just concatenating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://my.instance.name/&lt;/code&gt; part with a mastodon handle (starting with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;).  Or you can build them using a tool like a spreadsheet, if you want.&lt;/p&gt;

&lt;p&gt;Or, you can just paste the user’s handle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@fergee@one.mega.cities&lt;/code&gt; into the search box on your main mastodon page, and search ‘accounts’, and you should end at the same user page &lt;em&gt;on your own instance&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once you get to the person’s page on your instance, you can just click ‘follow’ and a follow request is sent.  Some people auto-accept follows, some manually check you aren’t a bot or a nasty person or whatever first.&lt;/p&gt;

&lt;p&gt;Once you are following them, you can also add and remove people from custom user lists from the same page.  But that’s a different subject.&lt;/p&gt;

&lt;h2 id=&quot;my-list&quot;&gt;My list&lt;/h2&gt;

&lt;p&gt;Some of these people are quite active, some are just lurking for now.  Some of these people are also dual posting to Twitter, which seems fair enough if you have a big follower count.&lt;/p&gt;

&lt;p&gt;I’ve sorted by number of updates, which will be biased towards really verbose people and those who’ve been on Mastodon a long time.  But it’s easier than other categorisations - what makes someone ‘interesting’?? (The count includes posts and ‘boosts’ which are like re-tweets, so chronic over-sharers will have inflated update values)&lt;/p&gt;

&lt;p&gt;I note that there are 5 signatories of the Agile Manifesto in this list!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Handle&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;URL&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Followers&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Updates&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Who&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cory Doctorow&lt;/td&gt;
      &lt;td&gt;@doctorow@mamot.fr&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mamot.fr/@doctorow&quot;&gt;https://mamot.fr/@doctorow&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;5988&lt;/td&gt;
      &lt;td&gt;83968&lt;/td&gt;
      &lt;td&gt;Author, journalist, blogger&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Eugen Rochko&lt;/td&gt;
      &lt;td&gt;@Gargron@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@Gargron&quot;&gt;https://mastodon.social/@Gargron&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;262050&lt;/td&gt;
      &lt;td&gt;72812&lt;/td&gt;
      &lt;td&gt;Mastodon lead developer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Christine Lemmer-Webber&lt;/td&gt;
      &lt;td&gt;@cwebber@octodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://octodon.social/@cwebber&quot;&gt;https://octodon.social/@cwebber&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8668&lt;/td&gt;
      &lt;td&gt;33216&lt;/td&gt;
      &lt;td&gt;Developer, CTO, co-author of ActivityPub which underpins all of this&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cory Doctorow’s linkblog&lt;/td&gt;
      &lt;td&gt;@pluralistic@mamot.fr&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mamot.fr/@pluralistic&quot;&gt;https://mamot.fr/@pluralistic&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;27872&lt;/td&gt;
      &lt;td&gt;31622&lt;/td&gt;
      &lt;td&gt;This is his link-dump user, it is very very verbose!&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Terence Eden&lt;/td&gt;
      &lt;td&gt;@Edent@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@Edent&quot;&gt;https://mastodon.social/@Edent&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;3304&lt;/td&gt;
      &lt;td&gt;4192&lt;/td&gt;
      &lt;td&gt;Unicode, W3C, open standards, cybersecurity&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lesley Carhart&lt;/td&gt;
      &lt;td&gt;@hacks4pancakes@infosec.exchange&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://infosec.exchange/@hacks4pancakes&quot;&gt;https://infosec.exchange/@hacks4pancakes&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;21838&lt;/td&gt;
      &lt;td&gt;2446&lt;/td&gt;
      &lt;td&gt;Cyber security expert&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;David Gerard&lt;/td&gt;
      &lt;td&gt;@davidgerard@circumstances.run&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://circumstances.run/@davidgerard&quot;&gt;https://circumstances.run/@davidgerard&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1737&lt;/td&gt;
      &lt;td&gt;1634&lt;/td&gt;
      &lt;td&gt;Blockchain skeptic, writer, journalist&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Leo Laporte&lt;/td&gt;
      &lt;td&gt;@leo@twit.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://twit.social/@leo&quot;&gt;https://twit.social/@leo&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;16163&lt;/td&gt;
      &lt;td&gt;979&lt;/td&gt;
      &lt;td&gt;Tech podcaster&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lisa Crispin&lt;/td&gt;
      &lt;td&gt;@lisacrispin@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@lisacrispin&quot;&gt;https://mastodon.social/@lisacrispin&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;845&lt;/td&gt;
      &lt;td&gt;634&lt;/td&gt;
      &lt;td&gt;Agile tester, consultant, author&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Timnit Gebru&lt;/td&gt;
      &lt;td&gt;@timnitGebru@dair-community.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://dair-community.social/@timnitGebru&quot;&gt;https://dair-community.social/@timnitGebru&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;14164&lt;/td&gt;
      &lt;td&gt;631&lt;/td&gt;
      &lt;td&gt;Computer scientist, diversity advocate, AI research&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Brian Marick&lt;/td&gt;
      &lt;td&gt;@marick@mstdn.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mstdn.social/@marick&quot;&gt;https://mstdn.social/@marick&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;723&lt;/td&gt;
      &lt;td&gt;600&lt;/td&gt;
      &lt;td&gt;Developer, podcaster, Ruby, Testing, thinking&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Scott Hanselman&lt;/td&gt;
      &lt;td&gt;@shanselman@hachyderm.io&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://hachyderm.io/@shanselman&quot;&gt;https://hachyderm.io/@shanselman&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;22020&lt;/td&gt;
      &lt;td&gt;599&lt;/td&gt;
      &lt;td&gt;Tech geek at Microsoft, speaker&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ian Betteridge&lt;/td&gt;
      &lt;td&gt;@ianbetteridge@mastodon.me.uk&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.me.uk/@ianbetteridge&quot;&gt;https://mastodon.me.uk/@ianbetteridge&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;2896&lt;/td&gt;
      &lt;td&gt;568&lt;/td&gt;
      &lt;td&gt;Tech writer, the one named in “Betteridge’s Law”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tim Bray&lt;/td&gt;
      &lt;td&gt;@timbray@mastodon.cloud&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.cloud/@timbray&quot;&gt;https://mastodon.cloud/@timbray&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8347&lt;/td&gt;
      &lt;td&gt;533&lt;/td&gt;
      &lt;td&gt;Dev, activist, XML co-author&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Adrian Cockcroft&lt;/td&gt;
      &lt;td&gt;@adrianco@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@adrianco&quot;&gt;https://mastodon.social/@adrianco&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1290&lt;/td&gt;
      &lt;td&gt;471&lt;/td&gt;
      &lt;td&gt;Analyst / Architect / DevOps, ex Netflix and many others&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie Stross&lt;/td&gt;
      &lt;td&gt;@cstross@wandering.shop&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://wandering.shop/@cstross&quot;&gt;https://wandering.shop/@cstross&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;9789&lt;/td&gt;
      &lt;td&gt;349&lt;/td&gt;
      &lt;td&gt;Sci-fi/Fantasy author&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;James Gleick&lt;/td&gt;
      &lt;td&gt;@JamesGleick@sciencemastodon.com&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://sciencemastodon.com/@JamesGleick&quot;&gt;https://sciencemastodon.com/@JamesGleick&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8121&lt;/td&gt;
      &lt;td&gt;339&lt;/td&gt;
      &lt;td&gt;Author ‘Chaos’ and other books&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dr Sarah Hendrica Bickerton&lt;/td&gt;
      &lt;td&gt;@sarahhbickerton@mastodon.nz&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.nz/@sarahhbickerton&quot;&gt;https://mastodon.nz/@sarahhbickerton&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1227&lt;/td&gt;
      &lt;td&gt;305&lt;/td&gt;
      &lt;td&gt;Sociology and Public Policy lecturer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Taylor Lorenz&lt;/td&gt;
      &lt;td&gt;@taylorlorenz@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@taylorlorenz&quot;&gt;https://mastodon.social/@taylorlorenz&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;72915&lt;/td&gt;
      &lt;td&gt;273&lt;/td&gt;
      &lt;td&gt;Tech columnist at the Washington Post&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Matthew Skelton&lt;/td&gt;
      &lt;td&gt;@matthewskelton@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@matthewskelton&quot;&gt;https://mastodon.social/@matthewskelton&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1019&lt;/td&gt;
      &lt;td&gt;270&lt;/td&gt;
      &lt;td&gt;Team Topologies co-author&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Jamie Zawinski&lt;/td&gt;
      &lt;td&gt;@jwz@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@jwz&quot;&gt;https://mastodon.social/@jwz&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;4836&lt;/td&gt;
      &lt;td&gt;264&lt;/td&gt;
      &lt;td&gt;Programmer, blogger, Netscape and Mozilla dev&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mary Robinette Kowal&lt;/td&gt;
      &lt;td&gt;@maryrobinette@wandering.shop&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://wandering.shop/@maryrobinette&quot;&gt;https://wandering.shop/@maryrobinette&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;2881&lt;/td&gt;
      &lt;td&gt;216&lt;/td&gt;
      &lt;td&gt;Sci-fi author&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Julia Evans&lt;/td&gt;
      &lt;td&gt;@b0rk@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@b0rk&quot;&gt;https://mastodon.social/@b0rk&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;14195&lt;/td&gt;
      &lt;td&gt;193&lt;/td&gt;
      &lt;td&gt;Programmer, speaker, tech zine person&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Elisabeth Hendrickson&lt;/td&gt;
      &lt;td&gt;@testobsessed@ruby.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://ruby.social/@testobsessed&quot;&gt;https://ruby.social/@testobsessed&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1018&lt;/td&gt;
      &lt;td&gt;187&lt;/td&gt;
      &lt;td&gt;Tester, author, change maker&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;J. B. Rainsberger&lt;/td&gt;
      &lt;td&gt;@jbrains@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@jbrains&quot;&gt;https://mastodon.social/@jbrains&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;528&lt;/td&gt;
      &lt;td&gt;178&lt;/td&gt;
      &lt;td&gt;TDD person and awesome dev advocate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Molly White&lt;/td&gt;
      &lt;td&gt;@molly0xfff@hachyderm.io&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://hachyderm.io/@molly0xfff&quot;&gt;https://hachyderm.io/@molly0xfff&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;31191&lt;/td&gt;
      &lt;td&gt;171&lt;/td&gt;
      &lt;td&gt;Wikipedia author, crypto skeptic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Brendan Eich&lt;/td&gt;
      &lt;td&gt;@BrendanEich@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@BrendanEich&quot;&gt;https://mastodon.social/@BrendanEich&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1788&lt;/td&gt;
      &lt;td&gt;163&lt;/td&gt;
      &lt;td&gt;Creator of Javascript&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Neil Gaiman&lt;/td&gt;
      &lt;td&gt;@neilhimself@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@neilhimself&quot;&gt;https://mastodon.social/@neilhimself&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;160905&lt;/td&gt;
      &lt;td&gt;156&lt;/td&gt;
      &lt;td&gt;Author - Sandman, American Gods and many more&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Chad Loder&lt;/td&gt;
      &lt;td&gt;@chadloder@kolektiva.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://kolektiva.social/@chadloder&quot;&gt;https://kolektiva.social/@chadloder&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;18549&lt;/td&gt;
      &lt;td&gt;135&lt;/td&gt;
      &lt;td&gt;Activist, cybersecurity expert&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Martin Fowler&lt;/td&gt;
      &lt;td&gt;@mfowler@toot.thoughtworks.com&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://toot.thoughtworks.com/@mfowler&quot;&gt;https://toot.thoughtworks.com/@mfowler&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;9578&lt;/td&gt;
      &lt;td&gt;119&lt;/td&gt;
      &lt;td&gt;Tech loudmouth at Thoughtworks&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Kelsey Hightower&lt;/td&gt;
      &lt;td&gt;@kelseyhightower@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@kelseyhightower&quot;&gt;https://mastodon.social/@kelseyhightower&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8987&lt;/td&gt;
      &lt;td&gt;114&lt;/td&gt;
      &lt;td&gt;Google k8s dev, advocate, speaker&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Josh Graham&lt;/td&gt;
      &lt;td&gt;@delitescere@mas.to&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mas.to/@delitescere&quot;&gt;https://mas.to/@delitescere&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;101&lt;/td&gt;
      &lt;td&gt;96&lt;/td&gt;
      &lt;td&gt;Semi-retired CTO, speaker&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emily Webber&lt;/td&gt;
      &lt;td&gt;@ewebber@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@ewebber&quot;&gt;https://mastodon.social/@ewebber&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;508&lt;/td&gt;
      &lt;td&gt;92&lt;/td&gt;
      &lt;td&gt;ex-GDS agile, Communities of Practice author&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;George Takei&lt;/td&gt;
      &lt;td&gt;@georgetakei@universeodon.com&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://universeodon.com/@georgetakei&quot;&gt;https://universeodon.com/@georgetakei&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;226312&lt;/td&gt;
      &lt;td&gt;89&lt;/td&gt;
      &lt;td&gt;Star Trek Actor, Activist&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Kevlin Henney&lt;/td&gt;
      &lt;td&gt;@kevlin@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@kevlin&quot;&gt;https://mastodon.social/@kevlin&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;978&lt;/td&gt;
      &lt;td&gt;89&lt;/td&gt;
      &lt;td&gt;Speaker, author, thinker&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Pamela Fox&lt;/td&gt;
      &lt;td&gt;@pamelafox@fosstodon.org&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://fosstodon.org/@pamelafox&quot;&gt;https://fosstodon.org/@pamelafox&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1220&lt;/td&gt;
      &lt;td&gt;86&lt;/td&gt;
      &lt;td&gt;Python / Cloud advocate and teacher&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charles Oliver Nutter&lt;/td&gt;
      &lt;td&gt;@headius@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@headius&quot;&gt;https://mastodon.social/@headius&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1133&lt;/td&gt;
      &lt;td&gt;83&lt;/td&gt;
      &lt;td&gt;JRuby / JVM dev&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tom Lyon&lt;/td&gt;
      &lt;td&gt;@aka_pugs@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@aka_pugs&quot;&gt;https://mastodon.social/@aka_pugs&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1110&lt;/td&gt;
      &lt;td&gt;78&lt;/td&gt;
      &lt;td&gt;Old-school Unix coder, computer historian&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Stefan Tilkov&lt;/td&gt;
      &lt;td&gt;@stilkov@innoq.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://innoq.social/@stilkov&quot;&gt;https://innoq.social/@stilkov&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1293&lt;/td&gt;
      &lt;td&gt;74&lt;/td&gt;
      &lt;td&gt;CEO / Principal Consultant at INNOQ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Brianna Wu&lt;/td&gt;
      &lt;td&gt;@briannawu@mstdn.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mstdn.social/@briannawu&quot;&gt;https://mstdn.social/@briannawu&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;10746&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
      &lt;td&gt;Game writer, activist&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Karen James&lt;/td&gt;
      &lt;td&gt;@kejames@mastodon.online&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.online/@kejames&quot;&gt;https://mastodon.online/@kejames&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;5579&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
      &lt;td&gt;Environmental geneticist, social justice advocate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Eric Meyer&lt;/td&gt;
      &lt;td&gt;@Meyerweb@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@Meyerweb&quot;&gt;https://mastodon.social/@Meyerweb&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;3765&lt;/td&gt;
      &lt;td&gt;66&lt;/td&gt;
      &lt;td&gt;CSS standards advocate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Jessica Kerr&lt;/td&gt;
      &lt;td&gt;@jessitron@hachyderm.io&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://hachyderm.io/@jessitron&quot;&gt;https://hachyderm.io/@jessitron&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;2637&lt;/td&gt;
      &lt;td&gt;58&lt;/td&gt;
      &lt;td&gt;Software developer, speaker, symmathecist&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;William Gibson&lt;/td&gt;
      &lt;td&gt;@GreatDismal@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@GreatDismal&quot;&gt;https://mastodon.social/@GreatDismal&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;20201&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;Cyberpunk author&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Joanne Harris&lt;/td&gt;
      &lt;td&gt;@joannechocolat@mastodon.online&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.online/@joannechocolat&quot;&gt;https://mastodon.online/@joannechocolat&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;5865&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt;
      &lt;td&gt;Author of Chocolat, chair of Society of Authors&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Paul Irish&lt;/td&gt;
      &lt;td&gt;@paul_irish@toot.cafe&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://toot.cafe/@paul_irish&quot;&gt;https://toot.cafe/@paul_irish&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;3928&lt;/td&gt;
      &lt;td&gt;42&lt;/td&gt;
      &lt;td&gt;Chrome, Javascript, CSS developer and advocate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Paul Krugman&lt;/td&gt;
      &lt;td&gt;@pkrugman@mastodon.online&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.online/@pkrugman&quot;&gt;https://mastodon.online/@pkrugman&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;25238&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;Economist&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Pragmatic Andy&lt;/td&gt;
      &lt;td&gt;@PragmaticAndy@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@PragmaticAndy&quot;&gt;https://mastodon.social/@PragmaticAndy&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;748&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;Author and publisher&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ron Jeffries&lt;/td&gt;
      &lt;td&gt;@RonJeffries@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@RonJeffries&quot;&gt;https://mastodon.social/@RonJeffries&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1666&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;XP author and inventor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dave Snowden&lt;/td&gt;
      &lt;td&gt;@snowded@mas.to&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mas.to/@snowded&quot;&gt;https://mas.to/@snowded&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;566&lt;/td&gt;
      &lt;td&gt;33&lt;/td&gt;
      &lt;td&gt;Cynefin author and thinker&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Amanda Palmer&lt;/td&gt;
      &lt;td&gt;@amandapalmer@home.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://home.social/@amandapalmer&quot;&gt;https://home.social/@amandapalmer&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;2275&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;Musician, writer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Trisha Gee&lt;/td&gt;
      &lt;td&gt;@trishagee@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@trishagee&quot;&gt;https://mastodon.social/@trishagee&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1312&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;Developer, author, Java advocate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Katie Mack&lt;/td&gt;
      &lt;td&gt;@AstroKatie@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@AstroKatie&quot;&gt;https://mastodon.social/@AstroKatie&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;23469&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;Astrophysicist&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Greta Thunberg&lt;/td&gt;
      &lt;td&gt;@gretathunberg@mastodon.nu&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.nu/@gretathunberg&quot;&gt;https://mastodon.nu/@gretathunberg&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;71468&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;Climate activist&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Martin Kleppmann&lt;/td&gt;
      &lt;td&gt;@martin@nondeterministic.computer&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://nondeterministic.computer/@martin&quot;&gt;https://nondeterministic.computer/@martin&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1464&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;Author “Designing data-intensive applications”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Kent Beck&lt;/td&gt;
      &lt;td&gt;@kentbeck@hachyderm.io&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://hachyderm.io/@kentbeck&quot;&gt;https://hachyderm.io/@kentbeck&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;2195&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;Extreme Programming author&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Michael Brunton-Spall&lt;/td&gt;
      &lt;td&gt;@Bruntonspall@octodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://octodon.social/@Bruntonspall&quot;&gt;https://octodon.social/@Bruntonspall&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;212&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;Civil servant, ex-GDS thinker, infosec&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Antirez&lt;/td&gt;
      &lt;td&gt;@antirez@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@antirez&quot;&gt;https://mastodon.social/@antirez&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1707&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;Redis creator&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dave Farley&lt;/td&gt;
      &lt;td&gt;@davefarley77@techhub.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://techhub.social/@davefarley77&quot;&gt;https://techhub.social/@davefarley77&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;46&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Continuous Delivery and Software Engineering author&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Felienne Hermans&lt;/td&gt;
      &lt;td&gt;@Felienne@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@Felienne&quot;&gt;https://mastodon.social/@Felienne&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1281&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Scientist, researcher, SE Radio podcast host&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Esther Derby&lt;/td&gt;
      &lt;td&gt;@estherderby@mstdn.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mstdn.social/@estherderby&quot;&gt;https://mstdn.social/@estherderby&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;228&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Agile author, thinker, change maker&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charity Majors&lt;/td&gt;
      &lt;td&gt;@mipsytipsy@hachyderm.io&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://hachyderm.io/@mipsytipsy&quot;&gt;https://hachyderm.io/@mipsytipsy&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;63&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Software engineer and CTO of Honeycomb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Daniel Terhorst-North&lt;/td&gt;
      &lt;td&gt;@tastapod@mastodon.social&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mastodon.social/@tastapod&quot;&gt;https://mastodon.social/@tastapod&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1553&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Agile guy, speaker, BDD, CUPID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Rebecca Parsons&lt;/td&gt;
      &lt;td&gt;@rjparson@toot.thoughtworks.com&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://toot.thoughtworks.com/@rjparson&quot;&gt;https://toot.thoughtworks.com/@rjparson&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;111&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Thoughtworks CTO, dev, speaker&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Robert Virding&lt;/td&gt;
      &lt;td&gt;@rvirding@fosstodon.org&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://fosstodon.org/@rvirding&quot;&gt;https://fosstodon.org/@rvirding&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;63&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Erlang author&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;It’s not &lt;em&gt;that&lt;/em&gt; short, I’ve just dumped a couple of my lists and cleaned up the names - making a really short list would be more work! &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Korny Sietsma</name></author><category term="world" /><category term="social media" /><category term="twitter" /><category term="mastodon" /><summary type="html">My highly-idiosyncratic list of interesting people on Mastodon I’ve been really enjoying moving from the crumbling mess of Twitter, to the chaotic federated world of Mastodon. Plenty of other people have talked about the reasons, I’m not going over them all here. However, one complaint I’ve heard is “I can’t find anyone to follow” which I find quite surprising, as I’ve found too many people to follow! So I thought I’d post a short1, opinionated list, to help lure people in. This is mostly tech folks - as that’s my interest area, and Mastodon is mostly attracting tech folks and activists right now. But there are quite a few random non-tech folks too - sorry, it’s a bit of an idiosyncratic list! Aside - how to follow people I thought I’d call this out separately, as it’s sometimes a bit fiddly, especially for new users. This assumes you are using a browser. Mobile users can’t easily cut and paste URLs, so following someone not on your instance depends a bit on the app you use. For a user @fergee@one.mega.cities their instance is one.mega.cities and that is where most of their information lives. You can browse their details with the url https://one.mega.cities/@fergee - and there is a Follow button there, but it’s not so easy to use if you are not also a one.mega.cities user. (the behaviour seems to differ by instance - or maybe it’s mobile vs browser? Some say ‘paste this url into search’ and some let you re-log in to your home instance) The easy way to manage this is to find the user’s page on your instance. This is usually a URL like https://my.instance.name/@fergee@one.mega.cities though some have slightly different paths. You can manually make this URL in a browser address bar by just concatenating the https://my.instance.name/ part with a mastodon handle (starting with a @). Or you can build them using a tool like a spreadsheet, if you want. Or, you can just paste the user’s handle @fergee@one.mega.cities into the search box on your main mastodon page, and search ‘accounts’, and you should end at the same user page on your own instance. Once you get to the person’s page on your instance, you can just click ‘follow’ and a follow request is sent. Some people auto-accept follows, some manually check you aren’t a bot or a nasty person or whatever first. Once you are following them, you can also add and remove people from custom user lists from the same page. But that’s a different subject. My list Some of these people are quite active, some are just lurking for now. Some of these people are also dual posting to Twitter, which seems fair enough if you have a big follower count. I’ve sorted by number of updates, which will be biased towards really verbose people and those who’ve been on Mastodon a long time. But it’s easier than other categorisations - what makes someone ‘interesting’?? (The count includes posts and ‘boosts’ which are like re-tweets, so chronic over-sharers will have inflated update values) I note that there are 5 signatories of the Agile Manifesto in this list! Name Handle URL Followers Updates Who Cory Doctorow @doctorow@mamot.fr https://mamot.fr/@doctorow 5988 83968 Author, journalist, blogger Eugen Rochko @Gargron@mastodon.social https://mastodon.social/@Gargron 262050 72812 Mastodon lead developer Christine Lemmer-Webber @cwebber@octodon.social https://octodon.social/@cwebber 8668 33216 Developer, CTO, co-author of ActivityPub which underpins all of this Cory Doctorow’s linkblog @pluralistic@mamot.fr https://mamot.fr/@pluralistic 27872 31622 This is his link-dump user, it is very very verbose! Terence Eden @Edent@mastodon.social https://mastodon.social/@Edent 3304 4192 Unicode, W3C, open standards, cybersecurity Lesley Carhart @hacks4pancakes@infosec.exchange https://infosec.exchange/@hacks4pancakes 21838 2446 Cyber security expert David Gerard @davidgerard@circumstances.run https://circumstances.run/@davidgerard 1737 1634 Blockchain skeptic, writer, journalist Leo Laporte @leo@twit.social https://twit.social/@leo 16163 979 Tech podcaster Lisa Crispin @lisacrispin@mastodon.social https://mastodon.social/@lisacrispin 845 634 Agile tester, consultant, author Timnit Gebru @timnitGebru@dair-community.social https://dair-community.social/@timnitGebru 14164 631 Computer scientist, diversity advocate, AI research Brian Marick @marick@mstdn.social https://mstdn.social/@marick 723 600 Developer, podcaster, Ruby, Testing, thinking Scott Hanselman @shanselman@hachyderm.io https://hachyderm.io/@shanselman 22020 599 Tech geek at Microsoft, speaker Ian Betteridge @ianbetteridge@mastodon.me.uk https://mastodon.me.uk/@ianbetteridge 2896 568 Tech writer, the one named in “Betteridge’s Law” Tim Bray @timbray@mastodon.cloud https://mastodon.cloud/@timbray 8347 533 Dev, activist, XML co-author Adrian Cockcroft @adrianco@mastodon.social https://mastodon.social/@adrianco 1290 471 Analyst / Architect / DevOps, ex Netflix and many others Charlie Stross @cstross@wandering.shop https://wandering.shop/@cstross 9789 349 Sci-fi/Fantasy author James Gleick @JamesGleick@sciencemastodon.com https://sciencemastodon.com/@JamesGleick 8121 339 Author ‘Chaos’ and other books Dr Sarah Hendrica Bickerton @sarahhbickerton@mastodon.nz https://mastodon.nz/@sarahhbickerton 1227 305 Sociology and Public Policy lecturer Taylor Lorenz @taylorlorenz@mastodon.social https://mastodon.social/@taylorlorenz 72915 273 Tech columnist at the Washington Post Matthew Skelton @matthewskelton@mastodon.social https://mastodon.social/@matthewskelton 1019 270 Team Topologies co-author Jamie Zawinski @jwz@mastodon.social https://mastodon.social/@jwz 4836 264 Programmer, blogger, Netscape and Mozilla dev Mary Robinette Kowal @maryrobinette@wandering.shop https://wandering.shop/@maryrobinette 2881 216 Sci-fi author Julia Evans @b0rk@mastodon.social https://mastodon.social/@b0rk 14195 193 Programmer, speaker, tech zine person Elisabeth Hendrickson @testobsessed@ruby.social https://ruby.social/@testobsessed 1018 187 Tester, author, change maker J. B. Rainsberger @jbrains@mastodon.social https://mastodon.social/@jbrains 528 178 TDD person and awesome dev advocate Molly White @molly0xfff@hachyderm.io https://hachyderm.io/@molly0xfff 31191 171 Wikipedia author, crypto skeptic Brendan Eich @BrendanEich@mastodon.social https://mastodon.social/@BrendanEich 1788 163 Creator of Javascript Neil Gaiman @neilhimself@mastodon.social https://mastodon.social/@neilhimself 160905 156 Author - Sandman, American Gods and many more Chad Loder @chadloder@kolektiva.social https://kolektiva.social/@chadloder 18549 135 Activist, cybersecurity expert Martin Fowler @mfowler@toot.thoughtworks.com https://toot.thoughtworks.com/@mfowler 9578 119 Tech loudmouth at Thoughtworks Kelsey Hightower @kelseyhightower@mastodon.social https://mastodon.social/@kelseyhightower 8987 114 Google k8s dev, advocate, speaker Josh Graham @delitescere@mas.to https://mas.to/@delitescere 101 96 Semi-retired CTO, speaker Emily Webber @ewebber@mastodon.social https://mastodon.social/@ewebber 508 92 ex-GDS agile, Communities of Practice author George Takei @georgetakei@universeodon.com https://universeodon.com/@georgetakei 226312 89 Star Trek Actor, Activist Kevlin Henney @kevlin@mastodon.social https://mastodon.social/@kevlin 978 89 Speaker, author, thinker Pamela Fox @pamelafox@fosstodon.org https://fosstodon.org/@pamelafox 1220 86 Python / Cloud advocate and teacher Charles Oliver Nutter @headius@mastodon.social https://mastodon.social/@headius 1133 83 JRuby / JVM dev Tom Lyon @aka_pugs@mastodon.social https://mastodon.social/@aka_pugs 1110 78 Old-school Unix coder, computer historian Stefan Tilkov @stilkov@innoq.social https://innoq.social/@stilkov 1293 74 CEO / Principal Consultant at INNOQ Brianna Wu @briannawu@mstdn.social https://mstdn.social/@briannawu 10746 72 Game writer, activist Karen James @kejames@mastodon.online https://mastodon.online/@kejames 5579 72 Environmental geneticist, social justice advocate Eric Meyer @Meyerweb@mastodon.social https://mastodon.social/@Meyerweb 3765 66 CSS standards advocate Jessica Kerr @jessitron@hachyderm.io https://hachyderm.io/@jessitron 2637 58 Software developer, speaker, symmathecist William Gibson @GreatDismal@mastodon.social https://mastodon.social/@GreatDismal 20201 50 Cyberpunk author Joanne Harris @joannechocolat@mastodon.online https://mastodon.online/@joannechocolat 5865 45 Author of Chocolat, chair of Society of Authors Paul Irish @paul_irish@toot.cafe https://toot.cafe/@paul_irish 3928 42 Chrome, Javascript, CSS developer and advocate Paul Krugman @pkrugman@mastodon.online https://mastodon.online/@pkrugman 25238 41 Economist Pragmatic Andy @PragmaticAndy@mastodon.social https://mastodon.social/@PragmaticAndy 748 40 Author and publisher Ron Jeffries @RonJeffries@mastodon.social https://mastodon.social/@RonJeffries 1666 38 XP author and inventor Dave Snowden @snowded@mas.to https://mas.to/@snowded 566 33 Cynefin author and thinker Amanda Palmer @amandapalmer@home.social https://home.social/@amandapalmer 2275 31 Musician, writer Trisha Gee @trishagee@mastodon.social https://mastodon.social/@trishagee 1312 28 Developer, author, Java advocate Katie Mack @AstroKatie@mastodon.social https://mastodon.social/@AstroKatie 23469 23 Astrophysicist Greta Thunberg @gretathunberg@mastodon.nu https://mastodon.nu/@gretathunberg 71468 20 Climate activist Martin Kleppmann @martin@nondeterministic.computer https://nondeterministic.computer/@martin 1464 19 Author “Designing data-intensive applications” Kent Beck @kentbeck@hachyderm.io https://hachyderm.io/@kentbeck 2195 17 Extreme Programming author Michael Brunton-Spall @Bruntonspall@octodon.social https://octodon.social/@Bruntonspall 212 16 Civil servant, ex-GDS thinker, infosec Antirez @antirez@mastodon.social https://mastodon.social/@antirez 1707 12 Redis creator Dave Farley @davefarley77@techhub.social https://techhub.social/@davefarley77 46 11 Continuous Delivery and Software Engineering author Felienne Hermans @Felienne@mastodon.social https://mastodon.social/@Felienne 1281 5 Scientist, researcher, SE Radio podcast host Esther Derby @estherderby@mstdn.social https://mstdn.social/@estherderby 228 4 Agile author, thinker, change maker Charity Majors @mipsytipsy@hachyderm.io https://hachyderm.io/@mipsytipsy 63 2 Software engineer and CTO of Honeycomb Daniel Terhorst-North @tastapod@mastodon.social https://mastodon.social/@tastapod 1553 1 Agile guy, speaker, BDD, CUPID Rebecca Parsons @rjparson@toot.thoughtworks.com https://toot.thoughtworks.com/@rjparson 111 1 Thoughtworks CTO, dev, speaker Robert Virding @rvirding@fosstodon.org https://fosstodon.org/@rvirding 63 0 Erlang author It’s not that short, I’ve just dumped a couple of my lists and cleaned up the names - making a really short list would be more work! &amp;#8617;</summary></entry><entry><title type="html">Buying minecoins on a child’s Android Minecraft account</title><link href="http://localhost:4000/2022/11/10/buying-minecoins-on-a-child-s-android-minecraft-account.html" rel="alternate" type="text/html" title="Buying minecoins on a child’s Android Minecraft account" /><published>2022-11-10T11:01:00+00:00</published><updated>2022-11-10T11:01:00+00:00</updated><id>http://localhost:4000/2022/11/10/buying-minecoins-on-a-child-s-android-minecraft-account.html</id><content type="html" xml:base="http://localhost:4000/2022/11/10/buying-minecoins-on-a-child-s-android-minecraft-account.html">&lt;p&gt;Sharing here as this was a world of pain, and maybe I can save someone else this pain.&lt;/p&gt;

&lt;p&gt;Information is as of November 2022 - earlier advice on the web is wrong, and this may well be wrong in the future too.&lt;/p&gt;

&lt;p&gt;So, a friend gave us some cash as a present for our son and said “let him spend it in Minecraft” - sounds simple enough, right?  He is a huge Minecraft fan, plays it a lot on his tablet.&lt;/p&gt;

&lt;p&gt;The official way is to open up Minecraft, click “add coins” and pay with the device’s payment method.  We have a Google Family setup, which means in theory he can make payments but only with parental approval, and then payments can come out of the family account.&lt;/p&gt;

&lt;p&gt;However - at least for our particular set of accounts, this &lt;em&gt;just doesn’t work&lt;/em&gt;.  Payment doesn’t work - even if I totally disable parental controls and say “he can make any payments”, once you navigate through to payment you get a message “to complete this transaction secure your account” - with no indication of how to do this.  2FA? Something else?  Nobody else seems to have an answer to this out there either.&lt;/p&gt;

&lt;p&gt;So, I did some googling and found people saying “Add money to the child’s Microsoft account and then buy the minecoins online” - that makes perfect sense, right?  Nope.  Maybe this worked once?  I put £10 in his account fine - but there is no way, as of this date, to actually buy minecoins from this money.  There is helpful advice from various help forums, and none of it works.  I dug far enough to find a single “buy 500 minecoins here” page, which looked promising - but even there, if you click the “buy” button, you get an error “please contact Microsoft support”.  Yay.&lt;/p&gt;

&lt;p&gt;(I wonder if there is any way to get that £10 back?  I guess one day when he’s old enough for a computer, he can spend it on something else)&lt;/p&gt;

&lt;p&gt;Anyway, this used up almost an hour of fiddling, and with a complaining grumpy child saying “does it work yet?” (sigh - tactful polite behaviour isn’t a thing at 5 3/4) and I gave up.&lt;/p&gt;

&lt;p&gt;This morning I had the realisation - there isn’t a link between the Android user and the Minecraft/Microsoft user.  So I can bypass the whole parental control stuff by logging in to Android as me, and Minecraft as my son!&lt;/p&gt;

&lt;p&gt;I tried it, and there is one wrinkle - Minecraft won’t let you switch user easily!  If I open Minecraft, choose “log out” then “log in” - it opens a browser window which remembers my previous login, and has no way to change it!&lt;/p&gt;

&lt;p&gt;I did get past this - open a phone browser to &lt;a href=&quot;https://xboxlive.com&quot;&gt;https://xboxlive.com&lt;/a&gt;, log in, then choose “log out” and it deletes whichever cookie they use to track me.&lt;/p&gt;

&lt;p&gt;Then I could log in to Minecraft as my son, choose “add coins”, and payment came out of my Google Pay account.  Finally. And when I open Minecraft on my son’s tablet, I can see his precious minecoins there and spendable.  I bet he spends them on something he immediately regrets…&lt;/p&gt;

&lt;p&gt;So, the TL;DR is - if you want minecoins for your child:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log in to an Android device as an adult&lt;/li&gt;
  &lt;li&gt;Log in to Minecraft as the child (see above for clearing your old login)&lt;/li&gt;
  &lt;li&gt;Buy coins!&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Korny Sietsma</name></author><category term="parenting" /><category term="minecraft" /><summary type="html">Sharing here as this was a world of pain, and maybe I can save someone else this pain. Information is as of November 2022 - earlier advice on the web is wrong, and this may well be wrong in the future too. So, a friend gave us some cash as a present for our son and said “let him spend it in Minecraft” - sounds simple enough, right? He is a huge Minecraft fan, plays it a lot on his tablet. The official way is to open up Minecraft, click “add coins” and pay with the device’s payment method. We have a Google Family setup, which means in theory he can make payments but only with parental approval, and then payments can come out of the family account. However - at least for our particular set of accounts, this just doesn’t work. Payment doesn’t work - even if I totally disable parental controls and say “he can make any payments”, once you navigate through to payment you get a message “to complete this transaction secure your account” - with no indication of how to do this. 2FA? Something else? Nobody else seems to have an answer to this out there either. So, I did some googling and found people saying “Add money to the child’s Microsoft account and then buy the minecoins online” - that makes perfect sense, right? Nope. Maybe this worked once? I put £10 in his account fine - but there is no way, as of this date, to actually buy minecoins from this money. There is helpful advice from various help forums, and none of it works. I dug far enough to find a single “buy 500 minecoins here” page, which looked promising - but even there, if you click the “buy” button, you get an error “please contact Microsoft support”. Yay. (I wonder if there is any way to get that £10 back? I guess one day when he’s old enough for a computer, he can spend it on something else) Anyway, this used up almost an hour of fiddling, and with a complaining grumpy child saying “does it work yet?” (sigh - tactful polite behaviour isn’t a thing at 5 3/4) and I gave up. This morning I had the realisation - there isn’t a link between the Android user and the Minecraft/Microsoft user. So I can bypass the whole parental control stuff by logging in to Android as me, and Minecraft as my son! I tried it, and there is one wrinkle - Minecraft won’t let you switch user easily! If I open Minecraft, choose “log out” then “log in” - it opens a browser window which remembers my previous login, and has no way to change it! I did get past this - open a phone browser to https://xboxlive.com, log in, then choose “log out” and it deletes whichever cookie they use to track me. Then I could log in to Minecraft as my son, choose “add coins”, and payment came out of my Google Pay account. Finally. And when I open Minecraft on my son’s tablet, I can see his precious minecoins there and spendable. I bet he spends them on something he immediately regrets… So, the TL;DR is - if you want minecoins for your child: Log in to an Android device as an adult Log in to Minecraft as the child (see above for clearing your old login) Buy coins!</summary></entry><entry><title type="html">Is Mastodon a Twitter replacement?</title><link href="http://localhost:4000/2022/11/05/is-mastodon-a-twitter-replacement.html" rel="alternate" type="text/html" title="Is Mastodon a Twitter replacement?" /><published>2022-11-05T21:10:00+00:00</published><updated>2022-11-05T21:10:00+00:00</updated><id>http://localhost:4000/2022/11/05/is-mastodon-a-twitter-replacement.html</id><content type="html" xml:base="http://localhost:4000/2022/11/05/is-mastodon-a-twitter-replacement.html">&lt;h2 id=&quot;it-depends-which-bits-of-twitter-you-want&quot;&gt;It depends which bits of Twitter you want&lt;/h2&gt;

&lt;p&gt;I’ve been back on &lt;a href=&quot;https://joinmastodon.org/&quot;&gt;Mastodon&lt;/a&gt; in the past week, given the Twitter mess, and I’ve come to the realisation that I have two main patterns of Twitter usage - and Mastodon is a great option for one of them.&lt;/p&gt;

&lt;p&gt;My Twitter usage is a mixture of:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Connection with enthusiasts - all kinds of enthusiasts.  Tech people, political wonks, academics, climate activists, parents. Sometimes I’m just following people, but I often actively participate - these feel like peer relationships.  Sure, sometimes the person I respond to is an expert in the field and I’m just a dabbler!  But the key part is, it’s a conversation and active.&lt;/li&gt;
  &lt;li&gt;Following the zeitgeist. News updates, what famous or influential people say, huge trending events and movements, but generally chosen by “the algorithm” not me.  Generally I’m a passive consumer not a participant - sometimes I’ll quote-tweet one from this category, which might move it into category 1 above if someone I know responds&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Mastodon looks &lt;em&gt;great&lt;/em&gt; for category 1 - the enthusiasts.  I can talk to people, I can tweak my feed to follow topics, I can connect with other likeminded people.  However it involves an investment of some effort - I need to curate who I follow, build searches and lists (more on that below).  But already I’m seeing a ton of great interesting stuff, especially with the recent influx of new people - even if they are just dual-posting, I prefer to see their content on Mastodon where I have more control.  (Also I note it tends to be a lot more positive and creative than Twitter - maybe as “the algorithm” emphasises negative content to drive conflict?)&lt;/p&gt;

&lt;p&gt;Mastodon is unlikely to work for category 2 - the Zeitgeist.  For one thing, there is no “algorithm” - nothing selects and filters content for me. I can follow a lot of celebrities and look at trending hashtags, but again, this is extra effort that a lot of people might not bother with.  Mastodon is not going to say “Hey, Stephen King said this funny thing”. (I can get a bit of the zeitgeist when a person I follow boosts something - if one of my friends boosts Stephen King I’ll see it, but it won’t then decide “Korny likes Stephen King” unless I follow him)&lt;/p&gt;

&lt;p&gt;But also - I don’t think it will appeal to typical non-enthusiast users.  Already I’m seeing “this is too hard, I need to choose an instance??” posts.  Which is utterly fair - if you want a global zeitgeist feed, you don’t want to have to spend hours fiddling with configuration!  Centralised for-profit sites like Twitter or Reddit or others work well here - and they have slick user experience and no strange network effects or local server forks or any other background stuff you need to learn.&lt;/p&gt;

&lt;p&gt;Mastodon is also a bit flakey.  It is free and volunteer run. It depends on admins getting funding from donations, and those admins can burn out or not respond as fast as users want or have moderation views that don’t match yours.  There are mitigations - it’s easy to migrate instances (and all your followers are auto-redirected!) and I suspect we will see more corporate or organisation servers over time too (like the wonderful toot.thoughtworks.com or the new &lt;a href=&quot;https://social.network.europa.eu/&quot;&gt;EU instances&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;But because of the above, I suspect it won’t work for a huge proportion of Twitter users - people who just want an easy way to see what is happening, and of course famous people who want an audience of followers with nice simple reliable commercial backing.  Without the “non-enthusiast” users, Mastodon has less appeal for celebrities and it’s just going to be a different kind of place.&lt;/p&gt;

&lt;p&gt;Thankfully, there are millions and millions of enthusiasts out there - already there are plenty on Mastodon to make it worthwhile, at least in my (admittedly geeky) interest areas.  For me, it’s not “will Mastodon replace twitter?” - it &lt;em&gt;already is replacing&lt;/em&gt; this part, and it turns out it’s the part I value most.&lt;/p&gt;

&lt;p&gt;Mastodon still has plenty of hurdles - for a start it could do with some extra ways to curate the firehose of information.  If I want to follow @foo_bar@geek.social who posts some cool tech stuff but also hourly cat pictures, and also follow Martin Fowler who posts something interesting every day or two, Martin’s posts can get easily swamped. (My current fix for this is to use lists to categorise people I want to see more often, but it’s a bit clunky)&lt;/p&gt;

&lt;p&gt;Maybe something else will come along that does it better; maybe Mastodon will flounder under the weight of it’s own temporary success and users will move on.  But at the moment it’s looking pretty good, at least for my needs.&lt;/p&gt;

&lt;p&gt;And I’ll keep Twitter for where it’s useful (if it stays up!) - though I’ll also keep my eyes out for less commercial, less distorting, less dominated-by-horrible-people zeitgeist sources.&lt;/p&gt;</content><author><name>Korny Sietsma</name></author><category term="world" /><category term="social media" /><category term="twitter" /><category term="mastodon" /><summary type="html">It depends which bits of Twitter you want...</summary></entry><entry><title type="html">New polyglot code tools releases</title><link href="http://localhost:4000/2022/10/13/new-polyglot-releases.html" rel="alternate" type="text/html" title="New polyglot code tools releases" /><published>2022-10-13T10:13:00+01:00</published><updated>2022-10-13T10:13:00+01:00</updated><id>http://localhost:4000/2022/10/13/new-polyglot-releases.html</id><content type="html" xml:base="http://localhost:4000/2022/10/13/new-polyglot-releases.html">&lt;p&gt;My sabbatical is winding up, I naturally got far less coding done than I expected!  Our lovely daughter has had a big sleep regression, so a lot of my focus has been on just getting through life rather than perfecting my code.&lt;/p&gt;

&lt;p&gt;Still, I have actually achieved quite a lot, now that I go back and look at it - so I thought it was time for an updated blog post.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;/2020/09/06/introducing-the-polyglot-code-explorer.html&quot;&gt;My initial announcement&lt;/a&gt; or  &lt;a href=&quot;https://polyglot.korny.info&quot;&gt;The main Polyglot Code Tools site&lt;/a&gt; if you want more background.&lt;/p&gt;

&lt;p&gt;Major changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Viewing activity by teams&lt;/li&gt;
  &lt;li&gt;Saving and loading settings&lt;/li&gt;
  &lt;li&gt;Moving to TypeScript for the explorer&lt;/li&gt;
  &lt;li&gt;Quite a few refactorings&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;viewing-by-teams&quot;&gt;Viewing by Teams&lt;/h2&gt;

&lt;p&gt;I put this at the top as it is the area that is most useful for users!&lt;/p&gt;

&lt;p&gt;I’m a huge fan of the &lt;a href=&quot;https://www.goodreads.com/book/show/44135420-team-topologies&quot;&gt;Team Topologies book&lt;/a&gt; - the Team should be the core unit of delivery in a well functioning agile organisation.&lt;/p&gt;

&lt;p&gt;So, when investigating codebases, I wanted to be able to tell which teams were operating in which areas, and how they overlap.  The end result is a view like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/2022-polyglot/polyglot-062-top-teams.png&quot; alt=&quot;New UI with top teams&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This does need a caveat though - you need to create team information yourself!  Git doesn’t tell me which user is in which team.  (In fact you also need to do a fair bit of work merging users, as git doesn’t tell me that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo@bar.com&lt;/code&gt; is actually the same user as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fulvio_Barrington@gmail.com&lt;/code&gt; …)&lt;/p&gt;

&lt;p&gt;There is also a view that tries to show where multiple teams overlap, using SVG patterns - this is a bit experimental, but might be useful:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/2022-polyglot/top-teams-patterned.png&quot; alt=&quot;Top Teams - patterned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And you can focus on a single team (or a single user!) to see just their contribution compared to everyone else:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/2022-polyglot/single-team-impact.png&quot; alt=&quot;Single team impact&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here blue is the selected team, red is other users, and colours in between show overlap.  Also brighter colours show more change, darker show less.&lt;/p&gt;

&lt;h2 id=&quot;saving-and-loading-settings&quot;&gt;Saving and loading settings&lt;/h2&gt;

&lt;p&gt;Creating teams is a fair bit of manual work, and the Explorer, prior to version 0.6.0, was entirely stateless - there was no way to save that work!&lt;/p&gt;

&lt;p&gt;Now, you can save the user and team settings, as well as all the other explorer settings, to JSON files or to browser local storage.  See &lt;a href=&quot;https://polyglot.korny.info/tools/explorer/ui#saving-and-loading-settings&quot;&gt;the docs&lt;/a&gt; for more.&lt;/p&gt;

&lt;h2 id=&quot;moving-to-typescript&quot;&gt;Moving to Typescript&lt;/h2&gt;

&lt;p&gt;The explorer was originally written in pretty hacky JavaScript, with quite a bit of sloppy code - this is the side project of a busy parent after all!  However, I felt the need to clean things up, and also to learn TypeScript after all the good things I’d heard about it - so did the painful job of rebuilding with types.&lt;/p&gt;

&lt;p&gt;And it was pretty painful in places.  I do love TypeScript now - it’s a brilliant way to apply flexible types to a pretty terrible language.  But some things needed a quite different approach - and some areas, such as D3 visualisations, had almost no documentation at all.  D3 does have types - but very very few examples use them, and I had to do a lot of reading source code and relying on VSCode’s excellent TS support to get it all working.&lt;/p&gt;

&lt;p&gt;This does however mean that the code is a lot cleaner - I even have a few tests now!  So future changes will be less painful and less risky.&lt;/p&gt;

&lt;h2 id=&quot;other-refactorings&quot;&gt;Other refactorings&lt;/h2&gt;

&lt;p&gt;I won’t go into all the details here, but I also took the chance to clean up a bunch of code.&lt;/p&gt;

&lt;p&gt;On the rust side, I got rid of a lot of somewhat dubious generic logic I’d written using JSON &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; types.  I’d foolishly tried to make the code too generic - I don’t know why after 30+ years of coding I still make the same mistakes - I need to have “YAGNI” as a tattoo, just to remind me to keep things simple.&lt;/p&gt;

&lt;p&gt;I also enabled all the linters and checks I could, both in rust and TypeScript.  Honestly this is one of the biggest coding improvements I’ve seen in the past decade or so - automated tooling has gotten so good at spotting errors and non-idiomatic code, it is wonderful, especially for learning languages.&lt;/p&gt;

&lt;h2 id=&quot;looking-to-the-future-and-for-feedback&quot;&gt;Looking to the future, and for feedback&lt;/h2&gt;

&lt;p&gt;I’m going back to work in a couple of weeks - yay!  (actually I do miss it - especially interacting with people outside my family).  But I will keep making changes, as I can.&lt;/p&gt;

&lt;p&gt;I have a long-term plan to rework the whole Voronoi layout tool - that’s probably the next thing on my list.  But I’d love feedback if people are using this - what is good? What sucks?  What would you like to see?&lt;/p&gt;

&lt;p&gt;This blog has Disqus comments, but honestly I don’t read them much - probably better to chat to me on &lt;a href=&quot;https://twitter.com/kornys&quot;&gt;twitter&lt;/a&gt; or &lt;a href=&quot;https://hachydon.io/@Korny&quot;&gt;mastodon&lt;/a&gt; or face to face!  Or you can raise issues on github for specific bugs.&lt;/p&gt;</content><author><name>Korny Sietsma</name></author><category term="software development" /><category term="polyglot tools" /><category term="sabbatical" /><summary type="html">My sabbatical is winding up, I naturally got far less coding done than I expected! Our lovely daughter has had a big sleep regression, so a lot of my focus has been on just getting through life rather than perfecting my code. Still, I have actually achieved quite a lot, now that I go back and look at it - so I thought it was time for an updated blog post. See My initial announcement or The main Polyglot Code Tools site if you want more background. Major changes: Viewing activity by teams Saving and loading settings Moving to TypeScript for the explorer Quite a few refactorings Viewing by Teams I put this at the top as it is the area that is most useful for users! I’m a huge fan of the Team Topologies book - the Team should be the core unit of delivery in a well functioning agile organisation. So, when investigating codebases, I wanted to be able to tell which teams were operating in which areas, and how they overlap. The end result is a view like this: This does need a caveat though - you need to create team information yourself! Git doesn’t tell me which user is in which team. (In fact you also need to do a fair bit of work merging users, as git doesn’t tell me that foo@bar.com is actually the same user as Fulvio_Barrington@gmail.com …) There is also a view that tries to show where multiple teams overlap, using SVG patterns - this is a bit experimental, but might be useful: And you can focus on a single team (or a single user!) to see just their contribution compared to everyone else: Here blue is the selected team, red is other users, and colours in between show overlap. Also brighter colours show more change, darker show less. Saving and loading settings Creating teams is a fair bit of manual work, and the Explorer, prior to version 0.6.0, was entirely stateless - there was no way to save that work! Now, you can save the user and team settings, as well as all the other explorer settings, to JSON files or to browser local storage. See the docs for more. Moving to Typescript The explorer was originally written in pretty hacky JavaScript, with quite a bit of sloppy code - this is the side project of a busy parent after all! However, I felt the need to clean things up, and also to learn TypeScript after all the good things I’d heard about it - so did the painful job of rebuilding with types. And it was pretty painful in places. I do love TypeScript now - it’s a brilliant way to apply flexible types to a pretty terrible language. But some things needed a quite different approach - and some areas, such as D3 visualisations, had almost no documentation at all. D3 does have types - but very very few examples use them, and I had to do a lot of reading source code and relying on VSCode’s excellent TS support to get it all working. This does however mean that the code is a lot cleaner - I even have a few tests now! So future changes will be less painful and less risky. Other refactorings I won’t go into all the details here, but I also took the chance to clean up a bunch of code. On the rust side, I got rid of a lot of somewhat dubious generic logic I’d written using JSON Value types. I’d foolishly tried to make the code too generic - I don’t know why after 30+ years of coding I still make the same mistakes - I need to have “YAGNI” as a tattoo, just to remind me to keep things simple. I also enabled all the linters and checks I could, both in rust and TypeScript. Honestly this is one of the biggest coding improvements I’ve seen in the past decade or so - automated tooling has gotten so good at spotting errors and non-idiomatic code, it is wonderful, especially for learning languages. Looking to the future, and for feedback I’m going back to work in a couple of weeks - yay! (actually I do miss it - especially interacting with people outside my family). But I will keep making changes, as I can. I have a long-term plan to rework the whole Voronoi layout tool - that’s probably the next thing on my list. But I’d love feedback if people are using this - what is good? What sucks? What would you like to see? This blog has Disqus comments, but honestly I don’t read them much - probably better to chat to me on twitter or mastodon or face to face! Or you can raise issues on github for specific bugs.</summary></entry><entry><title type="html">A geeky kind of sabbatical</title><link href="http://localhost:4000/2022/09/12/sabbatical.html" rel="alternate" type="text/html" title="A geeky kind of sabbatical" /><published>2022-09-12T15:31:00+01:00</published><updated>2022-09-12T15:31:00+01:00</updated><id>http://localhost:4000/2022/09/12/sabbatical.html</id><content type="html" xml:base="http://localhost:4000/2022/09/12/sabbatical.html">&lt;h2 id=&quot;a-geeky-kind-of-sabbatical&quot;&gt;A geeky kind of sabbatical&lt;/h2&gt;

&lt;p&gt;I am on sabbatical!  After 10 years at Thoughtworks, I’m getting a nice long break.  (I’ve actually been on sabbatical for a few weeks - school holidays plus usual procrastination delayed this post…)&lt;/p&gt;

&lt;p&gt;I had to decide, a while ago - what would I do on my sabbatical?  Some people use them to travel, to see the world, to expand their horizons - but I have two small kids, so that really didn’t sound much like it fit this stage of my life!&lt;/p&gt;

&lt;p&gt;Instead, I wanted to think about things I could do while largely staying at or near home.  On thinking further, my main life goals at the moment are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mental health&lt;/li&gt;
  &lt;li&gt;Physical health&lt;/li&gt;
  &lt;li&gt;Learning and self-improvement&lt;/li&gt;
  &lt;li&gt;Family and family maintenance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Several of these are overlapping - I started on a venn diagram but it got a bit messy!&lt;/p&gt;

&lt;p&gt;However, I’m also a big geek - one thing that satistfies my “Mental health” and “Learning” areas is to actually write some code.  To build something of value, and share it with others.  This is especially the case as I haven’t been on a proper software delivery project since 2020 - I’ve done some fascinating work, but I have felt a bit disconnected from the art of writing code.&lt;/p&gt;

&lt;p&gt;So - a major goal of my sabbatical is to try to make some big improvements to my pet project, the &lt;a href=&quot;https://polyglot.korny.info&quot;&gt;Polyglot Code Tools&lt;/a&gt;. It might not sound much like a holiday to some!  But I love it.&lt;/p&gt;

&lt;p&gt;I’m also doing plenty for the other categories - I’m back doing weekly yoga (which is awesome), I had a great summer holiday with the kids and my mum, and I’ve done lots of life-admin tasks that I won’t bore people with here.  I’m also going to try for a few long bike rides - but right now I’m scratching my “I want to code” itch!&lt;/p&gt;

&lt;p&gt;I have a few big epics planned around my tools - some of them are already done or nearing done!  For example, you can now assign users to teams, and visualise which team has changed which areas of code most in a particular timespan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-sabbatical/v060alpha1_teams.png&quot; alt=&quot;Showing teams in the Explorer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was from code I hacked together at a client, I’ve now re-written it cleanly, in TypeScript, and it is mostly working.&lt;/p&gt;

&lt;h2 id=&quot;work-in-progress&quot;&gt;Work in progress&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Moving to TypeScript - done!  Some areas were quite tricky - I should blog about TypeScript…&lt;/li&gt;
  &lt;li&gt;Saving explorer settings to the browser or to file - done! This is essential as the UI grows - otherwise every time you reload the browser, all config like user teams would be lost.&lt;/li&gt;
  &lt;li&gt;Creating and visualizing teams - mostly done! Most of what remains is UI tweaks - letting users see teams in more contexts, for example.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;planned-epics&quot;&gt;Planned epics&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Filtering the UI by folder and/or programming language
    &lt;ul&gt;
      &lt;li&gt;this can really help speed on a large codebase. Sadly the layout can’t change on filtering, but that doesn’t matter for a lot of use cases.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Making it work without git - ideally adding support for other SCMs, but “not crashing the UI if there is no git data” would be a good start.  And skipping git scanning would be a good way for users to get faster feedback.&lt;/li&gt;
  &lt;li&gt;Rewriting the Voronoi layout in rust / webassembly
    &lt;ul&gt;
      &lt;li&gt;This is a big one - I’ve actually started a while ago, but it’s tricky, especially as the JavaScript code I use currently is (a) quite prone to crashing, and (b) very much not suited to a rust-style language - lots of random state fiddling all over the place.&lt;/li&gt;
      &lt;li&gt;However, I suspect the result would be drastically faster - not just because rust, but also as I could ditch lots of time-consuming error-handling retries&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If it is fast enough, embedding layout in the Explorer so you can change layout at run-time.  This would make the system much more usable and the feedback loop for things like changing file ignore patterns much tighter.&lt;/li&gt;
  &lt;li&gt;Reading the research for more ideas!  I have a number of academic papers I picked up over time, and a number of great Data Visualisation books - I want to mine those for ideas of value.&lt;/li&gt;
  &lt;li&gt;Much better documentation - I’d like an introduction video, for instance, for people who learn from videos better than words.  And a matching step-by-step written guide.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;possible-epics&quot;&gt;Possible epics&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Using a different lines-of-code tool.  I’m using a fork of &lt;a href=&quot;https://github.com/XAMPPRocky/tokei&quot;&gt;tokei&lt;/a&gt; which is nice and fast - but I had to fork it because I wanted to be able to strip comments from the code for complexity measures.  And maintaining the fork is annoying.  There are many other multi-language parsers out there, such as &lt;a href=&quot;https://tree-sitter.github.io/tree-sitter/&quot;&gt;tree-sitter&lt;/a&gt; - these might also let me do some more complex metrics like class/method length, while still supporting a lot of languages.&lt;/li&gt;
  &lt;li&gt;Using a data server rather than JSON files.  This would take away some of the unix-style simplicity of the tool - and make it harder to run in locked down environments. But it also might add a lot of power - some calculations could be offloaded to the server, allowing for things like actually observing code as it existed at a particular point in time.  And the layout engine could run as compiled multithreaded rustm not as webassembly in a browser.&lt;/li&gt;
  &lt;li&gt;Using other layouts than Voronoi trees.&lt;/li&gt;
  &lt;li&gt;Other tools!  I have a &lt;a href=&quot;https://github.com/kornysietsma/git-cd-chart-twuk2018&quot;&gt;git log visualisation thing&lt;/a&gt; I built ages ago - it’d be great to rebuild something similar with new tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;important-tasks-but-not-really-epics&quot;&gt;Important tasks but not really epics&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Fixing publishing binaries (the tools I used to use have died!) - probably using github actions&lt;/li&gt;
  &lt;li&gt;Adding unit tests to the Explorer - yes, I’ve been lax here.  The rust code is tested and mostly TDD, but the UI involved a lot of UI tweaking that just wasn’t worth testing. Nowadays there is plenty of quite testable logic as well - but having started with no tests, it’s hard to course correct.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;please-send-me-your-ideas&quot;&gt;Please send me your ideas&lt;/h2&gt;

&lt;p&gt;If anyone out there has used the polyglot tools, or might be interested but can’t for some reason, I’d love to hear your thoughts.  What might you be interested in seeing in a code visualisation tool?&lt;/p&gt;

&lt;p&gt;Also, I’d love suggestions of open-source code I can look at as examples.  I can’t publish examples based on client code, so I’d like more real-world projects that are a bit like business code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multiple interrelated repositories - it’s nice to try out how the &lt;a href=&quot;https://polyglot.korny.info/metrics/temporal-coupling&quot;&gt;temporal coupling&lt;/a&gt; features work - so far they haven’t been awfully useful, but I’m hoping to find places where they are of value&lt;/li&gt;
  &lt;li&gt;Lots of teams of developers.  This is a big issue with open-source samples - so much is done by individual contributors.  In day-to-day work we like to work with teams as the unit of software delivery, so I’d love places where visualising teams makes sense.&lt;/li&gt;
  &lt;li&gt;Lots of languages.  This isn’t hard really, almost everyone has a mix of languages these days.  But it’d be nice to have some languages that lack existing tools, like SQL…&lt;/li&gt;
  &lt;li&gt;and of course, lots of code and years of git history.  (but not &lt;em&gt;too&lt;/em&gt; much code - I tried running against the linux kernel, and it works, but takes a long long time)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any ideas, please contact me on &lt;a href=&quot;https://hachydon.io/@Korny&quot;&gt;mastodon&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/kornys&quot;&gt;twitter&lt;/a&gt; (you can comment on this blog too, but it doesn’t get checked all that often!)&lt;/p&gt;

&lt;h2 id=&quot;the-inevitable-update&quot;&gt;The inevitable update&lt;/h2&gt;

&lt;p&gt;Quick update 28th September - I really didn’t anticipate just how much impact sleep deprivation from our lovely daughter was going to impact my plans.  I’ve done quite a bit (more blog updates to come) but I also need to lower my expectations a bit - I am focusing more on mental health and getting the family through a difficult year, than getting a vast amount done.&lt;/p&gt;

&lt;p&gt;So I’m going to release some cool stuff, update the docs, and all that.  But some of the later epics might have to wait a few more months / years!&lt;/p&gt;</content><author><name>Korny Sietsma</name></author><category term="personal" /><category term="mental health" /><category term="family" /><category term="polyglot tools" /><category term="sabbatical" /><summary type="html">A geeky kind of sabbatical I am on sabbatical! After 10 years at Thoughtworks, I’m getting a nice long break. (I’ve actually been on sabbatical for a few weeks - school holidays plus usual procrastination delayed this post…) I had to decide, a while ago - what would I do on my sabbatical? Some people use them to travel, to see the world, to expand their horizons - but I have two small kids, so that really didn’t sound much like it fit this stage of my life! Instead, I wanted to think about things I could do while largely staying at or near home. On thinking further, my main life goals at the moment are: Mental health Physical health Learning and self-improvement Family and family maintenance Several of these are overlapping - I started on a venn diagram but it got a bit messy! However, I’m also a big geek - one thing that satistfies my “Mental health” and “Learning” areas is to actually write some code. To build something of value, and share it with others. This is especially the case as I haven’t been on a proper software delivery project since 2020 - I’ve done some fascinating work, but I have felt a bit disconnected from the art of writing code. So - a major goal of my sabbatical is to try to make some big improvements to my pet project, the Polyglot Code Tools. It might not sound much like a holiday to some! But I love it. I’m also doing plenty for the other categories - I’m back doing weekly yoga (which is awesome), I had a great summer holiday with the kids and my mum, and I’ve done lots of life-admin tasks that I won’t bore people with here. I’m also going to try for a few long bike rides - but right now I’m scratching my “I want to code” itch! I have a few big epics planned around my tools - some of them are already done or nearing done! For example, you can now assign users to teams, and visualise which team has changed which areas of code most in a particular timespan: This was from code I hacked together at a client, I’ve now re-written it cleanly, in TypeScript, and it is mostly working. Work in progress Moving to TypeScript - done! Some areas were quite tricky - I should blog about TypeScript… Saving explorer settings to the browser or to file - done! This is essential as the UI grows - otherwise every time you reload the browser, all config like user teams would be lost. Creating and visualizing teams - mostly done! Most of what remains is UI tweaks - letting users see teams in more contexts, for example. Planned epics Filtering the UI by folder and/or programming language this can really help speed on a large codebase. Sadly the layout can’t change on filtering, but that doesn’t matter for a lot of use cases. Making it work without git - ideally adding support for other SCMs, but “not crashing the UI if there is no git data” would be a good start. And skipping git scanning would be a good way for users to get faster feedback. Rewriting the Voronoi layout in rust / webassembly This is a big one - I’ve actually started a while ago, but it’s tricky, especially as the JavaScript code I use currently is (a) quite prone to crashing, and (b) very much not suited to a rust-style language - lots of random state fiddling all over the place. However, I suspect the result would be drastically faster - not just because rust, but also as I could ditch lots of time-consuming error-handling retries If it is fast enough, embedding layout in the Explorer so you can change layout at run-time. This would make the system much more usable and the feedback loop for things like changing file ignore patterns much tighter. Reading the research for more ideas! I have a number of academic papers I picked up over time, and a number of great Data Visualisation books - I want to mine those for ideas of value. Much better documentation - I’d like an introduction video, for instance, for people who learn from videos better than words. And a matching step-by-step written guide. Possible epics Using a different lines-of-code tool. I’m using a fork of tokei which is nice and fast - but I had to fork it because I wanted to be able to strip comments from the code for complexity measures. And maintaining the fork is annoying. There are many other multi-language parsers out there, such as tree-sitter - these might also let me do some more complex metrics like class/method length, while still supporting a lot of languages. Using a data server rather than JSON files. This would take away some of the unix-style simplicity of the tool - and make it harder to run in locked down environments. But it also might add a lot of power - some calculations could be offloaded to the server, allowing for things like actually observing code as it existed at a particular point in time. And the layout engine could run as compiled multithreaded rustm not as webassembly in a browser. Using other layouts than Voronoi trees. Other tools! I have a git log visualisation thing I built ages ago - it’d be great to rebuild something similar with new tools. Important tasks but not really epics Fixing publishing binaries (the tools I used to use have died!) - probably using github actions Adding unit tests to the Explorer - yes, I’ve been lax here. The rust code is tested and mostly TDD, but the UI involved a lot of UI tweaking that just wasn’t worth testing. Nowadays there is plenty of quite testable logic as well - but having started with no tests, it’s hard to course correct. Please send me your ideas If anyone out there has used the polyglot tools, or might be interested but can’t for some reason, I’d love to hear your thoughts. What might you be interested in seeing in a code visualisation tool? Also, I’d love suggestions of open-source code I can look at as examples. I can’t publish examples based on client code, so I’d like more real-world projects that are a bit like business code: Multiple interrelated repositories - it’s nice to try out how the temporal coupling features work - so far they haven’t been awfully useful, but I’m hoping to find places where they are of value Lots of teams of developers. This is a big issue with open-source samples - so much is done by individual contributors. In day-to-day work we like to work with teams as the unit of software delivery, so I’d love places where visualising teams makes sense. Lots of languages. This isn’t hard really, almost everyone has a mix of languages these days. But it’d be nice to have some languages that lack existing tools, like SQL… and of course, lots of code and years of git history. (but not too much code - I tried running against the linux kernel, and it works, but takes a long long time) If you have any ideas, please contact me on mastodon or twitter (you can comment on this blog too, but it doesn’t get checked all that often!) The inevitable update Quick update 28th September - I really didn’t anticipate just how much impact sleep deprivation from our lovely daughter was going to impact my plans. I’ve done quite a bit (more blog updates to come) but I also need to lower my expectations a bit - I am focusing more on mental health and getting the family through a difficult year, than getting a vast amount done. So I’m going to release some cool stuff, update the docs, and all that. But some of the later epics might have to wait a few more months / years!</summary></entry><entry><title type="html">Hiatus</title><link href="http://localhost:4000/2022/01/26/hiatus.html" rel="alternate" type="text/html" title="Hiatus" /><published>2022-01-26T20:31:00+00:00</published><updated>2022-01-26T20:31:00+00:00</updated><id>http://localhost:4000/2022/01/26/hiatus.html</id><content type="html" xml:base="http://localhost:4000/2022/01/26/hiatus.html">&lt;h2 id=&quot;long-time-no-blog&quot;&gt;Long time no blog&lt;/h2&gt;

&lt;p&gt;I don’t often post personal things here, but I thought after a 15 month gap I should put something up.&lt;/p&gt;

&lt;p&gt;We are all well and happy here, but since late 2020 I was incredibly busy at work - working on a “Red team” review of a major UK public sector project which was in real trouble, and then working with the organisation to help plan and build a complete reset of the project.  It was a challenging and interesting and a great learning experience - but it also used up all my energy and spare time not already dedicated to family, so not much side-project work or blog ideas made it out.&lt;/p&gt;

&lt;p&gt;Then in November 2021 our other side-project happened - we adopted a child!  I’m not going to share details in a public medium, but it’s been a wonderful exhausting journey. I’m half way through 6 months of Adoption Leave, and things are sort-of almost calming down a bit - enough that I can start thinking about the year ahead, and maybe update this blog!&lt;/p&gt;

&lt;p&gt;So - I might turn some draft posts into real posts at some stage; and I’m trying to get back into technical reading, when I have the time and brainpower.&lt;/p&gt;

&lt;p&gt;Currently I’m reading &lt;a href=&quot;https://www.goodreads.com/book/show/1408452.Information_Visualization&quot;&gt;Information Visualization: Perception for Design&lt;/a&gt; by Colin Ware - which is fascinating, an in-depth academic text on human visual perception and cognition - it’s basically covering the low-level stuff that our bodies and brains do to process visual info, with an eye on how this impacts the world of visualization.&lt;/p&gt;

&lt;p&gt;There is so much here, backed by so much research - it’s not all immediately applicable to people building D3 interfaces, necessarily - you can get that from lots of other books.  But if you want to know a bit more about &lt;em&gt;why&lt;/em&gt; you might want to prefer one kind of colour scheme to another, or why visual programming languages might not ever match the hype, or how to support colour-blind users (and why some small proportion of the population can see colours that nobody else can!), or a million other fascinating facts about brains and eyes - it’s a really interesting read.  If very dense to read through blurry, sleep-deprived eyes.&lt;/p&gt;

&lt;p&gt;Anyway, enough blathering - just thought I’d post a “still alive” notice.  There may be more posts soon, or it may be more months of silence here!&lt;/p&gt;</content><author><name>Korny Sietsma</name></author><category term="personal" /><category term="blogging" /><category term="family" /><category term="visualization" /><summary type="html">Long time no blog I don’t often post personal things here, but I thought after a 15 month gap I should put something up. We are all well and happy here, but since late 2020 I was incredibly busy at work - working on a “Red team” review of a major UK public sector project which was in real trouble, and then working with the organisation to help plan and build a complete reset of the project. It was a challenging and interesting and a great learning experience - but it also used up all my energy and spare time not already dedicated to family, so not much side-project work or blog ideas made it out. Then in November 2021 our other side-project happened - we adopted a child! I’m not going to share details in a public medium, but it’s been a wonderful exhausting journey. I’m half way through 6 months of Adoption Leave, and things are sort-of almost calming down a bit - enough that I can start thinking about the year ahead, and maybe update this blog! So - I might turn some draft posts into real posts at some stage; and I’m trying to get back into technical reading, when I have the time and brainpower. Currently I’m reading Information Visualization: Perception for Design by Colin Ware - which is fascinating, an in-depth academic text on human visual perception and cognition - it’s basically covering the low-level stuff that our bodies and brains do to process visual info, with an eye on how this impacts the world of visualization. There is so much here, backed by so much research - it’s not all immediately applicable to people building D3 interfaces, necessarily - you can get that from lots of other books. But if you want to know a bit more about why you might want to prefer one kind of colour scheme to another, or why visual programming languages might not ever match the hype, or how to support colour-blind users (and why some small proportion of the population can see colours that nobody else can!), or a million other fascinating facts about brains and eyes - it’s a really interesting read. If very dense to read through blurry, sleep-deprived eyes. Anyway, enough blathering - just thought I’d post a “still alive” notice. There may be more posts soon, or it may be more months of silence here!</summary></entry><entry><title type="html">Introducing the Polyglot Code Explorer</title><link href="http://localhost:4000/2020/09/06/introducing-the-polyglot-code-explorer.html" rel="alternate" type="text/html" title="Introducing the Polyglot Code Explorer" /><published>2020-09-06T19:56:00+01:00</published><updated>2020-09-06T19:56:00+01:00</updated><id>http://localhost:4000/2020/09/06/introducing-the-polyglot-code-explorer.html</id><content type="html" xml:base="http://localhost:4000/2020/09/06/introducing-the-polyglot-code-explorer.html">&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/main_ui_sample.png&quot; alt=&quot;Main UI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want a quick look at the explorer, you can see &lt;a href=&quot;http://polyglot-code-explorer.s3-website.eu-west-2.amazonaws.com/&quot;&gt;a simple demo here&lt;/a&gt; or &lt;a href=&quot;http://polyglot-code-explorer-openmrs.s3-website.eu-west-2.amazonaws.com/&quot;&gt;a more complex one here&lt;/a&gt;.  There is also a documentation site at  &lt;a href=&quot;https://polyglot.korny.info&quot;&gt;https://polyglot.korny.info&lt;/a&gt; (currently a work-in-progress).&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;welcome-to-the-polyglot-code-explorer&quot;&gt;Welcome to the Polyglot Code Explorer&lt;/h2&gt;

&lt;p&gt;The Polyglot Code Explorer is an open-source tool for visualising complex codebases written in multiple programming languages.&lt;/p&gt;

&lt;p&gt;In this article I am going to explain its purpose, how you can run it yourself, and what it does.&lt;/p&gt;

&lt;h2 id=&quot;what-is-it-for&quot;&gt;What is it for?&lt;/h2&gt;

&lt;p&gt;Fundamentally, I wanted to answer the question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How can we visualise large codebases without needing complex language-specific parsers and logic?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Partly I wanted to easily spot toxic code - my colleague &lt;a href=&quot;https://erik.doernenburg.com/2013/06/toxicity-reloaded/&quot;&gt;Erik Dörnenberg wrote some great articles on Toxic code visualisation&lt;/a&gt; and I wanted a way to spot some of these problem areas myself.&lt;/p&gt;

&lt;p&gt;But also, I just wanted to be able to explore the code quickly.  I’m a visual thinker, so my main focus is on visualisation - especially when trying to spot patterns in millions of lines of code.&lt;/p&gt;

&lt;p&gt;It is far quicker for me to look at a diagram and see some unusual colouring in one area, than to see the same information in a table of numbers.&lt;/p&gt;

&lt;h3 id=&quot;why-polyglot&quot;&gt;Why polyglot?&lt;/h3&gt;

&lt;p&gt;Polyglot means “speaking multiple languages” - in this case, it means these tools should work, to some degree, for any text-based programming language.&lt;/p&gt;

&lt;p&gt;I’ve worked in many programming languages over the years, and a lot of them don’t have good or easy code quality tools - either they are too new for a community to have built them, or they are from ancient projects where even if such tools exist, getting them up and running is a headache.  And each tool probably produces different metrics in different formats - it’s hard to get any sort of big-picture view.&lt;/p&gt;

&lt;p&gt;Also many real world systems don’t use a single language - often it is better to use specialist languages for different tasks, rather than one general-purpose one.  For example one project might have a UI built in JavaScript and HTML, a microservice built in Kotlin and a platform automation tool build in Rust.&lt;/p&gt;

&lt;p&gt;Also I was inspired by reading Adam Tornhill’s book &lt;a href=&quot;https://www.goodreads.com/book/show/23627482-your-code-as-a-crime-scene&quot;&gt;“Your code as a crime scene”&lt;/a&gt; - he talks about all the things you can learn from really simple metrics like lines of code, and indentation, and change history.  None of these need a complex language parser - and complex language parsers tend to be touchy and flaky.  Most of my code uses no language parser at all, or just a very simple which can distinguish code from comments.&lt;/p&gt;

&lt;p&gt;And finally - supporting all the various languages out there is a lot of work!  Quite a few of the other tools I found linked from Erik’s articles, and elsewhere, seem to have parsers for a number of languages - but progress is slow, and often they don’t keep up with new languages or language changes.  Staying largely language-agnostic makes it much easier for me to maintain my code, and not have to worry about it stagnating.&lt;/p&gt;

&lt;h2 id=&quot;how-to-run-the-explorer&quot;&gt;How to run the Explorer&lt;/h2&gt;

&lt;p&gt;The explorer is actually the front end component of three tightly coupled applications:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/flowchart.png&quot; alt=&quot;Tools flowchart&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Polyglot Code Scanner is a rust application, which scans the source code and produces a JSON data file&lt;/li&gt;
  &lt;li&gt;The Polyglot Code Offline Layout tool is a node.js script which adds layout information to the JSON data file&lt;/li&gt;
  &lt;li&gt;The Polyglot Code Explorer is a react/D3 web app which provides the user interface for exploring the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code is open source, you can find it on GitHub:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kornysietsma/polyglot-code-scanner&quot;&gt;https://github.com/kornysietsma/polyglot-code-scanner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kornysietsma/polyglot-code-offline-layout&quot;&gt;https://github.com/kornysietsma/polyglot-code-offline-layout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kornysietsma/polyglot-code-explorer&quot;&gt;https://github.com/kornysietsma/polyglot-code-explorer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;I should add a disclaimer - I am not a rust guru, and I am definitely not a react guru!  This is side project code, not commercial-quality - it may well have bugs, mistakes, ugliness, and it has far less testing than I’d usually expect :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may prefer to run these tools from source code - not all the executables have been tested on all platforms! There are some &lt;a href=&quot;https://polyglot.korny.info/tools/explorer/howto&quot;&gt;more detailed how-to guides on the docs site&lt;/a&gt; if you want to build them yourself, or need more details than the brief instructions below.&lt;/p&gt;

&lt;h3 id=&quot;getting-the-executable-files&quot;&gt;Getting the executable files&lt;/h3&gt;

&lt;p&gt;Each of the tools is packaged up as an executable file - the Scanner is written in rust, so it’s easy to just compile a binary.  The Layout app is a node.js script, I’ve used &lt;a href=&quot;https://www.npmjs.com/package/pkg&quot;&gt;pkg&lt;/a&gt; to build a bundled executable.  And the Explorer can be run as a static website, so the packages are a zipped up bundle of all files needed to build the website, which you can run yourself.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scanner executables can be downloaded from &lt;a href=&quot;https://github.com/kornysietsma/polyglot-code-scanner/releases&quot;&gt;https://github.com/kornysietsma/polyglot-code-scanner/releases&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Layout executables can be downloaded from &lt;a href=&quot;https://github.com/kornysietsma/polyglot-code-offline-layout/releases&quot;&gt;https://github.com/kornysietsma/polyglot-code-offline-layout/releases&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Explorer bundles can be downloaded from &lt;a href=&quot;https://github.com/kornysietsma/polyglot-code-explorer/releases&quot;&gt;https://github.com/kornysietsma/polyglot-code-explorer/releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are on a Mac you will need to strip Apple’s quarantine attributes from the binary files to avoid the “app is from an unknown developer” error:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;zxf polyglot-code-scanner-vwhatever-x86_64-apple-darwin.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;polyglot-code-scanner-vwhatever-x86_64-apple-darwin
xattr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; com.apple.quarantine polyglot_code_scanner

unzip polyglot-code-offline-layout-macos.zip
xattr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; com.apple.quarantine polyglot-code-offline-layout
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Explorer is not an executable file - it’s a zip file containing the HTML, CSS and JavaScript files needed to run the site.  You can run them locally by running a tiny web server yourself using Python - &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server&quot;&gt;there are more detailed instructions here&lt;/a&gt; or there’s a big list of similar servers in other languages &lt;a href=&quot;https://gist.github.com/willurd/5720255&quot;&gt;here&lt;/a&gt; - I’ll use Python 3 below.&lt;/p&gt;

&lt;h3 id=&quot;running-them&quot;&gt;Running them&lt;/h3&gt;

&lt;p&gt;A short sample of running these together might help:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/work
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;polyglot_code_scanner &lt;span class=&quot;nt&quot;&gt;--coupling&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--years&lt;/span&gt; 3 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; my_project_1.json ~/src/my_project
&lt;span class=&quot;c&quot;&gt;# this can be slow for big projects, or if you scan back through many years of history&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# coupling is optional, remove --coupling to speed it up if you don&apos;t want it&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Check there are no errors and the my_project_1.json file is there&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;polyglot-code-offline-layout &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; my_project_1.json &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; my_project_2.json
&lt;span class=&quot;c&quot;&gt;# this can be slow for big files&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Check there are no errors and the my_project_2.json file is there&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# the first time, you need to unzip the explorer files&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip ~/downloads/polyglot-code-explorer.zip
Archive:  polyglot-code-explorer.zip
   creating: polyglot-code-explorer/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;my_project_2.json polyglot-code-explorer/data/default.json
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;polyglot-code-explorer
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; http.server
Serving HTTP on 0.0.0.0 port 8000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;http://0.0.0.0:8000/&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then open a browser to &lt;a href=&quot;http://0.0.0.0:8000&quot;&gt;http://0.0.0.0:8000&lt;/a&gt; to start exploring!&lt;/p&gt;

&lt;h2 id=&quot;using-the-ui&quot;&gt;Using the UI&lt;/h2&gt;

&lt;p&gt;The Explorer front end looks somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/Main_UI.png&quot; alt=&quot;Main UI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is more about how to use the UI &lt;a href=&quot;http://localhost:2222/tools/explorer/ui&quot;&gt;on the docs site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The centre of the display shows the files in your project - I’m using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Weighted_Voronoi_diagram&quot;&gt;Weighted Voronoi Diagram&lt;/a&gt; which has the big advantage of showing files roughly in proportional to their size.  And by size I’m using lines of code, which is generally much more useful than bytes - especially as research tends to show that high lines of code is correlated with complexity and defects - so just looking for large lines of code is a good starting point for finding problems.&lt;/p&gt;

&lt;h3 id=&quot;viewing-by-programming-language&quot;&gt;Viewing by programming language&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/vis_language.png&quot; alt=&quot;language visualisation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This view is very simple - it just colours each file by programming language, showing the 10 most common languages.  Mostly useful for getting an overview of what goes where - it’s usually easy to spot the front-end vs back-end code by the colours used.  (only 10 languages are shown because beyond that, it’s hard to visually see different colours)&lt;/p&gt;

&lt;h3 id=&quot;lines-of-code&quot;&gt;Lines of code&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/vis_loc.png&quot; alt=&quot;lines of code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This view is simple enough - it uses a scale from blue for tiny files, through to yellow for giant files.&lt;/p&gt;

&lt;p&gt;Note that this is not a linear scale - a lot of these use what I call a “Good/Bad/Ugly” scale - blue (0) is good, red (1000) is bad, and yellow (10000 and above) is just ugly.  If I used a linear scale, it’d be harder to distinguish the good/bad files from each other.  (yes, I could use a log scale, but that has it’s own problems)&lt;/p&gt;

&lt;h3 id=&quot;indentation&quot;&gt;Indentation&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/vis_indentation.png&quot; alt=&quot;indentation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This metric is an interesting one. In &lt;a href=&quot;https://doi.org/10.1109/ICPC.2008.13&quot;&gt;Hindle, Abram, Michael W. Godfrey, and Richard C. Holt. 2008. ‘Reading Beside the Lines: Indentation as a Proxy for Complexity Metric’&lt;/a&gt; they found that indentation is often useful as a way of looking for complexity - which makes common sense; files with a lot of indentation are often files with deeply nested “if” and “case” statements.  You can choose a few sub-visualisations using the drop-down near the top-left - the default shows the standard deviation of indentation, which is often the most useful metric; you can also see the worst indentation in each file, and the “total area” which is useful for showing files which are both large and deeply indented.&lt;/p&gt;

&lt;p&gt;Of course this metric can have false positives - heavy indentation might be due to a particular formatting style for long lines, or an actually valid data structure, or other valid reasons.  But it is often surprisingly useful.&lt;/p&gt;

&lt;h3 id=&quot;age-since-last-change&quot;&gt;Age since last change&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/vis_age.png&quot; alt=&quot;age since last change&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This view shows how long it is since each file was changed (from git history) - blue files are recently changed, red files haven’t changed in a year, yellow files haven’t changed in 4 years.  Note that this is affected by the date selector down the bottom of the page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/date_selector.png&quot; alt=&quot;date selector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Files that haven’t changed at all in the selected date range will show in grey.  You need to select the whole project (drag the left side of the selector to the left of the screen) to see change information across the whole scanned date range.&lt;/p&gt;

&lt;p&gt;This is a good/bad/ugly scale again, largely because generally files that haven’t changed for a long time are, in my experience, parts of the system that nobody understands or feels safe to touch.&lt;/p&gt;

&lt;p&gt;However this is a bit contentious - it depends a lot on the culture of the organisation, and the kind of code - a lot of research in this field shows the flip-side of this, that files that haven’t changed for ages are stable. If they had bugs, people would have touched them - so these files might be “safe”.  Personally, coming from an agile world where shared code ownership is important, and rapid change is the norm, I see old untouched files as something that might show stagnation and maintenance nightmares - I think a lot of what is “good” here depends on what you are looking for.&lt;/p&gt;

&lt;h3 id=&quot;creation-date&quot;&gt;Creation date&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/vis_creation.png&quot; alt=&quot;creation date&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;doesn’t&lt;/em&gt; use a good/bad scale - it’s not really about quality, but sometimes it’s useful to know which files are new, and which are old.  This is especially handy when you are using the date selector, to give you a feel for how the code has changed over time.&lt;/p&gt;

&lt;p&gt;However, there is a problem here that requires a bit of a digression&lt;/p&gt;

&lt;h4 id=&quot;the-problem-with-the-date-selector&quot;&gt;The problem with the date selector&lt;/h4&gt;

&lt;p&gt;The scanner starts with the files currently on your filesystem - and then it works backwards in time through the git logs.  It doesn’t really keep track of the actual state of your system over time, ~or file renames,~ or deleted files.  If you create a file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.c&lt;/code&gt;, and do a pile of work on it, and then delete it, the scanner will not show it - there’s not really anywhere in the JSON data file to store that data!  ~Similarly renames are not handled well - it sees a file rename, but isn’t great at tracking what happens to the file before the rename.  (This is something I plan to fix, when I can!  But it’s non-trivial - you can’t just track file renames by time, you need to track them by branch…)~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; as of scanner version 0.2.0, it does now follow renames and respect deletes.  You still can’t see any files that are not in the current HEAD revision when you scan!  But if you rename &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.c&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar.c&lt;/code&gt; it will show all changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.c&lt;/code&gt; when you look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar.c&lt;/code&gt;. This is most important if you move directories around - I’ve had to rename &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/hierachy&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/hierarchy&lt;/code&gt; in the past!)&lt;/p&gt;

&lt;p&gt;So moving the date selector is handy for limiting some kinds of information, and getting some views of the past - but it’s not actually a window into the past state of the project.&lt;/p&gt;

&lt;h3 id=&quot;unique-changers&quot;&gt;Unique changers&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/vis_unique_changers.png&quot; alt=&quot;unique changers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This shows how many different people touched a file, in the selected date range. Again is a bit of an “it depends” metric - some studies show that few changers are good, as they tend to be just experts and not new inexperienced people.  But again, too few changers can be a sign that only one person knows a piece of code, so you don’t have any collective code ownership, and if that one person leaves, you might have some unknown code.  (There’s some really interesting research in this area, which I’d love to look into in the future - such as looking at how new/old each changer is to the organisation, how long they’ve been touching this area of the code, and the like).&lt;/p&gt;

&lt;p&gt;This has a custom colour scheme because it’s not as simple as good/bad.  Basically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No changers is bad, so it’s highlighted in cyan.  This probably means that no-one currently understands the code at all.&lt;/li&gt;
  &lt;li&gt;One changer might be OK, though I’d see it as an ownership risk.  This is shown in dark red.&lt;/li&gt;
  &lt;li&gt;Two to Eight coders is, in my view, generally OK.  This is a “two-pizza team” - it’s fine for the whole team to be changing a file.&lt;/li&gt;
  &lt;li&gt;Eight to 30 coders is definitely risky - maybe the file is tightly coupled with several areas of code, or full of bugs so people keep needing to fix it. High numbers are in brighter colours.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; there is one current limitation here - the system treats unique user names / emails as unique individuals.  So if you change email or git account, you will look like two people.  I plan to add some way to flag duplicate names - possibly using &lt;a href=&quot;https://www.git-scm.com/docs/git-check-mailmap&quot;&gt;the pretty obscure git .mailmap file format&lt;/a&gt;.  But this is a fair way down my to-do list.&lt;/p&gt;

&lt;h3 id=&quot;churn&quot;&gt;Churn&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/vis_churn.png&quot; alt=&quot;churn&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Churn shows the rate of change - how often a file has changed in the selected date window.  This again isn’t necessarily good or bad - it depends a lot on what date range you are using.  If a file changes every work day over several years, that’s probably bad!  But if it changes every day over the course of a short project, that might be fine.&lt;/p&gt;

&lt;p&gt;There are three sub-visualisations here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Days containing a change - this is in proportion to the number of days selected.  So “0.5” means the file has changed every second day, on average.  This doesn’t care how often in the day a file changed, so 10 commits on one day looks the same as 1 commit.&lt;/li&gt;
  &lt;li&gt;Commits per day - this is the sum of commits, divided by the number of days.  So “0.5” means on average one commit every two days - but this might mean 150 commits on one day, and none the rest of the year.&lt;/li&gt;
  &lt;li&gt;Lines per day - this is the sum of the number of lines changed (both adds and deletes) divided by the number of days.  So tiny tweaks to files won’t show up nearly as brightly as large numbers of lines added or deleted.  Good for seeing where more work is being done.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;temporal-coupling&quot;&gt;Temporal Coupling&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/2020-09-01-polyglot-explorer/Coupling.png&quot; alt=&quot;coupling&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is based on ideas from Adam Tornhill’s books, plus some research - it tries to work out when files might be tightly coupled to each other, based on when the files change in git.  Adam calls this “Temporal Coupling”.&lt;/p&gt;

&lt;p&gt;The curved lines show which files seem to be temporally coupled to which other files.&lt;/p&gt;

&lt;p&gt;Note each line is unidirectional - file A may be coupled to file B, but file B may not be coupled to file A.&lt;/p&gt;

&lt;p&gt;For example, in the screenshot above, the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testprocessinggui.cpp&lt;/code&gt; had commits on 22 days in the date range selected.&lt;/p&gt;

&lt;p&gt;The file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qgisapp.cpp&lt;/code&gt; was also changed on 20 of the same days.&lt;/p&gt;

&lt;p&gt;According to the current coupling algorithm, this means it has a ratio of 0.909 - 90% of commits to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testprocessinggui.cpp&lt;/code&gt; seem to have also implied commits to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qgisapp.cpp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The converse might not be true -  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qgisapp.cpp&lt;/code&gt; might have changed on another 20 unrelated days, so it might not have a coupling connection back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testprocessinggui.cpp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Obviously this logic can produce a lot of false positives, if files change a lot coincidentally.&lt;/p&gt;

&lt;p&gt;At the moment, this either produces far too many links, or far too few.  I think this needs a lot of work - at minimum, it should use a much smaller time window than a day!  I am probably going to try to make it changes within an hour, and see if that helps.&lt;/p&gt;

&lt;p&gt;Most of the research in this area tracks changes within a single commit - but this doesn’t work so well for projects with lots of repositories, such as microservices projects.  A huge benefit of this sort of coupling display, if it works, is to find those hidden dependencies between projects - knowing that every time you change the Foo service, you also need to change a file in the Bar service, could be very useful.&lt;/p&gt;

&lt;h2 id=&quot;more-information-and-further-reading&quot;&gt;More information and further reading&lt;/h2&gt;

&lt;p&gt;I have built a documentation site for these tools, at &lt;a href=&quot;https://polyglot.korny.info&quot;&gt;https://polyglot.korny.info&lt;/a&gt; - it gives a bit more of the history of how and why I built these tools.&lt;/p&gt;

&lt;p&gt;I also talked about this recently on &lt;a href=&quot;https://www.thoughtworks.com/podcasts/code-visualization&quot;&gt;the ThoughtWorks Technology podcast&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;I’m keen to keep tinkering with this - I have a pile of possible enhancements, and a long list of research to read!  And a lovely 3 year old child, and limited spare time :)&lt;/p&gt;

&lt;p&gt;A few things are of fairly high priority - I’d like to handle git history renames better, projects with a lot of refactoring will have poorer quality metrics at the moment.&lt;/p&gt;

&lt;p&gt;I’d also love to get feedback to help me prioritise - feel free to add comments on the Disqus form below, or contact me &lt;a href=&quot;https://twitter.com/kornys&quot;&gt;on Twitter&lt;/a&gt; or other social media - or for bugs / improvements you can raise issues on the linked GitHub projects.&lt;/p&gt;</content><author><name>Korny Sietsma</name></author><category term="software development" /><category term="visualization" /><category term="polyglot tools" /><summary type="html">The Polyglot Code Explorer is my open-source tool for visualising complex codebases written in multiple programming languages.</summary></entry><entry><title type="html">Better D3 sites with react</title><link href="http://localhost:4000/2020/07/19/better-d3-with-react.html" rel="alternate" type="text/html" title="Better D3 sites with react" /><published>2020-07-19T19:41:00+01:00</published><updated>2020-07-19T19:41:00+01:00</updated><id>http://localhost:4000/2020/07/19/better-d3-with-react.html</id><content type="html" xml:base="http://localhost:4000/2020/07/19/better-d3-with-react.html">&lt;h2 id=&quot;disclaimers&quot;&gt;Disclaimers&lt;/h2&gt;

&lt;p&gt;I’m not a React nor a D3 expert.  I’m too much of a generalist these days to consider myself an expert in anything really!  I am happy to be told how to correct or improve any of these examples, and of course don’t just copy me - take what is useful from my stuff, and build your own, better things!&lt;/p&gt;

&lt;p&gt;Also note I built my sample code using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; - and I haven’t cleaned out all the files that creates, so there might be some junk hanging around.&lt;/p&gt;

&lt;p&gt;TL;DR: my sample code is at &lt;a href=&quot;https://github.com/kornysietsma/d3-react-demo&quot;&gt;https://github.com/kornysietsma/d3-react-demo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-ancient-past---tinkering&quot;&gt;The ancient past - tinkering&lt;/h2&gt;

&lt;p&gt;I’ve been playing with D3 for quite a while now - I tinkered with D3 on a clojure server &lt;a href=&quot;https://github.com/kornysietsma/d3spike&quot;&gt;in 2013&lt;/a&gt; and &lt;a href=&quot;https://github.com/kornysietsma/d3-modern-demo&quot;&gt;in 2018&lt;/a&gt; I shared an approach that mostly worked for me - using modern JavaScript and CSS, ditching JQuery or other frameworks, and going serverless, because in most cases having a purely static site worked for me, and made it much easier to host and share visualisations.&lt;/p&gt;

&lt;p&gt;However it was always painful to build the non-SVG parts of my visualisations.  Forms, inputs, sliders, and the like, are a hassle to build yourself once you get any complexity at all.&lt;/p&gt;

&lt;p&gt;What I needed was to integrate with a more modern JavaScript framework - in 2019 I finally found time to learn some React, and I decided it’d be good to combine the two.&lt;/p&gt;

&lt;h2 id=&quot;the-recent-past---adding-react&quot;&gt;The recent past - adding React&lt;/h2&gt;

&lt;p&gt;Unfortunately, it’s not that straightforward to do so.  Basically React likes to control the DOM - tracking state changes, diffing a virtual DOM with the real DOM, and the like.  D3 also likes to control the DOM - and you need to work out how to stop them fighting.&lt;/p&gt;

&lt;p&gt;There are several approaches that can be used here - there’s a nice overview in &lt;a href=&quot;https://www.smashingmagazine.com/2018/02/react-d3-ecosystem/&quot;&gt;“Bringing Together React, D3, And Their Ecosystem” by Marcos Iglesias&lt;/a&gt; - basically there’s a spectrum from letting React and D3 largely own their own parts of the DOM, through to letting React look after all the DOM and just using D3 to do D3 special bits.  I was more keen on letting them be largely isolated - D3 is very good at what it does, and the less react-y it is, the more you can reuse some of the millions of great D3 examples that are out there.&lt;/p&gt;

&lt;p&gt;I also found this great article: &lt;a href=&quot;https://towardsdatascience.com/react-d3-the-macaroni-and-cheese-of-the-data-visualization-world-12bafde1f922&quot;&gt;“React + D3 - the Macaroni and Cheese of the Data Visualization World” by Leigh Steiner&lt;/a&gt; which was extremely helpful, and the basis of most of my approach.&lt;/p&gt;

&lt;p&gt;However, it didn’t go into all that much detail - and also, despite mentioning the newer React functional style and hooks, most of it was based on old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;componentDidUpdate&lt;/code&gt; logic.  And state handling seemed tricky.&lt;/p&gt;

&lt;p&gt;Also, another big thing for me, is it didn’t explain how to work with &lt;a href=&quot;https://bost.ocks.org/mike/join/&quot;&gt;the D3 join model&lt;/a&gt; (D3 examples often don’t, sadly).  The idea is, done properly, D3 rendering can detect changed in a diagram’s underlying data, and cleanly handle adding new elements, updating changed elements, and deleting removed elements - with transitions if you want.  &lt;a href=&quot;https://github.com/d3/d3-selection#joining-data&quot;&gt;D3 recently added a cool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join&lt;/code&gt; function&lt;/a&gt; which makes this even easier.&lt;/p&gt;

&lt;p&gt;So I started tinkering with making this work my way…&lt;/p&gt;

&lt;h2 id=&quot;the-present---react--d3-with-hooks&quot;&gt;The present - React + D3 with hooks&lt;/h2&gt;

&lt;p&gt;My current approach is at &lt;a href=&quot;https://github.com/kornysietsma/d3-react-demo&quot;&gt;https://github.com/kornysietsma/d3-react-demo&lt;/a&gt; - to be precise, this article is based on code &lt;a href=&quot;https://github.com/kornysietsma/d3-react-demo/tree/d0c64f59351f8d1e73053ae57cc1c2e8569dc7af&quot;&gt;at this commit&lt;/a&gt; in case the repo has moved on by the time you read this.&lt;/p&gt;

&lt;h3 id=&quot;the-d3-parts&quot;&gt;The D3 parts&lt;/h3&gt;

&lt;p&gt;D3 only exists in the &lt;a href=&quot;https://github.com/kornysietsma/d3-react-demo/blob/bdeb31c93a27a958bf4864b6ffedc9ef6157f10f/src/Viz.js&quot;&gt;Viz.js&lt;/a&gt; file - everything else is React.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Viz&lt;/code&gt; component creates a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg&lt;/code&gt; element:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;aside&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Viz&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;chart&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{d3Container}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref={d3Container}&lt;/code&gt; means React creates a reference to this DOM element for manipulation by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Viz&lt;/code&gt; component - see &lt;a href=&quot;https://reactjs.org/docs/refs-and-the-dom.html&quot;&gt;Refs and the DOM&lt;/a&gt; in the react docs for more.&lt;/p&gt;

&lt;p&gt;The heart of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Viz&lt;/code&gt; component uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect()&lt;/code&gt; as mentioned in the Macaroni and Cheese article, to trigger changes to the D3 component as a side-effect - if and only if the data being referenced has changed.  The core of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Viz&lt;/code&gt; update logic is this code:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Viz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3Container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;usePrevious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// d3 update logic hidden&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;aside&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Viz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;chart&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d3Container&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;aside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;UseEffect takes four properties - and will only be called if any of these has changed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataRef&lt;/code&gt; is another ref - in this case to the raw data to be visualised.  More on that later.  As it’s a reference (think pointer) it doesn’t actually change, it’s included here to avoid React complaining&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; is where I put &lt;em&gt;all&lt;/em&gt; the visualisation state - what to show, what colours to use, interactions etc.  Generally it’s the only thing that might change&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; is a global dispatch function that D3 can use to make changes to the state - more on that later.  Again, it shouldn’t change, so it’s just here to keep d3 happy.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prevState&lt;/code&gt; is the &lt;em&gt;previous state&lt;/em&gt; - this is a trick I got from &lt;a href=&quot;https://stackoverflow.com/questions/53446020/how-to-compare-oldvalues-and-newvalues-on-react-hooks-useeffect&quot;&gt;this Stack Overflow question&lt;/a&gt; - it stores the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; from last time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Viz&lt;/code&gt; was shown, allowing me to detect what has really changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;initial-setup-cheap-changes-and-expensive-changes&quot;&gt;Initial setup, cheap changes, and expensive changes&lt;/h3&gt;

&lt;p&gt;One thing I wanted to handle was to separate out different kinds of visualisation updates.  For simple things this is complete overkill - but I often find that my UI changes fall into two categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cheap changes that really just need to update some colours or highlights, really quickly&lt;/li&gt;
  &lt;li&gt;Expensive changes that need more serious processing, possibly with some delay&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, dragging a colour slider to change colours might be so cheap you want it to happen on every mouse drag.  But changing a date selector might mean re-processing the underlying data for some reason, and that might be slow.&lt;/p&gt;

&lt;p&gt;There are also the things you do once and only once - adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg&lt;/code&gt; groups, for example.&lt;/p&gt;

&lt;p&gt;So the code looks at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;previousState&lt;/code&gt;, and works out what has changed:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expensiveConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expensiveConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;redraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// nothing to do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m using &lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt; to do object comparison - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; can be deeply nested, and JavaScript doesn’t have a reliable way to do deep object comparison.&lt;/p&gt;

&lt;p&gt;I won’t go much into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redraw&lt;/code&gt; functions at this stage - they are relatively straightforward.  I don’t even actually use the cheap/expensive code in the demo - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw&lt;/code&gt; just calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redraw&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The only interesting thing to note is how to interact with the world outside D3 - using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;selectData&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How this works will be covered later.&lt;/p&gt;

&lt;h3 id=&quot;loading-the-data&quot;&gt;Loading the data&lt;/h3&gt;

&lt;p&gt;The data for my demo is in a JSON file - you could just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt; it, but that’d load it synchronously - fine for small amounts of data, but for larger datasets I want to be able to warn the user that data is loading.&lt;/p&gt;

&lt;p&gt;So instead of the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component, I have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Loader&lt;/code&gt;, which again uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; to load the initial data as a side-effect of rendering:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Loader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PUBLIC_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/data.json`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dataRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useFetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useFetch&lt;/code&gt; is a function that makes a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;fetch&lt;/a&gt; call (the modern alternative to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XMLHttpRequest&lt;/code&gt;) to get the raw JSON data, and apply any needed postprocessing.&lt;/p&gt;

&lt;p&gt;This again uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; - see &lt;a href=&quot;https://reactjs.org/docs/hooks-effect.html&quot;&gt;the react docs on this&lt;/a&gt; for more background.  Effectively, the first time the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Loader&lt;/code&gt; component is rendered, it will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useFetch&lt;/code&gt; which actually returns have no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; so will show &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;&lt;/code&gt; - and kick off &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useFetch&lt;/code&gt; which returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; response.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useFetch&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useFetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// postprocessing removed for clarity&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* stuff */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this code, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; takes a parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[url]&lt;/code&gt; - this means it will only be run if the URL has changed (which should never happen in this example) so it runs once.  When it has fetched the data, it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setData&lt;/code&gt; which sets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; state - which triggers a re-render of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Loader&lt;/code&gt; (see &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usestate&quot;&gt;the react docs for useState&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The second time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Loader&lt;/code&gt; is rendered, the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useFetch&lt;/code&gt; effectively does nothing, as the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[url]&lt;/code&gt; has not changed. (If it changed it could get into a loop, which would be bad).  But it will return the updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; value, which I put into yet another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataRef&lt;/code&gt; and pass to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;App&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataRef=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{dataRef}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m using a ref here so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; doesn’t need to check the whole &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; object to see if it should be re-rendered.  (This may be unnecessary - I’m not clear enough about react internals to be sure what would happen if I just passed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; around - it may have no real overhead?)&lt;/p&gt;

&lt;h3 id=&quot;showing-the-app&quot;&gt;Showing the App&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; is fairly straightforward, with a bit of magic to set up the state and dispatch mechanisms:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dataRef&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vizState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;globalDispatchReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;initialiseGlobalState&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;App-header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Korny&lt;span class=&quot;ni&quot;&gt;&amp;amp;apos;&lt;/span&gt;s D3 React Demo&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Viz&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vizState&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vizState&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Inspector&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataRef&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vizState&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The UI is basically three components, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Viz&lt;/code&gt; which is the D3 visualisation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Controller&lt;/code&gt; for the user controls on the left panel, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspector&lt;/code&gt; to inspect a particular data point.  They all take the same parameters - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataRef&lt;/code&gt; for the raw data, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; for the current state, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; for updating the state.&lt;/p&gt;

&lt;h3 id=&quot;state-and-dispatching&quot;&gt;State and Dispatching&lt;/h3&gt;

&lt;p&gt;State management is done through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useReducer&lt;/code&gt; - see &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usereducer&quot;&gt;the react docs&lt;/a&gt; for more.  Basically it takes three parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the reducer function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globalDispatchReducer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the initial data, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataRef&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;an initialising function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialiseGlobalState&lt;/code&gt; - this allows for lazy calculation of the initial state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The initialise function creates the initial state object - it has a shape roughly like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// cheap state&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expensiveConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// expensive state&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// state that never changes&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As discussed earlier, I split the state into cheap and expensive, and rendering is different depending on what changes.  There is also a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constants&lt;/code&gt; section - this doesn’t really need to be in the state, but it’s useful, especially as sometimes something starts off as constant (like margins, in this example) but later might become modifiable, at which time you can move it somewhere else in the state.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globalDispatchReducer&lt;/code&gt; is what gets called whenever anything calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; - earlier there was an example of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onClick&lt;/code&gt; handler which called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch({ type: &quot;selectData&quot;, payload: node.id })&lt;/code&gt; - the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Controller&lt;/code&gt; also calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; whenever a user clicks a control.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globalDispatchReducer&lt;/code&gt; is basically a large &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;globalDispatchReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;selectData&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cloneDeep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// rest removed for clarity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It takes the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; and an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action&lt;/code&gt; - which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ type: &quot;selectData&quot;, payload: node.id }&lt;/code&gt; in the example above.  Whatever it returns is set as the new state, which will trigger re-rendering of any affected react components.&lt;/p&gt;

&lt;p&gt;I’m using &lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt; to clone the state here - alternatively you can just use es6 destructuring assignment, such as:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However this gets hairy for deeply nested structures, as the returned object is &lt;em&gt;not&lt;/em&gt; a deep clone of the original object - in the above example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state.expensiveConfig.dateRange&lt;/code&gt; would be a shared reference between the original state and the new state, rather than an actual new object.  That might be OK, but it can be quite counterintuitive - it’s caught me out before, so I like to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloneDeep&lt;/code&gt; and be explicit.  (It’d be nice to rework this with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;immutable.js&lt;/code&gt; but that’s a rabbit hole I don’t have time for now)&lt;/p&gt;

&lt;h3 id=&quot;the-overall-event-flow&quot;&gt;The overall event flow&lt;/h3&gt;

&lt;p&gt;The above might be a bit confusing - in a nutshell, I pass a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; function to every component, including d3 renderers.&lt;/p&gt;

&lt;p&gt;When something calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globalDispatchReducer&lt;/code&gt; is called, returning a new state&lt;/li&gt;
  &lt;li&gt;React updates the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vizState&lt;/code&gt; state owned by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component, so re-renders &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; in turn re-renders everything else.&lt;/li&gt;
  &lt;li&gt;Normal components are updated in standard React fashion, using virtual DOM magic so not too much gets re-rendered&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Viz&lt;/code&gt; component looks at the updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; and redraws whichever bits of the D3 visualisation need to be redrawn.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of this is surprisingly smooth - I’ve had pages with thousands of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg&lt;/code&gt; nodes which updated nicely as I drag a control slider.  I initially thought I’d need to find ways to bypass react for some UI updates, but so far I haven’t.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;

&lt;p&gt;I’m using this for my polyglot code tools - I intend to write more about those when I have the time.&lt;/p&gt;

&lt;p&gt;I’d really value feedback on this post - especially as I’m not a react expert, and there are probably major things I’ve missed!  Feedback via Disqus below, or via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@kornys&lt;/code&gt; on Twitter.&lt;/p&gt;

&lt;h2 id=&quot;update-mar-2022&quot;&gt;Update Mar 2022&lt;/h2&gt;

&lt;p&gt;I have tweaked the repo a bit - using Typescript now, and updated versions of React, D3, eslint and prettier.  Haven’t really had time to update this blog post, but hopefully it’s mostly still relevant.&lt;/p&gt;</content><author><name>Korny Sietsma</name></author><category term="software development" /><category term="d3" /><category term="react" /><category term="visualization" /><category term="polyglot tools" /><summary type="html">My approach to get D3 to play nicely with React</summary></entry><entry><title type="html">Building a personal digital garden with Gatsby</title><link href="http://localhost:4000/2020/03/19/gatsby-digital-garden.html" rel="alternate" type="text/html" title="Building a personal digital garden with Gatsby" /><published>2020-03-19T19:53:00+00:00</published><updated>2020-03-19T19:53:00+00:00</updated><id>http://localhost:4000/2020/03/19/gatsby-digital-garden.html</id><content type="html" xml:base="http://localhost:4000/2020/03/19/gatsby-digital-garden.html">&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; In 2023 I dumped all this and moved to &lt;a href=&quot;https://obsidian.md/&quot;&gt;Obsidian&lt;/a&gt; - which actually justified a lot of my choices, as it was a pretty easy move - everything in an open markdown format made conversion quite straightforward.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(TL;DR - you can jump ahead to the sample site at &lt;a href=&quot;https://kornysietsma.github.io/digital-garden-sample/&quot;&gt;https://kornysietsma.github.io/digital-garden-sample/&lt;/a&gt; based on source and content at &lt;a href=&quot;https://github.com/kornysietsma/digital-garden-sample&quot;&gt;https://github.com/kornysietsma/digital-garden-sample&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I’ve also used these techniques to build a covid19 info dump site: &lt;a href=&quot;https://covid19.korny.info&quot;&gt;https://covid19.korny.info&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;For a very long time, I’ve used a wide range of different tools to try to manage my digital information - all sorts of digital information, the boundaries are fuzzy, but samples of the kinds of things I want to keep are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;That interesting thought that occured to me on the train for something I might do in my vast spare time&lt;/li&gt;
  &lt;li&gt;My code snippets from a recent cool problem I solved, in case I want to solve it again&lt;/li&gt;
  &lt;li&gt;Personal reflections on things in my life - the classic diary entry&lt;/li&gt;
  &lt;li&gt;Daily notes on my current client - stuff that usually goes in physical notebooks that I file and never open again&lt;/li&gt;
  &lt;li&gt;Mentoring and leadership notes on people who I’m trying to assist&lt;/li&gt;
  &lt;li&gt;Draft versions of blog posts I’ll finish in 6 months time&lt;/li&gt;
  &lt;li&gt;That recipe I found in a cookbook that I like&lt;/li&gt;
  &lt;li&gt;The link that someone shared on social media that I’d like to read later - or at least, I’d like to be able to &lt;em&gt;find&lt;/em&gt; it later on the slim chance I decide to read it&lt;/li&gt;
  &lt;li&gt;My bookmarks of useful links for a particular tech stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and so on, and so on.  A lot of this is fuzzy and unstructured really; the lines are blurry.  The common thread is, I collect a lot of junk that sometimes I want to find again.&lt;/p&gt;

&lt;h2 id=&quot;some-history&quot;&gt;Some history&lt;/h2&gt;

&lt;p&gt;I’ve used a bunch of things over the years - Evernote and Pocket and similar semi-commercial tools; browser bookmarks which grow endlessly and often get lost when changing browsers (and often that’s good, they date quickly and Google/Ecosia/whatever can find the links faster most of the time), archive folders on disk, and on DropBox, and on Google Drive; Github gists, Remember The Milk, Trello boards.  And of course the classic - 80 open browser tabs + a “bookmarks” with folders and sub-folders and a folder “bookmarks from old laptop” and another “bookmarks from the laptop before that”&lt;/p&gt;

&lt;p&gt;This has been going on for &lt;em&gt;decades&lt;/em&gt; - I remember having a public bookmarks web page about 20 years ago.&lt;/p&gt;

&lt;p&gt;About 5 years ago when I was doing a lot of clojure, I got into Emacs and did a lot in the wonderful &lt;a href=&quot;https://orgmode.org/&quot;&gt;org-mode&lt;/a&gt; - it kind-of covers most of this, especially when combined with &lt;a href=&quot;http://www.orgzly.com&quot;&gt;orgzly on my phone&lt;/a&gt; - but I found it increasingly hard to use smoothly.  If I’m not using emacs all the time I forget the keystrokes; and (sorry emacs fans) the whole multiple-text-pane-ui thing just doesn’t cut it for me any more.  And integration with anything means tweaking elisp and other arcane things.  If I used emacs 100% of the time this might be OK, but as an occasional user, it isn’t cutting it.&lt;/p&gt;

&lt;p&gt;About 2 years ago I realised that the blogging tools I’ve been using actually do a lot of what I want - if I dump &lt;em&gt;everything&lt;/em&gt; as Markdown or Asciidoc in a Jekyll site, then host it locally on my laptop, it’s not bad - at least for capturing things daily as I go.  It became my digital diary - bookmarks and firehose stuff and long-term notes were still in org-mode, short-term planning was still in Trello, but the Jekyll diary worked quite well.&lt;/p&gt;

&lt;h2 id=&quot;advantages-of-a-text-based-information-store&quot;&gt;Advantages of a text-based information store&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;It doesn’t take much storage&lt;/li&gt;
  &lt;li&gt;It can be bulk-searched easily.  Want to find that rant I wrote about ESBs? Open a text editor or a shell, and search.&lt;/li&gt;
  &lt;li&gt;It’s easy to script - every scripting language can manipulate structured text files with ease&lt;/li&gt;
  &lt;li&gt;It’s easy to encrypt and back up - no binary files&lt;/li&gt;
  &lt;li&gt;It doesn’t get out of date easily.  If I change tools or platforms, I can write a script to merge the files into whatever the new tool needs.  This is a biggy, and my main problem with things like Evernote - I don’t want to get locked in to a platform forever!  And worst case, if I find these files on an old disk in 20 years, I can still read them.  (I have email archives from the ’90s somewhere, that I want to read, but I need to reverse engineer the Agent newsreader app’s file format first…)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;enter-gatsby&quot;&gt;Enter Gatsby&lt;/h2&gt;

&lt;p&gt;The Jekyll solution was doing OK as a place to put thoughts and information, and basic searching was ok in a text editor - but I was finding the web interface not awfully useful, and it was hard to organise things.&lt;/p&gt;

&lt;p&gt;Then I was reading up on &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;GatsbyJS&lt;/a&gt;, and I came across &lt;a href=&quot;https://github.com/johno/digital-garden&quot;&gt;this sample digital garden&lt;/a&gt; and associated articles, and I thought “I could move my diary to gatsby” - so here we are.   (See below for more on digital gardens.)&lt;/p&gt;

&lt;p&gt;Gatsby is basically a clever idea - instead of going straight from markdown to html like Jekyll and others do, and building every other customisation by hand, why not add a couple of layers - a graphql data representation, and a JavaScript/React html production layer?&lt;/p&gt;

&lt;p&gt;The basic flow of content then goes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Base content is one of a range of formats - markdown, JSON files, images, or sourced from a CMS. (Don’t get distracted by all the CMS talk - for most purposes you can just use the file system for sources)&lt;/li&gt;
  &lt;li&gt;You use one of a range of plugins, or custom code, to represent that data as a graphql layer.  Note this is still at build time! You don’t need graphql at runtime.&lt;/li&gt;
  &lt;li&gt;You generate pages, still at build time, using JavaScript code which queries the GraphQL data and creates HTML pages. This all uses React for page creation, so you have a lot of power over templating, styling, and all the magic that React gives you.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s about it. The end result is mostly static html+css. (it also includes React for things you might want to change at runtime, but the basic site works fine with JavaScript off)&lt;/p&gt;

&lt;p&gt;And at build time you can use custom scripts to do all sorts of stuff with those static pages.&lt;/p&gt;

&lt;p&gt;You can look at a sanitised clone of my site at https://kornysietsma.github.io/digital-garden-sample/ - source at https://github.com/kornysietsma/digital-garden-sample - the real one has a lot more content! But this hopefully shows the idea. (Note - it is designed for a wide laptop, there’s no mobile support at all yet!)&lt;/p&gt;

&lt;p&gt;The build-time page generation is in &lt;a href=&quot;https://github.com/kornysietsma/digital-garden-sample/blob/master/gatsby-node.js&quot;&gt;gatsby-node.js&lt;/a&gt; - this is what does the “magic” of converting all the files under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/content&lt;/code&gt; into a mix of &lt;a href=&quot;https://kornysietsma.github.io/digital-garden-sample/-/-/diary/2020-01-01-first-post/&quot;&gt;diary entries&lt;/a&gt;, &lt;a href=&quot;https://kornysietsma.github.io/digital-garden-sample/-/-/wiki/about/&quot;&gt;wiki pages&lt;/a&gt;, and &lt;a href=&quot;https://kornysietsma.github.io/digital-garden-sample/firehose/tech/-&quot;&gt;firehose lists&lt;/a&gt; - plus a whole tagging and categorising system.&lt;/p&gt;

&lt;h2 id=&quot;whats-all-this-digital-garden-stuff&quot;&gt;What’s all this “digital garden” stuff?&lt;/h2&gt;

&lt;p&gt;The digital garden - and I may be misusing the term, it’s all a bit new to me - is a place where your information resides - it’s not necessarily time-based like a blog, it’s also a network of information, more like a wiki.&lt;/p&gt;

&lt;p&gt;There’s a good description at &lt;a href=&quot;https://joelhooks.com/digital-garden&quot;&gt;https://joelhooks.com/digital-garden&lt;/a&gt; - which I found from browsing the gatsby sample at &lt;a href=&quot;https://github.com/johno/digital-garden&quot;&gt;https://github.com/johno/digital-garden&lt;/a&gt; - both of those link to the earlier articles &lt;a href=&quot;https://tomcritchlow.com/2019/02/17/building-digital-garden/&quot;&gt;Building a digital garden&lt;/a&gt; and &lt;a href=&quot;https://tomcritchlow.com/2018/10/10/of-gardens-and-wikis/&quot;&gt;Of gardens and wikis&lt;/a&gt; by Tom Critchlow.  You can keep following links to fascinating articles from here!&lt;/p&gt;

&lt;p&gt;I also love &lt;a href=&quot;https://www.martinfowler.com/bliki&quot;&gt;Martin Fowler’s bliki&lt;/a&gt; which is something very similar - a combination blog and wiki.  &lt;a href=&quot;https://www.martinfowler.com/bliki/WhatIsaBliki.html&quot;&gt;Martin writes&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I decided I wanted something that was a cross between a wiki and a blog - which Ward Cunningham immediately dubbed a bliki. Like a blog, it allows me to post short thoughts when I have them. Like a wiki it will build up a body of cross-linked pieces that I hope will still be interesting in a year’s time.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My “digital garden” isn’t public - there’s too much confidential, or just plain half-baked, to make it public.  I might turn my blog into a garden at some stage though.  (I’m a little hesitant, because so far I’ve follow the mantra “use boring tools” - I want to keep my blog low-maintenance, and Gatsby is still new and rapidly changing)&lt;/p&gt;

&lt;h2 id=&quot;my-categorisation-scheme&quot;&gt;My categorisation scheme&lt;/h2&gt;

&lt;p&gt;I didn’t want to go wild with hierarchies or massive structures - I’ve made that mistake enough times in the past!&lt;/p&gt;

&lt;p&gt;Basically I have three types of content at the moment:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Diary entries - Markdown pages with a ‘date’ in the metadata - which get shown in reverse chronological order&lt;/li&gt;
  &lt;li&gt;Wiki pages - which are just Markdown pages with no date!  I do use naming conventions for where they are stored and how they are named, but otherwise they are just the same as diary entries, but they get shown alphabetically in different bits of the UI.  (and there’s no magic shortcut to link to them - yet).&lt;/li&gt;
  &lt;li&gt;Firehose entries - which are tiny snippets, mostly URLs or brief notes - are just JSON.  All JSON files in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/content&lt;/code&gt; directory are assumed to be firehose data (more on that later) and get slurped in together.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And then I have two kinds of categorisation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Categories are a simple top-level category choice.  It’s a bit arbitrary, the idea is to be able to browse just “work” or just “play” or just “tech” stuff.  I like single layers of organsation, it stops me over-complicating things.&lt;/li&gt;
  &lt;li&gt;Tags are anything else.  Any content can have zero or more tags; I’m working out what tags work as I go.  You can currently only filter by a single tag at a time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;handling-state-through-urls&quot;&gt;Handling state through URLs&lt;/h3&gt;

&lt;p&gt;I did have a snag with my categories and tags - how do you keep track of state?  I wanted to say “browse all pages in the “work” category” - but I wanted that selected category to be remembered. There is no “state” in a Gatsby site - it’s all static HTML, remember?  I could use tweaks like # URL suffixes but it all looked quite complex, and I’m a fan of simple.  So I just went for a routing scheme - most urls are of the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/[category]/[tag]/page&lt;/code&gt; - so if a page is accessed via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/work/fish/wish-i-was-fishing&lt;/code&gt; I know it should show the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;work&lt;/code&gt; category and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fish&lt;/code&gt; tag as highlighted.  (and yes, that means each page is rendered mulitple times for every category and tag.  But it’s at build time and it’s fast, so I don’t really care)&lt;/p&gt;

&lt;p&gt;(Disclaimer time - I’m a total Gatsby newbie, with no spare time so doing whatever seems to work - there may be dramatically easier ways to do this!)&lt;/p&gt;

&lt;h3 id=&quot;a-bit-more-on-the-firehose&quot;&gt;A bit more on the firehose&lt;/h3&gt;

&lt;p&gt;The firehose is where I dump the continuous deluge of stuff that I have spent decades trying to capture.  I know by now that 90% of things I see - bookmarks, video links, “to_read” entries, articles in pocket, etc - will never be looked at again.  But I like to capture them anyway, so when I go “I saw a cool thing a week ago - where is it?” I can find it.&lt;/p&gt;

&lt;p&gt;Firehose entries are implemented as JSON snippets like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://www.devops-research.com/research.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2020-02-06&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tech&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dora&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;devops&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;nice diagram summary of DORA Devops stuff&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don’t generally write JSON by hand though - on my phone I run &lt;a href=&quot;http://www.orgzly.com/&quot;&gt;orgzly&lt;/a&gt; and then I have a script to convert that to JSON every now and then; and I have this function in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; so I can add entries from a terminal by running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firehose&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firehose&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; ~/path/to/garden

    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title: &quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;title
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tags: (comma separated) &quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;tags
    &lt;span class=&quot;nv&quot;&gt;jtags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tags&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | jq &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;split(&quot;,&quot;)&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Category: (tech, work, personal, play, world, meta, family, other)&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;category
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;url or text:&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;url

    &lt;span class=&quot;nv&quot;&gt;pdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y-%m-%d&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[{
&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$title&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,
&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$category&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,
&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pdate&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,
&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jtags&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,
&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: [&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]
}]&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /tmp/fhbit.json

    &lt;span class=&quot;nv&quot;&gt;INBOX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;content/firehose/laptop/inbox.json
    jq &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; add &lt;span class=&quot;nv&quot;&gt;$INBOX&lt;/span&gt; /tmp/fhbit.json &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /tmp/fh.json
    &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /tmp/fh.json &lt;span class=&quot;nv&quot;&gt;$INBOX&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;updated &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INBOX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Of course it’s pretty easy to convert any other stuff I might have lying around to JSON or Markdown - both are easy to create.&lt;/p&gt;

&lt;p&gt;And that’s the thing I’m really enjoying about Gatsby - I have &lt;em&gt;control&lt;/em&gt; - whatever bits and bobs I might want to add in the future - maybe an image gallery, maybe ebook categorisation - it’s very tweakable.&lt;/p&gt;

&lt;h2 id=&quot;other-neat-gatsby-things&quot;&gt;Other neat Gatsby things&lt;/h2&gt;
&lt;p&gt;There are some very cool plugins available for all sorts of neat things.  I’m generating &lt;a href=&quot;https://kornysietsma.github.io/digital-garden-sample/-/-/diary/2020-01-03-diagrams/&quot;&gt;graphviz and mermaidjs diagrams&lt;/a&gt; embedded in markdown files.  &lt;a href=&quot;https://kornysietsma.github.io/digital-garden-sample/-/-/diary/2020-01-02-images/&quot;&gt;Images&lt;/a&gt; are automatically scaled and made responsive.  And of course &lt;a href=&quot;https://kornysietsma.github.io/digital-garden-sample/-/-/diary/2020-03-14-demonstrating-source-code/&quot;&gt;source code formatting&lt;/a&gt; is straightforward.&lt;/p&gt;

&lt;h2 id=&quot;downsides-of-gatsby&quot;&gt;Downsides of Gatsby&lt;/h2&gt;

&lt;p&gt;First, it’s pretty new - and being in node.js land, I’m regularly updating packages; even right now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm audit&lt;/code&gt; is showing a vulnerability because several libraries use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decompress&lt;/code&gt; which &lt;a href=&quot;https://npmjs.com/advisories/1217&quot;&gt;has a known defect&lt;/a&gt; - this isn’t a problem for me as I only run this code on my laptop when I rebuild the site, but would be more concerning if you were using this somewhere big.&lt;/p&gt;

&lt;p&gt;Also, I found that a lot of the themes and starters are, frankly, more useful as demos than actual fully featured sites.  They tend to have pretty horrible CSS - not just per-component CSS, I’ve come to terms with that; but inline css in the middle of JSX files, and some obvious “we hacked this together until it looks OK on our machine” stuff.  They also often include all sorts of things that you might not want, or might want differently.  I tried using about 4 different quite popular starters, before I gave up and worked from the default tutorial instead.&lt;/p&gt;

&lt;p&gt;Overall, though, it’s pretty neat - I’d definitely be interested in using this on a client site, especially hooked up to a nice headless CMS.  And I’m going to keep tweaking my own gatsby digital garden for a while!  (no guaranteeing that I won’t be praising some completely different alternative in another 5 years, of course)&lt;/p&gt;</content><author><name>Korny Sietsma</name></author><category term="knowledge management" /><category term="garden" /><category term="markdown" /><category term="gatsby.js" /><category term="obsidian" /><summary type="html">Building a digital garden (obsolete, now I use Obsidian!)</summary></entry></feed>