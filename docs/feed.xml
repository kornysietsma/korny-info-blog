<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Korny's Blog</title>
  <subtitle>Korny's Blog</subtitle>
  <id>http://blog.korny.info</id>
  <link href="http://blog.korny.info"/>
  <link href="http://blog.korny.info/feed.xml" rel="self"/>
  <updated>2020-07-19T19:41:00+01:00</updated>
  <author>
    <name>Kornelis Sietsma</name>
  </author>
  <entry>
    <title>Better D3 sites with react</title>
    <link rel="alternate" href="/2020/07/19/better-d3-with-react.html"/>
    <id>/2020/07/19/better-d3-with-react.html</id>
    <published>2020-07-19T19:41:00+01:00</published>
    <updated>2020-07-19T19:41:00+01:00</updated>
    <author>
      <name>Kornelis Sietsma</name>
    </author>
    <summary type="html">&lt;h2 id="disclaimers"&gt;Disclaimers&lt;/h2&gt;

&lt;p&gt;I'm not a React nor a D3 expert.  I'm too much of a generalist these days to consider myself an expert in anything really!  I am happy to be told how to correct or improve any of these examples, and of course don't just copy me - take...&lt;/p&gt;</summary>
    <content type="html">&lt;h2 id="disclaimers"&gt;Disclaimers&lt;/h2&gt;

&lt;p&gt;I'm not a React nor a D3 expert.  I'm too much of a generalist these days to consider myself an expert in anything really!  I am happy to be told how to correct or improve any of these examples, and of course don't just copy me - take what is useful from my stuff, and build your own, better things!&lt;/p&gt;

&lt;p&gt;Also note I built my sample code using &lt;code&gt;create-react-app&lt;/code&gt; - and I haven't cleaned out all the files that creates, so there might be some junk hanging around.&lt;/p&gt;

&lt;p&gt;TL;DR: my sample code is at &lt;a href="https://github.com/kornysietsma/d3-react-demo"&gt;https://github.com/kornysietsma/d3-react-demo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="the-ancient-past---tinkering"&gt;The ancient past - tinkering&lt;/h2&gt;

&lt;p&gt;I've been playing with D3 for quite a while now - I tinkered with D3 on a clojure server &lt;a href="https://github.com/kornysietsma/d3spike"&gt;in 2013&lt;/a&gt; and &lt;a href="https://github.com/kornysietsma/d3-modern-demo"&gt;in 2018&lt;/a&gt; I shared an approach that mostly worked for me - using modern JavaScript and CSS, ditching JQuery or other frameworks, and going serverless, because in most cases having a purely static site worked for me, and made it much easier to host and share visualisations.&lt;/p&gt;

&lt;p&gt;However it was always painful to build the non-SVG parts of my visualisations.  Forms, inputs, sliders, and the like, are a hassle to build yourself once you get any complexity at all.&lt;/p&gt;

&lt;p&gt;What I needed was to integrate with a more modern JavaScript framework - in 2019 I finally found time to learn some React, and I decided it'd be good to combine the two.&lt;/p&gt;

&lt;h2 id="the-recent-past---adding-react"&gt;The recent past - adding React&lt;/h2&gt;

&lt;p&gt;Unfortunately, it's not that straightforward to do so.  Basically React likes to control the DOM - tracking state changes, diffing a virtual DOM with the real DOM, and the like.  D3 also likes to control the DOM - and you need to work out how to stop them fighting.&lt;/p&gt;

&lt;p&gt;There are several approaches that can be used here - there's a nice overview in &lt;a href="https://www.smashingmagazine.com/2018/02/react-d3-ecosystem/"&gt;"Bringing Together React, D3, And Their Ecosystem" by Marcos Iglesias&lt;/a&gt; - basically there's a spectrum from letting React and D3 largely own their own parts of the DOM, through to letting React look after all the DOM and just using D3 to do D3 special bits.  I was more keen on letting them be largely isolated - D3 is very good at what it does, and the less react-y it is, the more you can reuse some of the millions of great D3 examples that are out there.&lt;/p&gt;

&lt;p&gt;I also found this great article: &lt;a href="https://towardsdatascience.com/react-d3-the-macaroni-and-cheese-of-the-data-visualization-world-12bafde1f922"&gt;"React + D3 - the Macaroni and Cheese of the Data Visualization World" by Leigh Steiner&lt;/a&gt; which was extremely helpful, and the basis of most of my approach.&lt;/p&gt;

&lt;p&gt;However, it didn't go into all that much detail - and also, despite mentioning the newer React functional style and hooks, most of it was based on old &lt;code&gt;componentDidUpdate&lt;/code&gt; logic.  And state handling seemed tricky.&lt;/p&gt;

&lt;p&gt;Also, another big thing for me, is it didn't explain how to work with &lt;a href="https://bost.ocks.org/mike/join/"&gt;the D3 join model&lt;/a&gt; (D3 examples often don't, sadly).  The idea is, done properly, D3 rendering can detect changed in a diagram's underlying data, and cleanly handle adding new elements, updating changed elements, and deleting removed elements - with transitions if you want.  &lt;a href="https://github.com/d3/d3-selection#joining-data"&gt;D3 recently added a cool &lt;code&gt;join&lt;/code&gt; function&lt;/a&gt; which makes this even easier.&lt;/p&gt;

&lt;p&gt;So I started tinkering with making this work my wayâ€¦&lt;/p&gt;

&lt;h2 id="the-present---react--d3-with-hooks"&gt;The present - React + D3 with hooks&lt;/h2&gt;

&lt;p&gt;My current approach is at &lt;a href="https://github.com/kornysietsma/d3-react-demo"&gt;https://github.com/kornysietsma/d3-react-demo&lt;/a&gt; - to be precise, this article is based on code &lt;a href="https://github.com/kornysietsma/d3-react-demo/tree/d0c64f59351f8d1e73053ae57cc1c2e8569dc7af"&gt;at this commit&lt;/a&gt; in case the repo has moved on by the time you read this.&lt;/p&gt;

&lt;h3 id="the-d3-parts"&gt;The D3 parts&lt;/h3&gt;

&lt;p&gt;D3 only exists in the &lt;a href="https://github.com/kornysietsma/d3-react-demo/blob/bdeb31c93a27a958bf4864b6ffedc9ef6157f10f/src/Viz.js"&gt;Viz.js&lt;/a&gt; file - everything else is React.  The &lt;code&gt;Viz&lt;/code&gt; component creates a single &lt;code&gt;svg&lt;/code&gt; element:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;aside&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"Viz"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"chart"&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;{d3Container}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That &lt;code&gt;ref={d3Container}&lt;/code&gt; means React creates a reference to this DOM element for manipulation by the &lt;code&gt;Viz&lt;/code&gt; component - see &lt;a href="https://reactjs.org/docs/refs-and-the-dom.html"&gt;Refs and the DOM&lt;/a&gt; in the react docs for more.&lt;/p&gt;

&lt;p&gt;The heart of the &lt;code&gt;Viz&lt;/code&gt; component uses &lt;code&gt;useEffect()&lt;/code&gt; as mentioned in the Macaroni and Cheese article, to trigger changes to the D3 component as a side-effect - if and only if the data being referenced has changed.  The core of the &lt;code&gt;Viz&lt;/code&gt; update logic is this code:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Viz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;d3Container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;dataRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePrevious&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// d3 update logic hidden&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dataRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;aside&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s2"&gt;"Viz"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s2"&gt;"chart"&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;d3Container&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;UseEffect takes four properties - and will only be called if any of these has changed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;dataRef&lt;/code&gt; is another ref - in this case to the raw data to be visualised.  More on that later.  As it's a reference (think pointer) it doesn't actually change, it's included here to avoid React complaining&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;state&lt;/code&gt; is where I put &lt;em&gt;all&lt;/em&gt; the visualisation state - what to show, what colours to use, interactions etc.  Generally it's the only thing that might change&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dispatch&lt;/code&gt; is a global dispatch function that D3 can use to make changes to the state - more on that later.  Again, it shouldn't change, so it's just here to keep d3 happy.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;prevState&lt;/code&gt; is the &lt;em&gt;previous state&lt;/em&gt; - this is a trick I got from &lt;a href="https://stackoverflow.com/questions/53446020/how-to-compare-oldvalues-and-newvalues-on-react-hooks-useeffect"&gt;this Stack Overflow question&lt;/a&gt; - it stores the value of &lt;code&gt;state&lt;/code&gt; from last time &lt;code&gt;Viz&lt;/code&gt; was shown, allowing me to detect what has really changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="initial-setup-cheap-changes-and-expensive-changes"&gt;Initial setup, cheap changes, and expensive changes&lt;/h3&gt;

&lt;p&gt;One thing I wanted to handle was to separate out different kinds of visualisation updates.  For simple things this is complete overkill - but I often find that my UI changes fall into two categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cheap changes that really just need to update some colours or highlights, really quickly&lt;/li&gt;
  &lt;li&gt;Expensive changes that need more serious processing, possibly with some delay&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, dragging a colour slider to change colours might be so cheap you want it to happen on every mouse drag.  But changing a date selector might mean re-processing the underlying data for some reason, and that might be slow.&lt;/p&gt;

&lt;p&gt;There are also the things you do once and only once - adding &lt;code&gt;svg&lt;/code&gt; groups, for example.&lt;/p&gt;

&lt;p&gt;So the code looks at the &lt;code&gt;state&lt;/code&gt;, and the &lt;code&gt;previousState&lt;/code&gt;, and works out what has changed:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expensiveConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expensiveConfig&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;redraw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// nothing to do&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm using &lt;a href="https://lodash.com/"&gt;lodash&lt;/a&gt; to do object comparison - &lt;code&gt;state&lt;/code&gt; can be deeply nested, and JavaScript doesn't have a reliable way to do deep object comparison.&lt;/p&gt;

&lt;p&gt;I won't go much into the &lt;code&gt;initialize&lt;/code&gt;, &lt;code&gt;draw&lt;/code&gt; and &lt;code&gt;redraw&lt;/code&gt; functions at this stage - they are relatively straightforward.  I don't even actually use the cheap/expensive code in the demo - &lt;code&gt;draw&lt;/code&gt; just calls &lt;code&gt;redraw&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The only interesting thing to note is how to interact with the world outside D3 - using the &lt;code&gt;dispatch&lt;/code&gt; function:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"click"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nodeList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"selectData"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How this works will be covered later.&lt;/p&gt;

&lt;h3 id="loading-the-data"&gt;Loading the data&lt;/h3&gt;

&lt;p&gt;The data for my demo is in a JSON file - you could just &lt;code&gt;import&lt;/code&gt; it, but that'd load it synchronously - fine for small amounts of data, but for larger datasets I want to be able to warn the user that data is loading.&lt;/p&gt;

&lt;p&gt;So instead of the default &lt;code&gt;App&lt;/code&gt; component, I have a &lt;code&gt;Loader&lt;/code&gt;, which again uses &lt;code&gt;useEffect&lt;/code&gt; to load the initial data as a side-effect of rendering:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PUBLIC_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/data.json`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;dataRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="na"&gt;dataRef=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dataRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;useFetch&lt;/code&gt; is a function that makes a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;fetch&lt;/a&gt; call (the modern alternative to &lt;code&gt;XMLHttpRequest&lt;/code&gt;) to get the raw JSON data, and apply any needed postprocessing.&lt;/p&gt;

&lt;p&gt;This again uses &lt;code&gt;useEffect&lt;/code&gt; - see &lt;a href="https://reactjs.org/docs/hooks-effect.html"&gt;the react docs on this&lt;/a&gt; for more background.  Effectively, the first time the &lt;code&gt;Loader&lt;/code&gt; component is rendered, it will call &lt;code&gt;useFetch&lt;/code&gt; which actually returns have no &lt;code&gt;data&lt;/code&gt; so will show &lt;code&gt;&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;&lt;/code&gt; - and kick off &lt;code&gt;useFetch&lt;/code&gt; which returns a &lt;code&gt;null&lt;/code&gt; response.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useFetch&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// postprocessing removed for clarity&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* stuff */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this code, &lt;code&gt;useEffect&lt;/code&gt; takes a parameter &lt;code&gt;[url]&lt;/code&gt; - this means it will only be run if the URL has changed (which should never happen in this example) so it runs once.  When it has fetched the data, it calls &lt;code&gt;setData&lt;/code&gt; which sets the &lt;code&gt;data&lt;/code&gt; state - which triggers a re-render of the &lt;code&gt;Loader&lt;/code&gt; (see &lt;a href="https://reactjs.org/docs/hooks-reference.html#usestate"&gt;the react docs for useState&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The second time &lt;code&gt;Loader&lt;/code&gt; is rendered, the call to &lt;code&gt;useFetch&lt;/code&gt; effectively does nothing, as the value of &lt;code&gt;[url]&lt;/code&gt; has not changed. (If it changed it could get into a loop, which would be bad).  But it will return the updated &lt;code&gt;data&lt;/code&gt; value, which I put into yet another &lt;code&gt;ref&lt;/code&gt;: &lt;code&gt;dataRef&lt;/code&gt; and pass to the &lt;code&gt;App&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;App&lt;/span&gt; &lt;span class="na"&gt;dataRef=&lt;/span&gt;&lt;span class="s"&gt;{dataRef}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm using a ref here so the &lt;code&gt;App&lt;/code&gt; doesn't need to check the whole &lt;code&gt;data&lt;/code&gt; object to see if it should be re-rendered.  (This may be unnecessary - I'm not clear enough about react internals to be sure what would happen if I just passed &lt;code&gt;data&lt;/code&gt; around - it may have no real overhead?)&lt;/p&gt;

&lt;h3 id="showing-the-app"&gt;Showing the App&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;App&lt;/code&gt; is fairly straightforward, with a bit of magic to set up the state and dispatch mechanisms:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;dataRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;vizState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;globalDispatchReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;dataRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;initialiseGlobalState&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s2"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s2"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Korny&lt;span class="ni"&gt;&amp;amp;apos;&lt;/span&gt;s D3 React Demo&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Viz&lt;/span&gt; &lt;span class="na"&gt;dataRef=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dataRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;state=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;vizState&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;dispatch=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Controller&lt;/span&gt; &lt;span class="na"&gt;dataRef=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dataRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;state=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;vizState&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;dispatch=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Inspector&lt;/span&gt; &lt;span class="na"&gt;dataRef=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dataRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;state=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;vizState&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;dispatch=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The UI is basically three components, &lt;code&gt;Viz&lt;/code&gt; which is the D3 visualisation, &lt;code&gt;Controller&lt;/code&gt; for the user controls on the left panel, &lt;code&gt;Inspector&lt;/code&gt; to inspect a particular data point.  They all take the same parameters - &lt;code&gt;dataRef&lt;/code&gt; for the raw data, &lt;code&gt;state&lt;/code&gt; for the current state, and &lt;code&gt;dispatch&lt;/code&gt; for updating the state.&lt;/p&gt;

&lt;h3 id="state-and-dispatching"&gt;State and Dispatching&lt;/h3&gt;

&lt;p&gt;State management is done through &lt;code&gt;useReducer&lt;/code&gt; - see &lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;the react docs&lt;/a&gt; for more.  Basically it takes three parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the reducer function, &lt;code&gt;globalDispatchReducer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the initial data, &lt;code&gt;dataRef&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;an initialising function &lt;code&gt;initialiseGlobalState&lt;/code&gt; - this allows for lazy calculation of the initial state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The initialise function creates the initial state object - it has a shape roughly like this:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// cheap state&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;expensiveConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// expensive state&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;constants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// state that never changes&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As discussed earlier, I split the state into cheap and expensive, and rendering is different depending on what changes.  There is also a &lt;code&gt;constants&lt;/code&gt; section - this doesn't really need to be in the state, but it's useful, especially as sometimes something starts off as constant (like margins, in this example) but later might become modifiable, at which time you can move it somewhere else in the state.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;globalDispatchReducer&lt;/code&gt; is what gets called whenever anything calls &lt;code&gt;dispatch()&lt;/code&gt; - earlier there was an example of an &lt;code&gt;onClick&lt;/code&gt; handler which called &lt;code&gt;dispatch({ type: "selectData", payload: node.id })&lt;/code&gt; - the &lt;code&gt;Controller&lt;/code&gt; also calls &lt;code&gt;dispatch&lt;/code&gt; whenever a user clicks a control.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;globalDispatchReducer&lt;/code&gt; is basically a large &lt;code&gt;switch&lt;/code&gt; statement:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;globalDispatchReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"selectData"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneDeep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// rest removed for clarity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It takes the current &lt;code&gt;state&lt;/code&gt; and an &lt;code&gt;action&lt;/code&gt; - which is &lt;code&gt;{ type: "selectData", payload: node.id }&lt;/code&gt; in the example above.  Whatever it returns is set as the new state, which will trigger re-rendering of any affected react components.&lt;/p&gt;

&lt;p&gt;I'm using &lt;a href="https://lodash.com/"&gt;lodash&lt;/a&gt; to clone the state here - alternatively you can just use es6 destructuring assignment, such as:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However this gets hairy for deeply nested structures, as the returned object is &lt;em&gt;not&lt;/em&gt; a deep clone of the original object - in the above example, &lt;code&gt;state.expensiveConfig.dateRange&lt;/code&gt; would be a shared reference between the original state and the new state, rather than an actual new object.  That might be OK, but it can be quite counterintuitive - it's caught me out before, so I like to use &lt;code&gt;cloneDeep&lt;/code&gt; and be explicit.  (It'd be nice to rework this with &lt;code&gt;immutable.js&lt;/code&gt; but that's a rabbit hole I don't have time for now)&lt;/p&gt;

&lt;h3 id="the-overall-event-flow"&gt;The overall event flow&lt;/h3&gt;

&lt;p&gt;The above might be a bit confusing - in a nutshell, I pass a &lt;code&gt;dispatch&lt;/code&gt; function to every component, including d3 renderers.&lt;/p&gt;

&lt;p&gt;When something calls &lt;code&gt;dispatch&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;globalDispatchReducer&lt;/code&gt; is called, returning a new state&lt;/li&gt;
  &lt;li&gt;React updates the &lt;code&gt;vizState&lt;/code&gt; state owned by the &lt;code&gt;App&lt;/code&gt; component, so re-renders &lt;code&gt;App&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;App&lt;/code&gt; in turn re-renders everything else.&lt;/li&gt;
  &lt;li&gt;Normal components are updated in standard React fashion, using virtual DOM magic so not too much gets re-rendered&lt;/li&gt;
  &lt;li&gt;the &lt;code&gt;Viz&lt;/code&gt; component looks at the updated &lt;code&gt;state&lt;/code&gt; and redraws whichever bits of the D3 visualisation need to be redrawn.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of this is surprisingly smooth - I've had pages with thousands of &lt;code&gt;svg&lt;/code&gt; nodes which updated nicely as I drag a control slider.  I initially thought I'd need to find ways to bypass react for some UI updates, but so far I haven't.&lt;/p&gt;

&lt;h2 id="the-future"&gt;The future&lt;/h2&gt;

&lt;p&gt;I'm using this for my polyglot code tools - I intend to write more about those when I have the time.&lt;/p&gt;

&lt;p&gt;I'd really value feedback on this post - especially as I'm not a react expert, and there are probably major things I've missed!  Feedback via Disqus below, or via &lt;code&gt;@kornys&lt;/code&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building a personal digital garden with Gatsby</title>
    <link rel="alternate" href="/2020/03/19/gatsby-digital-garden.html"/>
    <id>/2020/03/19/gatsby-digital-garden.html</id>
    <published>2020-03-19T19:53:00+00:00</published>
    <updated>2020-03-19T19:53:00+00:00</updated>
    <author>
      <name>Kornelis Sietsma</name>
    </author>
    <summary type="html">&lt;p&gt;(TL;DR - you can jump ahead to the sample site at &lt;a href="https://kornysietsma.github.io/digital-garden-sample/"&gt;https://kornysietsma.github.io/digital-garden-sample/&lt;/a&gt; based on source and content at &lt;a href="https://github.com/kornysietsma/digital-garden-sample"&gt;https://github.com/kornysietsma/digital-garden-sample&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I've also used these techniques to build a covid19...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;(TL;DR - you can jump ahead to the sample site at &lt;a href="https://kornysietsma.github.io/digital-garden-sample/"&gt;https://kornysietsma.github.io/digital-garden-sample/&lt;/a&gt; based on source and content at &lt;a href="https://github.com/kornysietsma/digital-garden-sample"&gt;https://github.com/kornysietsma/digital-garden-sample&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I've also used these techniques to build a covid19 info dump site: &lt;a href="https://covid19.korny.info"&gt;https://covid19.korny.info&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;For a very long time, I've used a wide range of different tools to try to manage my digital information - all sorts of digital information, the boundaries are fuzzy, but samples of the kinds of things I want to keep are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;That interesting thought that occured to me on the train for something I might do in my vast spare time&lt;/li&gt;
  &lt;li&gt;My code snippets from a recent cool problem I solved, in case I want to solve it again&lt;/li&gt;
  &lt;li&gt;Personal reflections on things in my life - the classic diary entry&lt;/li&gt;
  &lt;li&gt;Daily notes on my current client - stuff that usually goes in physical notebooks that I file and never open again&lt;/li&gt;
  &lt;li&gt;Mentoring and leadership notes on people who I'm trying to assist&lt;/li&gt;
  &lt;li&gt;Draft versions of blog posts I'll finish in 6 months time&lt;/li&gt;
  &lt;li&gt;That recipe I found in a cookbook that I like&lt;/li&gt;
  &lt;li&gt;The link that someone shared on social media that I'd like to read later - or at least, I'd like to be able to &lt;em&gt;find&lt;/em&gt; it later on the slim chance I decide to read it&lt;/li&gt;
  &lt;li&gt;My bookmarks of useful links for a particular tech stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and so on, and so on.  A lot of this is fuzzy and unstructured really; the lines are blurry.  The common thread is, I collect a lot of junk that sometimes I want to find again.&lt;/p&gt;

&lt;h2 id="some-history"&gt;Some history&lt;/h2&gt;

&lt;p&gt;I've used a bunch of things over the years - Evernote and Pocket and similar semi-commercial tools; browser bookmarks which grow endlessly and often get lost when changing browsers (and often that's good, they date quickly and Google/Ecosia/whatever can find the links faster most of the time), archive folders on disk, and on DropBox, and on Google Drive; Github gists, Remember The Milk, Trello boards.  And of course the classic - 80 open browser tabs + a "bookmarks" with folders and sub-folders and a folder "bookmarks from old laptop" and another "bookmarks from the laptop before that"&lt;/p&gt;

&lt;p&gt;This has been going on for &lt;em&gt;decades&lt;/em&gt; - I remember having a public bookmarks web page about 20 years ago.&lt;/p&gt;

&lt;p&gt;About 5 years ago when I was doing a lot of clojure, I got into Emacs and did a lot in the wonderful &lt;a href="https://orgmode.org/"&gt;org-mode&lt;/a&gt; - it kind-of covers most of this, especially when combined with &lt;a href="http://www.orgzly.com"&gt;orgzly on my phone&lt;/a&gt; - but I found it increasingly hard to use smoothly.  If I'm not using emacs all the time I forget the keystrokes; and (sorry emacs fans) the whole multiple-text-pane-ui thing just doesn't cut it for me any more.  And integration with anything means tweaking elisp and other arcane things.  If I used emacs 100% of the time this might be OK, but as an occasional user, it isn't cutting it.&lt;/p&gt;

&lt;p&gt;About 2 years ago I realised that the blogging tools I've been using actually do a lot of what I want - if I dump &lt;em&gt;everything&lt;/em&gt; as Markdown or Asciidoc in a Jekyll site, then host it locally on my laptop, it's not bad - at least for capturing things daily as I go.  It became my digital diary - bookmarks and firehose stuff and long-term notes were still in org-mode, short-term planning was still in Trello, but the Jekyll diary worked quite well.&lt;/p&gt;

&lt;h2 id="advantages-of-a-text-based-information-store"&gt;Advantages of a text-based information store&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;It doesn't take much storage&lt;/li&gt;
  &lt;li&gt;It can be bulk-searched easily.  Want to find that rant I wrote about ESBs? Open a text editor or a shell, and search.&lt;/li&gt;
  &lt;li&gt;It's easy to script - every scripting language can manipulate structured text files with ease&lt;/li&gt;
  &lt;li&gt;It's easy to encrypt and back up - no binary files&lt;/li&gt;
  &lt;li&gt;It doesn't get out of date easily.  If I change tools or platforms, I can write a script to merge the files into whatever the new tool needs.  This is a biggy, and my main problem with things like Evernote - I don't want to get locked in to a platform forever!  And worst case, if I find these files on an old disk in 20 years, I can still read them.  (I have email archives from the '90s somewhere, that I want to read, but I need to reverse engineer the Agent newsreader app's file format firstâ€¦)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="enter-gatsby"&gt;Enter Gatsby&lt;/h2&gt;

&lt;p&gt;The Jekyll solution was doing OK as a place to put thoughts and information, and basic searching was ok in a text editor - but I was finding the web interface not awfully useful, and it was hard to organise things.&lt;/p&gt;

&lt;p&gt;Then I was reading up on &lt;a href="https://www.gatsbyjs.org/"&gt;GatsbyJS&lt;/a&gt;, and I came across &lt;a href="https://github.com/johno/digital-garden"&gt;this sample digital garden&lt;/a&gt; and associated articles, and I thought "I could move my diary to gatsby" - so here we are.   (See below for more on digital gardens.)&lt;/p&gt;

&lt;p&gt;Gatsby is basically a clever idea - instead of going straight from markdown to html like Jekyll and others do, and building every other customisation by hand, why not add a couple of layers - a graphql data representation, and a JavaScript/React html production layer?&lt;/p&gt;

&lt;p&gt;The basic flow of content then goes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Base content is one of a range of formats - markdown, JSON files, images, or sourced from a CMS. (Don't get distracted by all the CMS talk - for most purposes you can just use the file system for sources)&lt;/li&gt;
  &lt;li&gt;You use one of a range of plugins, or custom code, to represent that data as a graphql layer.  Note this is still at build time! You don't need graphql at runtime.&lt;/li&gt;
  &lt;li&gt;You generate pages, still at build time, using JavaScript code which queries the GraphQL data and creates HTML pages. This all uses React for page creation, so you have a lot of power over templating, styling, and all the magic that React gives you.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's about it. The end result is mostly static html+css. (it also includes React for things you might want to change at runtime, but the basic site works fine with JavaScript off)&lt;/p&gt;

&lt;p&gt;And at build time you can use custom scripts to do all sorts of stuff with those static pages.&lt;/p&gt;

&lt;p&gt;You can look at a sanitised clone of my site at https://kornysietsma.github.io/digital-garden-sample/ - source at https://github.com/kornysietsma/digital-garden-sample - the real one has a lot more content! But this hopefully shows the idea. (Note - it is designed for a wide laptop, there's no mobile support at all yet!)&lt;/p&gt;

&lt;p&gt;The build-time page generation is in &lt;a href="https://github.com/kornysietsma/digital-garden-sample/blob/master/gatsby-node.js"&gt;gatsby-node.js&lt;/a&gt; - this is what does the "magic" of converting all the files under &lt;code&gt;/content&lt;/code&gt; into a mix of &lt;a href="https://kornysietsma.github.io/digital-garden-sample/-/-/diary/2020-01-01-first-post/"&gt;diary entries&lt;/a&gt;, &lt;a href="https://kornysietsma.github.io/digital-garden-sample/-/-/wiki/about/"&gt;wiki pages&lt;/a&gt;, and &lt;a href="https://kornysietsma.github.io/digital-garden-sample/firehose/tech/-"&gt;firehose lists&lt;/a&gt; - plus a whole tagging and categorising system.&lt;/p&gt;

&lt;h2 id="whats-all-this-digital-garden-stuff"&gt;What's all this "digital garden" stuff?&lt;/h2&gt;

&lt;p&gt;The digital garden - and I may be misusing the term, it's all a bit new to me - is a place where your information resides - it's not necessarily time-based like a blog, it's also a network of information, more like a wiki.&lt;/p&gt;

&lt;p&gt;There's a good description at &lt;a href="https://joelhooks.com/digital-garden"&gt;https://joelhooks.com/digital-garden&lt;/a&gt; - which I found from browsing the gatsby sample at &lt;a href="https://github.com/johno/digital-garden"&gt;https://github.com/johno/digital-garden&lt;/a&gt; - both of those link to the earlier articles &lt;a href="https://tomcritchlow.com/2019/02/17/building-digital-garden/"&gt;Building a digital garden&lt;/a&gt; and &lt;a href="https://tomcritchlow.com/2018/10/10/of-gardens-and-wikis/"&gt;Of gardens and wikis&lt;/a&gt; by Tom Critchlow.  You can keep following links to fascinating articles from here!&lt;/p&gt;

&lt;p&gt;I also love &lt;a href="https://www.martinfowler.com/bliki"&gt;Martin Fowler's bliki&lt;/a&gt; which is something very similar - a combination blog and wiki.  &lt;a href="https://www.martinfowler.com/bliki/WhatIsaBliki.html"&gt;Martin writes&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I decided I wanted something that was a cross between a wiki and a blog - which Ward Cunningham immediately dubbed a bliki. Like a blog, it allows me to post short thoughts when I have them. Like a wiki it will build up a body of cross-linked pieces that I hope will still be interesting in a year's time."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My "digital garden" isn't public - there's too much confidential, or just plain half-baked, to make it public.  I might turn my blog into a garden at some stage though.  (I'm a little hesitant, because so far I've follow the mantra "use boring tools" - I want to keep my blog low-maintenance, and Gatsby is still new and rapidly changing)&lt;/p&gt;

&lt;h2 id="my-categorisation-scheme"&gt;My categorisation scheme&lt;/h2&gt;

&lt;p&gt;I didn't want to go wild with hierarchies or massive structures - I've made that mistake enough times in the past!&lt;/p&gt;

&lt;p&gt;Basically I have three types of content at the moment:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Diary entries - Markdown pages with a 'date' in the metadata - which get shown in reverse chronological order&lt;/li&gt;
  &lt;li&gt;Wiki pages - which are just Markdown pages with no date!  I do use naming conventions for where they are stored and how they are named, but otherwise they are just the same as diary entries, but they get shown alphabetically in different bits of the UI.  (and there's no magic shortcut to link to them - yet).&lt;/li&gt;
  &lt;li&gt;Firehose entries - which are tiny snippets, mostly URLs or brief notes - are just JSON.  All JSON files in the &lt;code&gt;/content&lt;/code&gt; directory are assumed to be firehose data (more on that later) and get slurped in together.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And then I have two kinds of categorisation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Categories are a simple top-level category choice.  It's a bit arbitrary, the idea is to be able to browse just "work" or just "play" or just "tech" stuff.  I like single layers of organsation, it stops me over-complicating things.&lt;/li&gt;
  &lt;li&gt;Tags are anything else.  Any content can have zero or more tags; I'm working out what tags work as I go.  You can currently only filter by a single tag at a time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="handling-state-through-urls"&gt;Handling state through URLs&lt;/h3&gt;

&lt;p&gt;I did have a snag with my categories and tags - how do you keep track of state?  I wanted to say "browse all pages in the "work" category" - but I wanted that selected category to be remembered. There is no "state" in a Gatsby site - it's all static HTML, remember?  I could use tweaks like # URL suffixes but it all looked quite complex, and I'm a fan of simple.  So I just went for a routing scheme - most urls are of the form &lt;code&gt;/[category]/[tag]/page&lt;/code&gt; - so if a page is accessed via &lt;code&gt;/work/fish/wish-i-was-fishing&lt;/code&gt; I know it should show the &lt;code&gt;work&lt;/code&gt; category and &lt;code&gt;fish&lt;/code&gt; tag as highlighted.  (and yes, that means each page is rendered mulitple times for every category and tag.  But it's at build time and it's fast, so I don't really care)&lt;/p&gt;

&lt;p&gt;(Disclaimer time - I'm a total Gatsby newbie, with no spare time so doing whatever seems to work - there may be dramatically easier ways to do this!)&lt;/p&gt;

&lt;h3 id="a-bit-more-on-the-firehose"&gt;A bit more on the firehose&lt;/h3&gt;

&lt;p&gt;The firehose is where I dump the continuous deluge of stuff that I have spent decades trying to capture.  I know by now that 90% of things I see - bookmarks, video links, "to_read" entries, articles in pocket, etc - will never be looked at again.  But I like to capture them anyway, so when I go "I saw a cool thing a week ago - where is it?" I can find it.&lt;/p&gt;

&lt;p&gt;Firehose entries are implemented as JSON snippets like this:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"https://www.devops-research.com/research.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2020-02-06"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"tech"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"dora"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"devops"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"cd"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s2"&gt;"lines"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"nice diagram summary of DORA Devops stuff"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don't generally write JSON by hand though - on my phone I run &lt;a href="http://www.orgzly.com/"&gt;orgzly&lt;/a&gt; and then I have a script to convert that to JSON every now and then; and I have this function in my &lt;code&gt;.zshrc&lt;/code&gt; so I can add entries from a terminal by running the &lt;code&gt;firehose&lt;/code&gt; command:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;firehose&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;pushd&lt;/span&gt; ~/path/to/garden

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Title: "&lt;/span&gt;
    &lt;span class="nb"&gt;read &lt;/span&gt;title
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Tags: (comma separated) "&lt;/span&gt;
    &lt;span class="nb"&gt;read &lt;/span&gt;tags
    &lt;span class="nv"&gt;jtags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$tags&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | jq &lt;span class="nt"&gt;-R&lt;/span&gt; &lt;span class="s1"&gt;'split(",")'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Category: (tech, work, personal, play, world, meta, family, other)"&lt;/span&gt;
    &lt;span class="nb"&gt;read &lt;/span&gt;category
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"url or text:"&lt;/span&gt;
    &lt;span class="nb"&gt;read &lt;/span&gt;url

    &lt;span class="nv"&gt;pdate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%Y-%m-%d&lt;span class="sb"&gt;`&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"[{
&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,
&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;category&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,
&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;date&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="nv"&gt;$pdate&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,
&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;tags&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;jtags&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,
&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;lines&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;: [&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;]
}]"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /tmp/fhbit.json

    &lt;span class="nv"&gt;INBOX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;content/firehose/laptop/inbox.json
    jq &lt;span class="nt"&gt;-s&lt;/span&gt; add &lt;span class="nv"&gt;$INBOX&lt;/span&gt; /tmp/fhbit.json &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /tmp/fh.json
    cp /tmp/fh.json &lt;span class="nv"&gt;$INBOX&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"updated &lt;/span&gt;&lt;span class="nv"&gt;$INBOX&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course it's pretty easy to convert any other stuff I might have lying around to JSON or Markdown - both are easy to create.&lt;/p&gt;

&lt;p&gt;And that's the thing I'm really enjoying about Gatsby - I have &lt;em&gt;control&lt;/em&gt; - whatever bits and bobs I might want to add in the future - maybe an image gallery, maybe ebook categorisation - it's very tweakable.&lt;/p&gt;

&lt;h2 id="other-neat-gatsby-things"&gt;Other neat Gatsby things&lt;/h2&gt;
&lt;p&gt;There are some very cool plugins available for all sorts of neat things.  I'm generating &lt;a href="https://kornysietsma.github.io/digital-garden-sample/-/-/diary/2020-01-03-diagrams/"&gt;graphviz and mermaidjs diagrams&lt;/a&gt; embedded in markdown files.  &lt;a href="https://kornysietsma.github.io/digital-garden-sample/-/-/diary/2020-01-02-images/"&gt;Images&lt;/a&gt; are automatically scaled and made responsive.  And of course &lt;a href="https://kornysietsma.github.io/digital-garden-sample/-/-/diary/2020-03-14-demonstrating-source-code/"&gt;source code formatting&lt;/a&gt; is straightforward.&lt;/p&gt;

&lt;h2 id="downsides-of-gatsby"&gt;Downsides of Gatsby&lt;/h2&gt;

&lt;p&gt;First, it's pretty new - and being in node.js land, I'm regularly updating packages; even right now &lt;code&gt;npm audit&lt;/code&gt; is showing a vulnerability because several libraries use &lt;code&gt;decompress&lt;/code&gt; which &lt;a href="https://npmjs.com/advisories/1217"&gt;has a known defect&lt;/a&gt; - this isn't a problem for me as I only run this code on my laptop when I rebuild the site, but would be more concerning if you were using this somewhere big.&lt;/p&gt;

&lt;p&gt;Also, I found that a lot of the themes and starters are, frankly, more useful as demos than actual fully featured sites.  They tend to have pretty horrible CSS - not just per-component CSS, I've come to terms with that; but inline css in the middle of JSX files, and some obvious "we hacked this together until it looks OK on our machine" stuff.  They also often include all sorts of things that you might not want, or might want differently.  I tried using about 4 different quite popular starters, before I gave up and worked from the default tutorial instead.&lt;/p&gt;

&lt;p&gt;Overall, though, it's pretty neat - I'd definitely be interested in using this on a client site, especially hooked up to a nice headless CMS.  And I'm going to keep tweaking my own gatsby digital garden for a while!  (no guaranteeing that I won't be praising some completely different alternative in another 5 years, of course)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>multiple git identities</title>
    <link rel="alternate" href="/2020/02/10/multiple-git-identities.html"/>
    <id>/2020/02/10/multiple-git-identities.html</id>
    <published>2020-02-10T08:18:00+00:00</published>
    <updated>2020-02-10T08:18:00+00:00</updated>
    <author>
      <name>Kornelis Sietsma</name>
    </author>
    <summary type="html">&lt;p&gt;This is another "I do this a lot so am blogging about it for future me" article.  There is a lot of info about this out there, but doesn't tend to be in a single place, so I'm summarizing the wisdom of others.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; this post assumes recent versions...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;This is another "I do this a lot so am blogging about it for future me" article.  There is a lot of info about this out there, but doesn't tend to be in a single place, so I'm summarizing the wisdom of others.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; this post assumes recent versions of &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;openssh&lt;/code&gt; - and the approaches don't always work with tools that do their own git or ssh manipulation, such as IDEs; if they don't read system git/ssh configs, you might be out of luck.  (also this assumes a un*x/Mac operating system, not sure if any of this works on Windows though the same principles probably apply)&lt;/p&gt;

&lt;h2 id="the-problem"&gt;The problem&lt;/h2&gt;

&lt;p&gt;Regularly, I want to have more than one git identity - often on the same host, such as github.  A classic example is when I was working at GDS - they have open-source code on public github repositories, but in order to keep my home git separate from my work git, I wanted to use a different ssh key and email for GDS repos than for my own.&lt;/p&gt;

&lt;h3 id="problem-one---ssh-identity"&gt;Problem one - ssh identity&lt;/h3&gt;

&lt;p&gt;Under the covers, when you run &lt;code&gt;git clone git@github.com:foo/bar&lt;/code&gt; it actually uses &lt;code&gt;ssh&lt;/code&gt; - more, it uses &lt;code&gt;ssh git@github.com&lt;/code&gt; passing a public key file (typically &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;) as your identity.  And these tools tend to assume that "git@github.com" is one person with one identity, not some sort of Jekyll and Hyde mess.&lt;/p&gt;

&lt;p&gt;(Note: I strongly suggest you use &lt;code&gt;ssh-agent&lt;/code&gt; and &lt;code&gt;ssh-add&lt;/code&gt; to store keys in the agent - but that's a digression)&lt;/p&gt;

&lt;h3 id="approach-one-multiple-ssh-host-aliases"&gt;Approach one: multiple ssh host aliases&lt;/h3&gt;
&lt;p&gt;This is the easiest fix, but it does break some tools that don't understand ssh configs.&lt;/p&gt;

&lt;p&gt;Recent openssh versions let you specify host aliases - if you set up your &lt;code&gt;~/.ssh/config&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa

Host github.com_foobar
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_foobar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then ssh recognises &lt;code&gt;github.com_foobar&lt;/code&gt; as an alias for &lt;code&gt;github.com&lt;/code&gt; but with a different identity.  So &lt;code&gt;git clone git@github.com_foobar:foo/bar&lt;/code&gt; will use the &lt;code&gt;id_rsa_foobar&lt;/code&gt; identity file!&lt;/p&gt;

&lt;h4 id="problems"&gt;problems&lt;/h4&gt;
&lt;p&gt;The main problem here is that &lt;code&gt;github.com_foobar&lt;/code&gt; doesn't exist - it's not a real host that exists in DNS.  Git understands this, but there's a chance that other tools won't look in git config, or will do a host lookup or something, and fail.  (This is happening less as more people start using ssh aliases, but it definitely still happens)&lt;/p&gt;

&lt;h3 id="approach-two-overriding-the-ssh-command"&gt;Approach two: Overriding the ssh command&lt;/h3&gt;
&lt;p&gt;You can also tell &lt;code&gt;git&lt;/code&gt; to use a different &lt;code&gt;ssh&lt;/code&gt; command:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_foobar" git clone git@github.com_foobar:foo/bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works nicely - but you need to override the ssh command every time you interact with a remote repository.  You can set the command for a specific repository once you have a local clone with:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config core.sshCommand "ssh -i ~/.ssh/id_rsa_foobar"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This modifies the file &lt;code&gt;.git/config&lt;/code&gt; and adds a section like:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[core]
    sshCommand = ssh -i ~/.ssh/id_rsa_foobar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also override this for a specific directory path, in your git config - more on the per-path settings below.&lt;/p&gt;

&lt;h4 id="problems-1"&gt;problems&lt;/h4&gt;
&lt;p&gt;Again, many tools won't look in your git config - especially as this is quite a new git feature.  This probably works a bit less often than overriding the host - and may fail in more strange ways, at least overriding the host can give you a clear error like "no such host github.com_foobar"!  But at least it won't fail if something tries to check the host exists.&lt;/p&gt;

&lt;h3 id="approach-three---switching-your-key-files-around"&gt;Approach three - switching your key files around&lt;/h3&gt;

&lt;p&gt;This is probably the least recommended option, as it's fiddly and easy to get wrong.  But if all else fails, you can always store your &lt;code&gt;id_rsa_foobar&lt;/code&gt; and normal &lt;code&gt;id_rsa&lt;/code&gt; files somewhere outside &lt;code&gt;~/.ssh&lt;/code&gt; and write scripts to copy the correct file in when you want to change identity.  Obviously this is hacky and global - and easy to forget that you changed it and didn't change it back.&lt;/p&gt;

&lt;h3 id="what-about-https-urls"&gt;What about HTTPS URLs?&lt;/h3&gt;

&lt;p&gt;If you don't mind entering your git username and password every time, https makes this easy!&lt;/p&gt;

&lt;p&gt;But if you want to cache the username/password, then you'll have the same problem - you'll need to fiddle around with how to get the git credential helper to cache different values depending on your repo; I haven't really played with that area so can't help you!&lt;/p&gt;

&lt;h2 id="problem-two---name-and-email-in-git-logs"&gt;Problem two - name and email in git logs&lt;/h2&gt;

&lt;p&gt;This is a more subtle problem.  Generally you want to have commit logs against your name and email, so you run something like:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "Korny Sietsma"
git config --global user.email "korny@sietsma.com"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But then when you push to a repo you cloned as "Fnordo the Terrible", it will still see that global config and your commit logs will have "Korny Sietsma" all over them.  (Note there are ways to retrospectively fix that, but they are very fiddly)&lt;/p&gt;

&lt;p&gt;You can set the same config locally on each repo:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --local user.name "Fnordo the Terrible"
git config --global user.email "terrible@foobar.com"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but you need to remember this for every repo.&lt;/p&gt;

&lt;p&gt;An alternative with recent git versions is, you can edit the global git config and add &lt;em&gt;per directory settings&lt;/em&gt; - put something like this in &lt;code&gt;~/.gitconfig&lt;/code&gt; :&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[user]
    name = Korny Sietsma
    email = korny@sietsma.com
[includeIf "gitdir:~/projects/foobar/"]
    path = ~/projects/foobar/custom_gitconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then in the file &lt;code&gt;~/projects/foobar/custom_gitconfig&lt;/code&gt; you can provide overrides &lt;em&gt;which apply for any git project under &lt;code&gt;~/projects/foobar/&lt;/code&gt; !&lt;/em&gt;&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[user]
    name = Fnordo the Terrible
    email = terrible@foobar.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This trick also applies to ssh settings - you can add a core.sshCommand as described above to your custom git config.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; however this config applies to git repositories under &lt;code&gt;~/projects/foobar&lt;/code&gt; - but not to arbitrary directories not yet in git.  So if you CD to &lt;code&gt;~/projects/foobar/&lt;/code&gt; and then run &lt;code&gt;git clone&lt;/code&gt; it won't be smart enough to clone with an overridden ssh command.&lt;/p&gt;

&lt;h2 id="bonus-prize---other-per-directory-configurations"&gt;Bonus prize - other per-directory configurations&lt;/h2&gt;

&lt;p&gt;Once you can set git config per directory tree, there are some very handy things you can do.&lt;/p&gt;

&lt;p&gt;For instance, I like to set a default git commit template - especially if you are pair or mob programming, it's good to add &lt;code&gt;&amp;lt;Co-authored-by&amp;gt;&lt;/code&gt; tags at the end. &lt;a href="https://help.github.com/en/github/committing-changes-to-your-project/creating-a-commit-with-multiple-authors"&gt;Github understands these and will show all listed people as authors.&lt;/a&gt; Apparently &lt;a href="https://gitlab.com/gitlab-org/gitlab-foss/-/merge_requests/17919"&gt;GitLab supports these as well&lt;/a&gt;. If you are interested there are also a &lt;a href="https://git.wiki.kernel.org/index.php/CommitMessageConventions"&gt;number of other similar conventions&lt;/a&gt; - but don't go overboard!&lt;/p&gt;

&lt;p&gt;It's also worth reading &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;Chris Beams' article&lt;/a&gt; on how to write a good commit message.  This is much easier if you have a template to work from!&lt;/p&gt;

&lt;p&gt;You can do this by setting the &lt;code&gt;commit.template&lt;/code&gt; config setting to point to a template file - and you can do this in your per-project include file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[commit]
        template = ~/projects/foobar/commit_template.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then make a template file like:
~~~
GTFO-XXXX Change description&lt;/p&gt;

&lt;p&gt;more details&lt;/p&gt;

&lt;p&gt;Co-authored-by: Fnordo the Terrible &lt;a href="&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#116;&amp;#101;&amp;#114;&amp;#114;&amp;#105;&amp;#098;&amp;#108;&amp;#101;&amp;#064;&amp;#102;&amp;#111;&amp;#111;&amp;#098;&amp;#097;&amp;#114;&amp;#046;&amp;#099;&amp;#111;&amp;#109;"&gt;&amp;#116;&amp;#101;&amp;#114;&amp;#114;&amp;#105;&amp;#098;&amp;#108;&amp;#101;&amp;#064;&amp;#102;&amp;#111;&amp;#111;&amp;#098;&amp;#097;&amp;#114;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;
Co-authored-by: Siobhan the Unpronounceable &lt;a href="&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#115;&amp;#105;&amp;#111;&amp;#098;&amp;#104;&amp;#097;&amp;#110;&amp;#064;&amp;#102;&amp;#111;&amp;#111;&amp;#098;&amp;#097;&amp;#114;&amp;#046;&amp;#099;&amp;#111;&amp;#109;"&gt;&amp;#115;&amp;#105;&amp;#111;&amp;#098;&amp;#104;&amp;#097;&amp;#110;&amp;#064;&amp;#102;&amp;#111;&amp;#111;&amp;#098;&amp;#097;&amp;#114;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;
~~~&lt;/p&gt;

&lt;p&gt;You can even write your own scripts to build these templates yourself.&lt;/p&gt;

&lt;p&gt;The possibilities of per-directory git config are endless - you can also set up project-level pre-commit or other hooks in a similar way.  (Hooks are also great for making sure you format commit messages correctly! But that's a whole different subject)&lt;/p&gt;

&lt;h2 id="problem-3---web-browser-identity"&gt;Problem 3 - web browser identity&lt;/h2&gt;

&lt;p&gt;There are still some headaches with multiple git identites if you use a web browser to open https://github.com and don't remember who you are logged in as.  Github (and other git hosts) have all sorts of UI tools for commits, PRs etc., and they will identify you by your current browser cookies.&lt;/p&gt;

&lt;p&gt;My preferred approach here is to set up my browser with multiple segregated sandboxes - I'm not going to go into all the details here, but take a look at &lt;a href="https://support.google.com/chrome/answer/2364824"&gt;Profiles&lt;/a&gt; if you are using Google Chrome, or &lt;a href="https://addons.mozilla.org/en-GB/firefox/addon/multi-account-containers/"&gt;Multi-account containers&lt;/a&gt; if you are using FireFox.  Both of these let you keep one set of browser tabs logged in as your private identity, and one as your work identity.&lt;/p&gt;

&lt;p&gt;They are also great for walling off apps like Facebook from other websites.  If only one profile is logged in on Facebook, other profiles won't be leaking identity accidentally.&lt;/p&gt;

&lt;p&gt;I hope this is useful to people out there - feel free to comment below!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The swiss cheese model and acceptance tests</title>
    <link rel="alternate" href="/2020/01/20/the-swiss-cheese-model-and-acceptance-tests.html"/>
    <id>/2020/01/20/the-swiss-cheese-model-and-acceptance-tests.html</id>
    <published>2020-01-20T08:13:00+00:00</published>
    <updated>2020-01-20T08:13:00+00:00</updated>
    <author>
      <name>Kornelis Sietsma</name>
    </author>
    <summary type="html">&lt;h2 id="testing-and-agile"&gt;Testing and Agile&lt;/h2&gt;
&lt;p&gt;I've seen testing, especially acceptance testing, done horribly wrongly over the years, and sadly I often see the same anti-patterns repeated over and over; so I thought it'd be worth talking about my perspectives on this thorny subject...&lt;/p&gt;</summary>
    <content type="html">&lt;h2 id="testing-and-agile"&gt;Testing and Agile&lt;/h2&gt;
&lt;p&gt;I've seen testing, especially acceptance testing, done horribly wrongly over the years, and sadly I often see the same anti-patterns repeated over and over; so I thought it'd be worth talking about my perspectives on this thorny subject.&lt;/p&gt;

&lt;p&gt;First off, I think it's worth emphasising that &lt;em&gt;automated testing is at the heart of agile software development&lt;/em&gt;.  Agile development assumes "building quality in", and that means tests. I've seen places with &lt;em&gt;no&lt;/em&gt; tests, or nothing but a suite of slow fragile end-to-end tests run on a snowflake environment, who want to "go agile".  You can't just "go agile" without a solid underpinning of low-level tests that &lt;em&gt;enable&lt;/em&gt; you to move fast without breaking things.  Going agile without good tests is like embracing modern surgery but skipping all that pointless handwashing stuff.&lt;/p&gt;

&lt;p&gt;All of this is doubly true when moving towards continuous delivery - I strongly recommend people read the "Technical Practices" chapter in "&lt;em&gt;Accelerate&lt;/em&gt;" &lt;sup id="fnref:accelerate"&gt;&lt;a href="#fn:accelerate" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; (really, just go read the whole book - it's awesome, providing the &lt;em&gt;data&lt;/em&gt; behind the benefits of agile and CD).&lt;/p&gt;

&lt;h2 id="the-test-pyramid"&gt;The test pyramid&lt;/h2&gt;

&lt;p&gt;A classic metaphor in automated testing is &lt;a href="https://martinfowler.com/bliki/TestPyramid.html"&gt;the test pyramid:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/2019-07-22-the-swiss-cheese-model-and-acceptance-tests/Testing_Pyramid.svg" alt="test pyramid" /&gt;&lt;/p&gt;

&lt;p&gt;it's been a useful model for ages, and still a good conversation starter, but it lacks a few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It isn't clear really what the horizontal dimension is - does wider mean more tests? More test scenarios? More features tested?&lt;/li&gt;
  &lt;li&gt;It isn't clear what the vertical dimension is - where do contract tests fit? What about chaos engineering / resiliency tests?  What if you test at an API not a UI?  Should you test in a particular order?&lt;/li&gt;
  &lt;li&gt;In many cases the best shape is nothing like a pyramid - some systems are well suited to integration tests, and tend to a pear-shape.  Some systems are more of an hourglass, with lots of UI/API tests and lots of unit tests and not much between.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've seen people tweak the pyramid - adding layers, adding axes, adding explanations - but fundamentally I think it's a bit flawed.&lt;/p&gt;

&lt;h2 id="a-different-perspective---swiss-cheese"&gt;A different perspective - Swiss Cheese&lt;/h2&gt;

&lt;p&gt;I recently came across a new-ish metaphor: the Swiss Cheese model of testing - which I quite like. It's a lot more nuanced than the old Test Pyramid, and helpful when it comes to talking about both &lt;em&gt;why&lt;/em&gt; we test, and &lt;em&gt;how&lt;/em&gt; we should test.&lt;/p&gt;

&lt;p&gt;The basic idea is: consider your tests like a big stack of swiss cheese slices - you know, the kind with holes in them:&lt;/p&gt;

&lt;p&gt;&lt;img src="/2019-07-22-the-swiss-cheese-model-and-acceptance-tests/Swiss_cheese.jpg" alt="swiss cheese" /&gt;&lt;/p&gt;

&lt;p&gt;Now layer those cheese slices vertically - each layer represents a different kind of tests.  Order them in the order you run them - usually simplest, fastest feedback first, then slower layers below them:&lt;/p&gt;

&lt;p&gt;&lt;img src="/2019-07-22-the-swiss-cheese-model-and-acceptance-tests/test_swiss_cheese.svg" alt="swiss cheese slices" /&gt;&lt;/p&gt;

&lt;p&gt;You can imagine defects as physical bugs which fall down the diagram, and are caught at different levels - different slices of cheese.&lt;/p&gt;

&lt;p&gt;Some bugs might fall all the way through a series of holes and not get caught.  This is bad.&lt;/p&gt;

&lt;p&gt;&lt;img src="/2019-07-22-the-swiss-cheese-model-and-acceptance-tests/bug_catching.svg" alt="swiss cheese slices" /&gt;&lt;/p&gt;

&lt;p&gt;Each layer, and each kind of test, has different tradeoffs such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;How fast is the feedback cycle?&lt;/em&gt; Can developers know they have a problem &lt;em&gt;as they type&lt;/em&gt; (e.g. with a linter), or as soon as they save a file, or &lt;a href="https://blog.ploeh.dk/2012/05/24/TDDtestsuitesshouldrunin10secondsorless/"&gt;when they run a 10 second test suite&lt;/a&gt;? Or do they have to wait until the evening after they pushed their code changes?  Continuous Integration is what we'd like - every commit runs every test - but some layers are going to be slow or expensive.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;How fragile are the tests?&lt;/em&gt; - do they fail in confusing and obscure ways? Are they reliable, failing the same way from the same problem? Or failing the same way from different problems?&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;How expensive are the tests?&lt;/em&gt; - do they take a lot of effort to write? Do they need re-writing whenever you change code?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And each layer has holes - things that are not sensible to test at that level.  You don't test your exception handling in a browser test.  You don't test your microservice interactions in a unit test.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; I haven't prescribed what the precise test phases are - there's a lot of "it depends" on choosing your tests.  There's a whole other blog post to be written about my preferred test layers!&lt;/p&gt;

&lt;p&gt;A basic principle here though is - &lt;em&gt;don't repeat yourself&lt;/em&gt;. There's not a lot of value testing the same thing multiple times.  The cheese layers will always overlap a bit - but if you have a fast simple unit test to verify the text of a validation message, don't also have a slow fragile browser-based end-to-end test that verifies the same thing.&lt;/p&gt;

&lt;p&gt;This is especially true of manual tests - the typical top of the classical test pyramid.  You shouldn't manually re-test what you have automatically tested.  You might "kick the tyres" to make sure that everything works OK.  You might test in production, relying on monitoring and A/B testing to identify problems early.  But you really want to catch everything you can before that point.&lt;/p&gt;

&lt;p&gt;Also it's somewhat up to you to decide what is most appropriate for which layer.  Fast feedback is good, but so are clear expressive tests that are easy to change.  A classic example is database interactions - it's almost always better to test against a real database, possibly an in-memory one, than to try to mock it out.&lt;/p&gt;

&lt;h1 id="acceptance-tests"&gt;Acceptance tests&lt;/h1&gt;

&lt;p&gt;One "cheese slice" I definitely &lt;em&gt;don't&lt;/em&gt; want to see is the "acceptance tests" slice.  Don't get me wrong, I love acceptance tests, I love the idea of defining "done" for a user story by clear unambiguous tests.&lt;/p&gt;

&lt;p&gt;But too many people assume there must be an accepance test stage - a single "slice" in this model - which contains all the acceptance tests.  This means those tests usually end up near the bottom of the pile, in a suite of large slow expensive browser-driven tests, that have to run against a production-like environment.&lt;/p&gt;

&lt;p&gt;Sure, that's appealing - lots of us started like that, learning the magic of BDD and Cucumber and Selenium, building amazing suites of exhaustive browser-based tests.  But that magic was &lt;em&gt;slow&lt;/em&gt;, and &lt;em&gt;fragile&lt;/em&gt; - and no amount of tinkering with clever setups and special approaches got past the fact that the tests took far far too long to run, and were fragile, and hampered rapid development.&lt;/p&gt;

&lt;p&gt;Besides, they encouraged people to only think of "acceptance" in terms of "clicks and buttons" - where were the tests for "it should handle network failures gracefully" or "it should send exception logs to the auditing system"?&lt;/p&gt;

&lt;p&gt;(I do think there's value in &lt;em&gt;some&lt;/em&gt; browser-driven end-to-end tests - there are bugs you can only catch that way.  But call them "smoke tests" or "end-to-end tests" or something, not "acceptance tests".  If you want lots of tests of UI features, consider tools that test within the framework you use, like &lt;a href="https://airbnb.io/enzyme/"&gt;enzyme&lt;/a&gt; for react - you might want several "cheese slices" of UI tests - see &lt;a href="https://github.com/mui-org/material-ui/blob/master/test/README.md"&gt;how the material UI tests are layered&lt;/a&gt; for an example.)&lt;/p&gt;

&lt;p&gt;In my opinion, acceptance criteria should be tested at &lt;em&gt;whatever level is most effective&lt;/em&gt; for testing that requirement:&lt;/p&gt;

&lt;p&gt;&lt;img src="/2019-07-22-the-swiss-cheese-model-and-acceptance-tests/acceptance_tests.svg" alt="acceptance tests" /&gt;&lt;/p&gt;

&lt;p&gt;If the acceptance criterion is "it should have the title &lt;code&gt;Fnord Motor Company&lt;/code&gt;" then that can be a simple browser-based test against a stubbed back end.  If the acceptance criterion is "it should not accept a password shorter than 10 characters" then that might be a pair of unit tests, one to check that the UI validation is good, and one to check that the server-side validation is good. If the acceptance criterion is  "it should respond within 30ms under peak load" then that might be part of a performance test suite.&lt;/p&gt;

&lt;p&gt;If you really feel the need to trace acceptance tests back to stories, you can probably work out a way to tag the tests and report on them somehow - but I'd ask, why bother?  Are you ever going to use that information?  Maybe it's sufficient to just list the tests in the stories, and check they are there as part of signing the story as done, and not try to track the relationship beyond that.&lt;/p&gt;

&lt;h2 id="user-stories-are-a-point-in-time-tests-are-forever"&gt;User stories are a point in time, tests are forever&lt;/h2&gt;

&lt;p&gt;Another problem with an Acceptance Test layer, is that user stories express the requirements at the time the story was written - usually with changes right up to the point of delivery.  At the time of finishing a story, acceptance tests will demonstrate it works - but the next story, or the one after that, will change the behaviour.  If your tests are too strongly structured around the stories, they can hamper change - you need to think "OK, it's now the &lt;code&gt;Flawed Motor Company&lt;/code&gt;, I need to find all the old acceptance criteria that might have tested for this".&lt;/p&gt;

&lt;p&gt;And again, this is especially time consuming if that test is in a UI-based test suite which takes a long time to run and is hard to debug.&lt;/p&gt;

&lt;p&gt;If your acceptance test was just a note in the original story "this is demonstrated by the view-layer test XYZ" then you wouldn't need to change anything except the single failing test - if there was ever a pressing need to prove the original acceptance criteria were checked,  a code archeologist could dig through version control history to find the test XYZ at the time the story was completed.&lt;/p&gt;

&lt;h2 id="the-qa-role-and-test-slices"&gt;The QA role and test slices&lt;/h2&gt;

&lt;p&gt;This also highlights a common organisational problem - when there is an individual or team whose role is entirely Quality Assurance, and who tests independently to the rest of the team.&lt;/p&gt;

&lt;p&gt;It is only natural that this kind of QA will tend to work at a single layer - without close collaboration with developers, it is next to impossible to work with unit test or other fast feedback layers.&lt;/p&gt;

&lt;p&gt;And this is a reason why you shouldn't test this way!  Don't get me wrong, I'm not advocating getting rid of QA folks - a good QA specialist can be an invaluable team member.  But they should be working &lt;em&gt;with&lt;/em&gt; the developers, to encourage them to write good tests, to spot the gaps in their test automation, and to provide a vital whole-project perspective on quality.&lt;/p&gt;

&lt;p&gt;The "Accelerate" &lt;sup id="fnref:accelerate:1"&gt;&lt;a href="#fn:accelerate" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; folks put it better than I can:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[context: talking about qualities of high performing teams]&lt;/p&gt;

  &lt;p&gt;Developers primarily create and maintain acceptance tests, and they can easily
reproduce and fix them on their development workstations.&lt;/p&gt;

  &lt;p&gt;It is interesting to note
that having automated tests primarily created and maintained either by QA or an
outsourced party is not correlated with IT performance.&lt;/p&gt;

  &lt;p&gt;The theory behind this is
that when developers are involved in creating and maintaining acceptance tests,
there are two important effects. First, the code becomes more testable when
developers write tests. This is one of the main reasons why test-driven development
(TDD) is an important practiceâ€š as it forces developers to create more testable designs.
Second, when developers are responsible for the automated tests, they care more
about them and will invest more effort into maintaining and fixing them.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;None of this means that we should be getting rid of testers.  Testers serve an essential role in the software delivery lifecycle, performing manual testing such as exploratory, usability, and acceptance testing, and &lt;em&gt;helping to create and evolve suites of automated tests by working alongside developers&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The best QAs I've worked with were awesome assets to the team.  They didn't write that many tests on their own though - instead they worked closely with developers to ensure that they understood their tests, that the tests covered as many cheese holes
as possible, and that the test fitted in with their big-picture vision of the overall testing suite - Were tests at the right level? Was enough being tested?  Were acceptance criteria being met? And what areas would still need exploratory testing?&lt;/p&gt;

&lt;h1 id="in-summary"&gt;In summary&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Write tests at as low a level as is sensible.&lt;/li&gt;
  &lt;li&gt;Write tests that cover all the things that could go wrong.  Where you can.&lt;/li&gt;
  &lt;li&gt;Don't repeat yourself!&lt;/li&gt;
  &lt;li&gt;Integrate continuously - and run all the tests on each commit.  Or as many as you can.&lt;/li&gt;
  &lt;li&gt;Define acceptance criteria, and write acceptance tests, at the lowest level that makes sense.&lt;/li&gt;
  &lt;li&gt;Let the QAs overview the tests, let the developers write them, work as a team.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Comments? Questions? See the comments section at the bottom of this page.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="various-references"&gt;Various references:&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Swiss_cheese_model"&gt;Wikipedia&lt;/a&gt; has an article about this metaphor in accident causation - this seems to date the idea back to 1990, when looking at layered threat mitigations&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.feabhas.com/2011/12/effective-testing-the-swiss-cheese-model/"&gt;Glennan Carnie - the Swiss Cheese Model&lt;/a&gt; is a good introduction to the metaphor, but seems to talk more about static analysis than kinds of tests&lt;/p&gt;

&lt;p&gt;&lt;a href="https://semblanceoffunctionality.com/swiss-cheese-model/"&gt;My colleague Sarah Hutchins wrote this article recently about the Swiss Cheese Model&lt;/a&gt; - with a bit of a different focus, looking at strategic decisions about what to test where. &lt;a href="https://vinodkumaar.wordpress.com/2018/03/05/swiss-cheese-model-to-understand-test-coverage/"&gt;Vinod Kumaar R's article&lt;/a&gt; has more useful perspectives.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://martinfowler.com/bliki/TestPyramid.html"&gt;Martin Fowler&lt;/a&gt; has a good basic article about the Test Pyramid in his bliki, and the same site also has &lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html"&gt;Ham Vocke's article with more practical examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also quite like &lt;a href="https://gerg.dev/2018/05/testing-is-like-a-box-of-rocks/"&gt;Gregory Paciga's "testing is like a box of rocks" metaphor&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="image-sources"&gt;Image sources:&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://commons.wikimedia.org/wiki/File:Swiss_cheese.jpg"&gt;Swiss cheese&lt;/a&gt; image by &lt;a href="https://commons.wikimedia.org/wiki/User:Ekg917"&gt;Ekg917&lt;/a&gt;, &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/legalcode" rel="license"&gt;CC BY-SA 4.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test Pyramid image by Abbe98 [&lt;a href="https://creativecommons.org/licenses/by-sa/4.0"&gt;CC BY-SA 4.0&lt;/a&gt;], &lt;a href="https://commons.wikimedia.org/wiki/File:Testing_Pyramid.svg"&gt;via Wikimedia Commons&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="thanks"&gt;Thanks:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;to my colleagues &lt;a href="https://twitter.com/googflow"&gt;Nishi Ningegowda&lt;/a&gt;, &lt;a href="https://twitter.com/jimbarritt"&gt;Jim Barritt&lt;/a&gt;, &lt;a href="https://twitter.com/staylward"&gt;Steve Aylward&lt;/a&gt;, and of course &lt;a href="https://twitter.com/becky_thorn"&gt;Becky Thorn Sietsma&lt;/a&gt; for their useful feedback!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="footnotes"&gt;Footnotes:&lt;/h2&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:accelerate"&gt;
      &lt;p&gt;Nicole Forsgren, Jez Humble &amp;amp; Gene Kim - Accelerate &lt;a href="https://itrevolution.com/book/accelerate/"&gt;https://itrevolution.com/book/accelerate/&lt;/a&gt;Â &lt;a href="#fnref:accelerate" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;Â &lt;a href="#fnref:accelerate:1" class="reversefootnote"&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>OCR Hack - grabbing text from the screen on a Macbook</title>
    <link rel="alternate" href="/2019/04/08/ocr-hack-grabbing-text-from-the-screen-on-a-macbook.html"/>
    <id>/2019/04/08/ocr-hack-grabbing-text-from-the-screen-on-a-macbook.html</id>
    <published>2019-04-08T11:51:00+01:00</published>
    <updated>2019-04-08T11:51:00+01:00</updated>
    <author>
      <name>Kornelis Sietsma</name>
    </author>
    <summary type="html">&lt;p&gt;(File under: obscure hacks that I'm blogging mostly so I can re-create them in the future when
I've forgotten what I did to make this work)&lt;/p&gt;

&lt;p&gt;This is a neat hack I worked out a couple of months ago, while I was scanning in some recipes -
I wanted a...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;(File under: obscure hacks that I'm blogging mostly so I can re-create them in the future when
I've forgotten what I did to make this work)&lt;/p&gt;

&lt;p&gt;This is a neat hack I worked out a couple of months ago, while I was scanning in some recipes -
I wanted a way to easily grab some text from a photo, repeatedly - and more, I wanted to grab
a section of a page, because often recipes are laid out in strange ways, tables
of contents, big titles, and the rest.&lt;/p&gt;

&lt;p&gt;Since then, it's turned out to be handy for other things.  Got a locked PDF you want to
grab a paragraph from?  Or a Kindle book that you want to quote?  (I have no idea how on
earth people justify locking users out of copying bits of their purchased books!  It's fair
use, folks - all I want is to quote your book, and I'm sure the real pirates can
bypass your DRM)&lt;/p&gt;

&lt;p&gt;Anyway, I now have a nifty &lt;code&gt;scrn2txt&lt;/code&gt; button on my Mac's touch bar - this is how it works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;First, install &lt;a href="https://github.com/tesseract-ocr/tesseract/wiki"&gt;Tesseract&lt;/a&gt; - it's as simple as &lt;code&gt;brew install tesseract&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, I wrote a simple commandline wrapper script, &lt;code&gt;ocr_screenshot.sh&lt;/code&gt; in my standard scripts directory:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash -e&lt;/span&gt;
tesseract &lt;span class="nv"&gt;$1&lt;/span&gt; /tmp/out &lt;span class="nt"&gt;-l&lt;/span&gt; eng
&lt;span class="nb"&gt;cat&lt;/span&gt; /tmp/out.txt | pbcopy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I run &lt;a href="https://folivora.ai/"&gt;Better Touch Tool&lt;/a&gt; - a very nice tool for scripting the touch bar, as well as lots of
other nice hacks (like window tiling, special hotkeys and lots of other things).  It's quite easy to set up
a hotkey to run the above script:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Create a new button set up as "capture screenshot - configurable"
&lt;img src="/2019/04/08/ocr-hack-grabbing-text-from-the-screen-on-a-macbook/image1.png" alt="better touch tool screenshot&amp;quot;" /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Capture the screenshot to a fixed file - &lt;code&gt;/tmp/tmp_screenshot&lt;/code&gt; in my example
&lt;img src="/2019/04/08/ocr-hack-grabbing-text-from-the-screen-on-a-macbook/image2.png" alt="better touch tool screenshot&amp;quot;" /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Run the script above as &lt;code&gt;ocr_screenshot.sh {filepath}&lt;/code&gt; - this will pass the filename to the script
&lt;img src="/2019/04/08/ocr-hack-grabbing-text-from-the-screen-on-a-macbook/image3.png" alt="better touch tool screenshot&amp;quot;" /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Save the button!&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result is a nice little button on my touchbar - when I press it, it prompts me to select a rectangle of the screen, saves it as a bitmap to &lt;code&gt;/tmp/tmp_screenshot.png&lt;/code&gt;, calls &lt;code&gt;tesseract&lt;/code&gt; to OCR it to text, and then &lt;code&gt;pbcopy&lt;/code&gt; to put it on my clipboard.&lt;/p&gt;

&lt;p&gt;Tesseract seems pretty powerful too - it happily grabs text from slightly skewed image files, and any minor mistakes are easy to fix.&lt;/p&gt;

&lt;p&gt;I hope this is useful to someone!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Excel life</title>
    <link rel="alternate" href="/2019/01/20/excel-life.html"/>
    <id>/2019/01/20/excel-life.html</id>
    <published>2019-01-20T18:46:00+00:00</published>
    <updated>2019-01-20T18:46:00+00:00</updated>
    <author>
      <name>Kornelis Sietsma</name>
    </author>
    <summary type="html">&lt;p&gt;This isn't actually all that new - I hacked this together during a
&lt;a href="https://www.coderetreat.org/"&gt;global day of coderetreat&lt;/a&gt; in Melbourne in 2012 - but I've mentioned it
to a few people, and thought it'd be fun to put here:&lt;/p&gt;

&lt;p&gt;&lt;a href="/2019-01-20-excel-life-files/life_in_excel.xlsx"&gt;Conway's Game of Life in Excel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, it's a functioning...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;This isn't actually all that new - I hacked this together during a
&lt;a href="https://www.coderetreat.org/"&gt;global day of coderetreat&lt;/a&gt; in Melbourne in 2012 - but I've mentioned it
to a few people, and thought it'd be fun to put here:&lt;/p&gt;

&lt;p&gt;&lt;a href="/2019-01-20-excel-life-files/life_in_excel.xlsx"&gt;Conway's Game of Life in Excel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, it's a functioning chunk of &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"&gt;Conway's Game of Life&lt;/a&gt; cellular automaton in
fairly vanilla Excel spreadsheets.&lt;/p&gt;

&lt;p&gt;You enter your initial life pattern as cells in tab 1:&lt;/p&gt;

&lt;p&gt;&lt;img src="/2019-01-20-excel-life-files/r_pentomino_0.png" alt="r pentomino pattern 0" /&gt;&lt;/p&gt;

&lt;p&gt;You then go to tab 2, enter a &lt;code&gt;0&lt;/code&gt; in the init cell: &lt;img src="/2019-01-20-excel-life-files/instructions.png" alt="instructions" /&gt; then
recalculate to show the first generation:&lt;/p&gt;

&lt;p&gt;&lt;img src="/2019-01-20-excel-life-files/r_pentomino_1.png" alt="the first generation" /&gt;&lt;/p&gt;

&lt;p&gt;Then set the init cell to &lt;code&gt;1&lt;/code&gt; and keep hitting recalculate:&lt;/p&gt;

&lt;p&gt;&lt;img src="/2019-01-20-excel-life-files/r_pentomino_2.png" alt="the second generation" /&gt;&lt;/p&gt;

&lt;p&gt;and eventually you get a whole pattern:&lt;/p&gt;

&lt;p&gt;&lt;img src="/2019-01-20-excel-life-files/r_pentomino_n.png" alt="a later generation" /&gt;&lt;/p&gt;

&lt;p&gt;There are far cooler excel hacks out there - but I had fun building this,
especially as it is really quite trivial - just a huge number of cells on two sheets, calculating each life generation based on their neighbours:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
=IF($B$1=0,IF(SUM(Sheet1!BK12:Sheet1!BM14)=3,1,IF(AND(Sheet1!BL13=1,SUM(Sheet1!BK12:Sheet1!BM14)=4),1,0)),IF(SUM(Sheet3!BK12:Sheet3!BM14)=3,1,IF(AND(Sheet3!BL13=1,SUM(Sheet3!BK12:Sheet3!BM14)=4),1,0)))
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Also - I have a strange fondness for spreadsheets.  Yes, they can be abhorrent
monstrosities when overused - but they can also be very useful, and very simple,
and the basics of how they are structured and how they operate hasn't really changed
since my dad showed me VisiCalc on his Apple II 35 years ago.  It's the
one programming language that I've used that has that much longevity and consistency!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What on earth happened?</title>
    <link rel="alternate" href="/2019/01/19/what-on-earth-happened.html"/>
    <id>/2019/01/19/what-on-earth-happened.html</id>
    <published>2019-01-19T21:03:00+00:00</published>
    <updated>2019-01-19T21:03:00+00:00</updated>
    <author>
      <name>Kornelis Sietsma</name>
    </author>
    <summary type="html">&lt;p&gt;So, last significant update was 2014 - and most of the posts before that were about clojure.  (I used to have a personal blog as well at blog.sietsma.com but it's a bit of a fiction separating tech from life from people stuff! Besides, I almost never...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;So, last significant update was 2014 - and most of the posts before that were about clojure.  (I used to have a personal blog as well at blog.sietsma.com but it's a bit of a fiction separating tech from life from people stuff! Besides, I almost never have kept up either kind of blog, so I might as well merge them)&lt;/p&gt;

&lt;p&gt;So, why the hiatus? Apart from the usual reasons that everyone always has for stoppping blogging. I have some bigger excuses.  In May 2014 I had gone to work for a year in Glasgow, trying to see the world and do fun new things.&lt;/p&gt;

&lt;p&gt;Well, since 2014 I have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Met the lovely Becky Thorn (well, we met at the end of 2013, but hit it off in 2014)&lt;/li&gt;
  &lt;li&gt;Married the lovely Becky Thorn Sietsma&lt;/li&gt;
  &lt;li&gt;Transferred permanently to the UK&lt;/li&gt;
  &lt;li&gt;With the lovely Dr B, produced the utterly lovely Rowan Sietsma - who is now two!&lt;/li&gt;
  &lt;li&gt;Had four years of great crazy romantic exhausting life.  Mostly exhausting, for the past 2 years - but well worth it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, I feel the urge to try to blog again - I have some cool things to talk about.&lt;/p&gt;

&lt;p&gt;I'm doing less clojure - but still some, it's my main personal coding tool, and it's awesome for things like &lt;a href="http://jepsen.io"&gt;Jepsen&lt;/a&gt;. I have been tinkering with many other cool things though - given a few talks, presented a few internal things at ThoughtWorks event - and I really should summarise some of those for a public audience.&lt;/p&gt;

&lt;p&gt;I also might blog a bit about parenting stuff - it's fascinating how parenting is a mix of science, pseudo science, dodgy science, and thousands of years of tradition and habit.  For a quick example - did
you know that most of what people think about teething - that it's painful and devastating and causes lots of side effects like fever, rashes, and diarrhoea, &lt;a href="https://www.bmj.com/content/325/7368/814"&gt;is probably false and just an extreme example of confusing correlation for causation&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Also I might add the occasional personal update - I've left a lot of very good friends behind in Melbourne, and not all of them are on social media, so maybe I might post updates for them (and then send them a link via ICQ or carrier pigeon or whatever tech they use)&lt;/p&gt;

&lt;p&gt;So, hopefully you'll see more new stuff here soon.  Or I'll be posting in 2023 about why I didn't blog again!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>It's alive!</title>
    <link rel="alternate" href="/2018/11/24/its_alive.html"/>
    <id>/2018/11/24/its_alive.html</id>
    <published>2018-11-24T17:58:00+00:00</published>
    <updated>2018-11-24T17:58:00+00:00</updated>
    <author>
      <name>Kornelis Sietsma</name>
    </author>
    <summary type="html">&lt;p&gt;I'm moving everything to Google Domains as I don't see the value in paying
for complex hosting.  I'm using github pages for hosting static sites like
this one - I'll see how it scales, it doesn't have unlimited scale but I don't
think I get that many hits!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I'm moving everything to Google Domains as I don't see the value in paying
for complex hosting.  I'm using github pages for hosting static sites like
this one - I'll see how it scales, it doesn't have unlimited scale but I don't
think I get that many hits!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;For the moment this is using my fairly creaky middleman-blog setup - I might
look at moving to Jekyll as that's what Github does best.  And I fear the
css here is probably pretty dated, as I haven't done much CSS since 2013 and it's
now 2018â€¦  anyway, for now I'll port everything with minimal effort, and
in reality that's probably all I'll have time for, for another 4 years!&lt;/p&gt;

&lt;p&gt;In the 4 years since I last blogged I:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Met a lovely person&lt;/li&gt;
  &lt;li&gt;Got engaged&lt;/li&gt;
  &lt;li&gt;Got married!&lt;/li&gt;
  &lt;li&gt;Had a baby!!! Who will be two in December&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I have reason to feel I've been busy, and will stay busy.&lt;/p&gt;

&lt;p&gt;I still work for ThoughtWorks, though for the UK tentacle.  Doing all sorts
of cool things - which I should blog about, some time.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Clojure snippets</title>
    <link rel="alternate" href="/2014/05/11/snippets.html"/>
    <id>/2014/05/11/snippets.html</id>
    <published>2014-05-11T13:08:00+01:00</published>
    <updated>2014-05-11T13:08:00+01:00</updated>
    <author>
      <name>Kornelis Sietsma</name>
    </author>
    <summary type="html">&lt;p&gt;I'm planning to build a proper clojure snippets/cheat-sheet page, for all the things I do regularly, or want to encourage team members to do regularly.  But it's easier to blog these to get them out rapidly, I'll try to format them nicely later.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I'm planning to build a proper clojure snippets/cheat-sheet page, for all the things I do regularly, or want to encourage team members to do regularly.  But it's easier to blog these to get them out rapidly, I'll try to format them nicely later.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="namespaces-and-main-methods"&gt;Namespaces and main methods&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo.bar&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;java.net&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clj-http.client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;compojure.core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;; prefer this over 'use'&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:gen-class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;; if you have a main method to expose&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;-main&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"args:"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="midje-basics"&gt;Midje basics&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo.t-bar&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;midje.sweet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo.bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;; or just :refer :all&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;facts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"about foos"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"the foo is alive"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;subject/foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;provided&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="midje-custom-checker"&gt;Midje custom checker&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;same-json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;; or the same test but better outputs on failure&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defchecker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;same-json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;chatty-checker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"json is similar"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;slurp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"file1.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;same-json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;slurp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"file2.json"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="destructuring"&gt;Destructuring&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;rest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;:a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:fg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:fg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"g"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"h"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;; a is :a, b is :b, e is "e", f is "f", g is "g"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;; h defaults to "h", i is "i"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;; rest is [:c :d]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;; all is [:a :b :c :d]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;; mostly avoid this as the syntax is confusing, but on occasion:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;; special syntax for passing key/val parameters:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"baz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"foo baz"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="map-manipulation"&gt;Map manipulation&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;old-map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:bar,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:baz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:bat&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;old-map&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;; or anything that produces a pair&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:foo,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:bat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:baz&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;see also &lt;a href="algo.generic's%20fmap%20function"&gt;https://github.com/clojure/algo.generic&lt;/a&gt; if you just want to manipulate values not keys&lt;/p&gt;

&lt;h2 id="protocols-and-records"&gt;Protocols and Records&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defprotocol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FooBar&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buzz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"does a buzzy thing"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defrecord&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;feet&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;FooBar&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buzz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;feet&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buzz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Widget.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"ha"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"fe"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"hafe"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;; same as above but '-&amp;gt;Widget' is a first class function&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buzz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;Widget&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"h"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"hf"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buzz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;map-&amp;gt;Widget&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:feet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"foot"&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"foot"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;; hands is nil&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extend-type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;FooBar&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buzz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"buzz:"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buzz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"buzz:17"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="threading"&gt;Threading&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;; same as&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;; same as&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;; need to wrap anonymous fns:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reverse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;; same as&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reverse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;; same as&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;; also can nest as-&amp;gt; inside -&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;baz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="paredit-and-cursive"&gt;Paredit and Cursive&lt;/h2&gt;

&lt;p&gt;I've mostly moved from emacs to Intellij Idea + &lt;a href="https://cursiveclojure.com/"&gt;the Cursive plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I intend to put up a decent cheat sheet for using Cursive's structural mode, which is basically a variant of paredit.  But I'm out of time.  For now, look at the excellent tutorial &lt;a href="https://cursiveclojure.com/userguide/paredit.html"&gt;on the cursive site&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Parsing FreeMind files</title>
    <link rel="alternate" href="/2014/04/12/parsing-freemind-files.html"/>
    <id>/2014/04/12/parsing-freemind-files.html</id>
    <published>2014-04-12T16:07:00+01:00</published>
    <updated>2014-04-12T16:07:00+01:00</updated>
    <author>
      <name>Kornelis Sietsma</name>
    </author>
    <summary type="html">&lt;p&gt;This is a bit of an addendum on &lt;a href="/2014/03/08/xml-for-fun-and-profit.html"&gt;my previous post&lt;/a&gt;. - I wanted to convert some &lt;a href="http://freemind.sourceforge.net/wiki/index.php/Main_Page"&gt;FreeMind&lt;/a&gt; mind-maps into other formats.  FreeMind is pretty cool, especially as it's file format is fairly straightforward XML, so lots of other mind mapping programs, like XMind, will read and write FreeMind files.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;This is a bit of an addendum on &lt;a href="/2014/03/08/xml-for-fun-and-profit.html"&gt;my previous post&lt;/a&gt;. - I wanted to convert some &lt;a href="http://freemind.sourceforge.net/wiki/index.php/Main_Page"&gt;FreeMind&lt;/a&gt; mind-maps into other formats.  FreeMind is pretty cool, especially as it's file format is fairly straightforward XML, so lots of other mind mapping programs, like XMind, will read and write FreeMind files.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Initially what I wanted was to get the data into a spreadsheet.  I had a map vaguely like:&lt;/p&gt;

&lt;p&gt;&lt;img src="/2014/04/12/parsing-freemind-files/things.png" alt="things mindmap" /&gt;&lt;/p&gt;

&lt;p&gt;And I wanted to turn this into tabular data in a spreadsheet:&lt;/p&gt;

&lt;table class="spreadsheet"&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Bigger than a breadbox&lt;/td&gt;
      &lt;td&gt;red&lt;/td&gt;
      &lt;td&gt;phone booth&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bigger than a breadbox&lt;/td&gt;
      &lt;td&gt;grey&lt;/td&gt;
      &lt;td&gt;elephant&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Smaller than a mouse&lt;/td&gt;
      &lt;td&gt;white&lt;/td&gt;
      &lt;td&gt;gold ball&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Smaller than a mouse&lt;/td&gt;
      &lt;td&gt;white&lt;/td&gt;
      &lt;td&gt;eyeball&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;In between&lt;/td&gt;
      &lt;td&gt;yellow&lt;/td&gt;
      &lt;td&gt;canary&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;In between&lt;/td&gt;
      &lt;td&gt;yellow&lt;/td&gt;
      &lt;td&gt;banana&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You get the idea - I didn't want every node, just those at level 3, and I needed to denormalise them back into columns.&lt;/p&gt;

&lt;p&gt;Now, there are lots of freemind examples to manipulate maps - using xslt. Yuck. This stuff is &lt;em&gt;so&lt;/em&gt; easy in clojure.&lt;/p&gt;

&lt;p&gt;I'll do this at the repl, for simplicity.  First, some namespaces:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fm-parse.blog&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.data.xml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;parse-str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;xml-zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;up&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;down&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.data.zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c-d-zip&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.data.zip.xml&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xml-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xml1-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;attr=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.java.io&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.data.csv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;write-csv&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's a pity the xml stuff is spread over so many namespaces, but that's somewhat the clojure way - libraries are built up as incremental changes to existing libraries.
(Normally I'd add more &lt;code&gt;:as&lt;/code&gt; namespace aliases, but I wanted to keep the code terse so it's more readable on small devices)&lt;/p&gt;

&lt;p&gt;Next, read the freemind xml into memory:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xml-data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;slurp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"things.mm"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;clojure.pprint/pprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xml-data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:map,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="no"&gt;:attrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"1.0.1"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:node,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="no"&gt;:attrs&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:CREATED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"1396204283978"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="no"&gt;:ID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"ID_1617316526"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="no"&gt;:MODIFIED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"1396204290625"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="no"&gt;:TEXT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Things"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:node,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:attrs&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:CREATED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"1396204291304"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="no"&gt;:ID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"ID_1543131992"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="no"&gt;:MODIFIED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"1396204295075"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="no"&gt;:POSITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="no"&gt;:TEXT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Bigger than a breadbox"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;; define the root of what we care about:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xml-data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The nodes we want have :TEXT attributes with the name of the node, and children with child notes.  That's most of what we care about.  I'll define a function to get the node name from a zipper location:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zip-&amp;gt;txt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;attr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:TEXT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then for example, we can get the text from the phone booth node:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;phone-booth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml1-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xml-zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;down&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;down&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;down&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fm-parse.blog/phone-booth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;zip-&amp;gt;txt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;phone-booth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"phone booth"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What we want for the spreadsheet is a list (really a seq) of all the nodes from the root down to a leaf.  There's an "ancestors" function in the zip code that will do what we want - I'll build it up step by step:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zip-&amp;gt;txt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ancestors&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;phone-booth&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"phone booth"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Bigger than a breadbox"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Things"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reverse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zip-&amp;gt;txt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ancestors&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;phone-booth&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Things"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Bigger than a breadbox"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"phone booth"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reverse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zip-&amp;gt;txt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ancestors&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;phone-booth&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bigger than a breadbox"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"phone booth"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;make this a function:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;as-text-seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;zloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c-d-zip/ancestors&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zloc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zip-&amp;gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nb"&gt;reverse&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nb"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fm-parse.blog/as-text-seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as-text-seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;phone-booth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bigger than a breadbox"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"phone booth"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's the first line of our spreadsheet!  The clojure.data.csv library takes sequences like this trivially - I'll show this below - but we want to find all the right nodes to export.&lt;/p&gt;

&lt;p&gt;If you look at the mind map above, what we want is all nodes exactly 3 levels deep in the tree.  We can codify that as a match for the &lt;code&gt;xml-&amp;gt;&lt;/code&gt; function:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xml-zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;attr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:TEXT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"phone booth"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"elephant"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"golf ball"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"eyeball"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"canary"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"banana"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those are the leaf nodes - now just call as-text-seq on each of them:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;level3-nodes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xml-zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:node&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;csv-data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;leaf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;level3-nodes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as-text-seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;leaf&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;csv-lev3&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"Bigger than a breadbox"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"phone booth"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bigger than a breadbox"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"grey"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"elephant"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Smaller than a mouse"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"golf ball"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Smaller than a mouse"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"eyeball"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"In between"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"yellow"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"canary"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"In between"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"yellow"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"banana"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;out-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;io/writer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"sample.csv"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;write-csv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;out-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;csv-data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we're done - you can import this csv file into Excel or LibreOffice or whatever you use.&lt;/p&gt;

&lt;p&gt;Note, you can use a simple extension of this to write the freemind file to a GraphViz dot file very easily - I do this to import mindmap data into OmniGraffle.  I'll leave this as an exercise for the reader!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Xml manipulation in clojure</title>
    <link rel="alternate" href="/2014/03/08/xml-for-fun-and-profit.html"/>
    <id>/2014/03/08/xml-for-fun-and-profit.html</id>
    <published>2014-03-08T19:37:00+00:00</published>
    <updated>2014-03-08T19:37:00+00:00</updated>
    <author>
      <name>Kornelis Sietsma</name>
    </author>
    <summary type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;"XML is like violence - if it doesn't work, use more"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clojure is awesome for parsing and processing structured data.  It has a wide range of functions for handling lists, maps (associative arrays), sets, and (if you really need them) objects.&lt;/p&gt;

&lt;p&gt;One great example of the power of clojure for this sort of thing is processing xml.  You may hate xml, you may use json or edn or yaml or anything else you can - but ultimately, xml is still all over the place, and if you need to handle complex xml or large xml, you might want to look at clojure.&lt;/p&gt;

&lt;aside&gt;
  &lt;p&gt;This article was started in September 2013 - but it grew, and it grew, and the blog needed some styling, and I moved to Glasgowâ€¦ so it's rather late getting out of beta.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;"XML is like violence - if it doesn't work, use more"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clojure is awesome for parsing and processing structured data.  It has a wide range of functions for handling lists, maps (associative arrays), sets, and (if you really need them) objects.&lt;/p&gt;

&lt;p&gt;One great example of the power of clojure for this sort of thing is processing xml.  You may hate xml, you may use json or edn or yaml or anything else you can - but ultimately, xml is still all over the place, and if you need to handle complex xml or large xml, you might want to look at clojure.&lt;/p&gt;

&lt;aside&gt;
  &lt;p&gt;This article was started in September 2013 - but it grew, and it grew, and the blog needed some styling, and I moved to Glasgowâ€¦ so it's rather late getting out of beta.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="contents"&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#parsing-xml-as-structured-data"&gt;Parsing XML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#lazy-parsing"&gt;Lazy parsing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#traversing-xml-as-a-sequence"&gt;XML as a sequence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#zippers"&gt;Zippers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#datazip-for-zipper-awesomeness"&gt;data.zip for zipper awesomeness&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#parsing-wikipedia"&gt;Parsing Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#laziness---lose-your-head"&gt;Laziness - Lose your head&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#data-processing-with-lazy-sequences"&gt;Data processing with lazy sequences&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;aside&gt;
  &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; - this was originally written as a no-previous-clojure-knowledge-needed post, but it got quite long.  So now I assume you know basic clojure syntax, and how to use the &lt;a href="http://clojuredocs.org/clojure_core/clojure.core/-%3E"&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href="http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E"&gt;&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;.  If this means nothing to you, check out &lt;a href="http://www.braveclojure.com/"&gt;Clojure for the brave and true&lt;/a&gt; a great starting resource, as well as &lt;a href="http://clojure.org"&gt;http://clojure.org&lt;/a&gt; and &lt;a href="http://jafingerhut.github.io/cheatsheet-clj-1.3/cheatsheet-tiptip-cdocs-summary.html"&gt;the cheat sheet&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;As I said at the start, handling XML in clojure is awesome - but the documentation is all over the place, especially as you need to use several different libraries together (this being the clojure way - prefer small composable functions over monolithic frameworks). Hence I'll attempt to pull everything together in this blog post - at least for &lt;em&gt;reading&lt;/em&gt; xml.&lt;/p&gt;

&lt;p&gt;Clojure has three basic approaches to xml:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Parsing as structured data&lt;/li&gt;
  &lt;li&gt;Traversing the structured data as a sequence&lt;/li&gt;
  &lt;li&gt;Manipulating via zippers and their friends&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More, the first two of these can be done lazily, allowing for easy processing of huge data sets.  More on this later.&lt;/p&gt;

&lt;h2 id="parsing-xml-as-structured-data"&gt;Parsing xml as structured data&lt;/h2&gt;

&lt;p&gt;Clojure comes with a built in xml parser - it can parse streams, files, or URIs into nested maps.  Unfortunately it doesn't have a simple way to parse strings, but you can make them into streams and then parse them as follows:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;parse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;clojure.xml/parse&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;java.io.ByteArrayInputStream.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getBytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Given an xml file like this:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;top&amp;gt;&lt;/span&gt;
Baby, I'm the top
  &lt;span class="nt"&gt;&amp;lt;mid&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;bot&lt;/span&gt; &lt;span class="na"&gt;foo=&lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      I'm the bottom!
    &lt;span class="nt"&gt;&amp;lt;/bot&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/mid&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/top&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;calling &lt;code&gt;(parse xml)&lt;/code&gt; will return a set of nested maps representing the data:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:top,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="no"&gt;:attrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="s"&gt;"Baby, I'm the top"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:mid,&lt;/span&gt;&lt;span class="w"&gt; 
     &lt;/span&gt;&lt;span class="no"&gt;:attrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil,&lt;/span&gt;&lt;span class="w"&gt; 
     &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:bot,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="no"&gt;:attrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"I'm the bottom!"&lt;/span&gt;&lt;span class="p"&gt;]}]}]}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have nested maps in clojure, you have a huge number of ways to manipulate the data just using language constructs.  For example, you can get the content above with:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;second&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"I'm the bottom!"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or using the &lt;a href="http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E"&gt;&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt; macro:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nb"&gt;second&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"I'm the bottom!"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can do more than just 'first' and 'second' here - you can add functions to filter data, such as:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:mid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"I'm the bottom!"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; explicitly looks for a child of the :content element with a &lt;code&gt;:tag&lt;/code&gt; of &lt;code&gt;:mid&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="lazy-parsing"&gt;Lazy parsing&lt;/h2&gt;

&lt;p&gt;Instead of using core.xml you can use the &lt;a href="https://github.com/clojure/data.xml"&gt;data.xml&lt;/a&gt; library (&lt;a href="http://clojure.github.io/data.xml/"&gt;api docs here&lt;/a&gt;).  This superficially works like the core.xml parser (though happily it has a parse-str function built in) :&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'clojure.data.xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;; as above&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;results in:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;clojure.data.xml.Element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="no"&gt;:top,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:attrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Baby, I'm the top"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;clojure.data.xml.Element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:mid,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="no"&gt;:attrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;clojure.data.xml.Element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:bot,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="no"&gt;:attrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I'm the bottom!"&lt;/span&gt;&lt;span class="p"&gt;)})})}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;aside&gt;
  &lt;p&gt;The &lt;code&gt;#clojure.data.xml.Element&lt;/code&gt; values above are &lt;a href="http://clojure.org/datatypes"&gt;records&lt;/a&gt; - which implement Map, so our code doesn't have to change.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;The big difference isn't immediately obvious: the lists in the &lt;code&gt;:content&lt;/code&gt; sections, and the &lt;code&gt;Element&lt;/code&gt;s, are both lazy.  They won't be evaluated until needed - which means you can process huge xml structures this way without needing to load the whole thing into memory.  If you start parsing (say) a 42G wikipedia dump, and you only look at &lt;code&gt;(first (:content dump))&lt;/code&gt; then the parser will never look beyond the first well formed xml element in the body.&lt;/p&gt;

&lt;h3 id="a-quick-aside---dumping-an-xml-element-for-debugging"&gt;A quick aside - dumping an xml element for debugging&lt;/h3&gt;

&lt;p&gt;To make sense of xml traversal, often you'll want to look at an element like the &lt;code&gt;top&lt;/code&gt; element - and there's a function called &lt;code&gt;emit-element&lt;/code&gt; that will convert an element back to xml for you.  However, it will convert the &lt;em&gt;whole&lt;/em&gt; element, including all it's children, to xml.  So I have a couple of handy functions:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dbg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;associative?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;emit-element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dissoc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;emit-element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;node&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nb"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;as-short-xml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;clojure.string/trim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;; remove trailing \n&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-out-str&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;associative?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c-xml/emit-element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dissoc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c-xml/emit-element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These do essentially the same thing - &lt;code&gt;dbg&lt;/code&gt; will print a node as xml without it's contents.  Or if you pass it anything else, like a string "I'm the bottom!" it will pass it to emit-element, which will just print it.  And then &lt;code&gt;dbg&lt;/code&gt; returns the original node for further processing - all the printing is as side effects.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;as-short-xml&lt;/code&gt; instead captures the printed output as a string, and returns that - useful when you want a side-effect free function that returns a string, rather than printing.&lt;/p&gt;

&lt;h2 id="traversing-xml-as-a-sequence"&gt;Traversing xml as a sequence&lt;/h2&gt;

&lt;p&gt;Clojure core includes the &lt;a href="http://clojuredocs.org/clojure_core/clojure.core/xml-seq"&gt;xml-seq&lt;/a&gt; function that works on either of the above structures, letting you iterate over the tree of elements in a depth-first fashion.&lt;/p&gt;

&lt;p&gt;For example, with our xml above:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;as-short-xml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xml-seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c-d-xml/parse-str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;top/&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s"&gt;"Baby, I'm the top"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;mid/&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;bot foo='bar'/&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s"&gt;"I'm the bottom!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;xml-seq&lt;/code&gt; function traversed the whole tree lazily from the top to the bottom.&lt;/p&gt;

&lt;p&gt;You can of course use all the standard clojure list processing functions on the node sequence - for instance, if you wanted the first node with an attribute:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c-d-xml/parse-str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nb"&gt;xml-seq&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;not-empty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:attrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;as-short-xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;bot foo='bar'/&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I mentioned earlier, this is lazy - once you've found an element with an attribute, and output it, the sequence traversal will stop, and so will the parser.  Of course we are using strings here, so the whole xml string will be in memory, but you can use streams to avoid this as well.  More on this later.&lt;/p&gt;

&lt;h2 id="zippers"&gt;Zippers&lt;/h2&gt;

&lt;p&gt;Zippers are probably the easiest way to manage xml - once you grok them.&lt;/p&gt;

&lt;p&gt;Zippers are a strange beast. &lt;a href="http://en.wikipedia.org/wiki/Zipper_(data_structure)"&gt;Wikipedia&lt;/a&gt; describes them as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A technique of representing an aggregate data structure so that it is convenient for writing programs that traverse the structure arbitrarily and update it's contentsâ€¦&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like to think of a zipper as a kind of pointer to part of a tree - at any time if you have a tree of nodes like the one above, you can have a zipper that refers to a node in the tree, and use it to navigate around the tree.  You can also use the zipper to produce a modified version of the xml document, but I'll leave that for another post.&lt;/p&gt;

&lt;p&gt;To get a zipper from an xml tree, you need another library:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;clojure.zip/xml-zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output of this isn't very useful.  Zippers are a little hard to view, because they need to keep track of the entire xml tree they are created from - so every time you output a zipper, you see the whole parsed xml structure, which doesn't help much.&lt;/p&gt;

&lt;p&gt;To find out more about the current state of a zipper, you can call &lt;code&gt;clojure.zip/node&lt;/code&gt;, which returns the node pointed to by the zipper.  Then you can call the same debug functions described earlier.  Here's some short functions to dump zippers:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;zipper&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dbg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;clojure.zip/node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zipper&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="n"&gt;zipper&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;; return the zipper for more processing&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;zipper&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as-short-xml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;clojure.zip/node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zipper&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="basic-zipper-navigation"&gt;Basic zipper navigation&lt;/h2&gt;

&lt;p&gt;Zippers, like most of clojure, are immutable - to "navigate" using them, you modify a zipper with a function to get a new zipper.  The basic options are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;down - takes you to the first child of this node&lt;/li&gt;
  &lt;li&gt;up - takes you to the parent element of this node&lt;/li&gt;
  &lt;li&gt;right - takes you to the next sibling of this node&lt;/li&gt;
  &lt;li&gt;left - takes you to the previous sibling of this node&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="http://richhickey.github.io/clojure/clojure.zip-api.html"&gt;and many many other similar navigation commands&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So to continue with our example xml:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;c-zip/xml-zip&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;c-zip/down&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;dz&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;c-zip/right&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;dz&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;c-zip/down&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Baby, I'm the top"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;mid/&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;bot foo='bar'/&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first call to 'dz' dumps the first child of the root, the text node "Baby, I'm the top"&lt;/p&gt;

&lt;p&gt;Then we move to it's right sibling and dump the value there - the "&amp;lt;mid&amp;gt;" node.&lt;/p&gt;

&lt;p&gt;Then we move down to it's first child, and output the "&amp;lt;bot&amp;gt;" node.&lt;/p&gt;

&lt;p&gt;I hope this is making sense.  Basically, you move the zipper around the tree to get to the node you want.  Handy for some cases, but still a little strange.&lt;/p&gt;

&lt;h2 id="datazip-for-zipper-awesomeness"&gt;Data.zip for zipper awesomeness&lt;/h2&gt;

&lt;p&gt;Basic zippers are just a starting point.  To really make them fly for xml manipulation, I'll use yet another library: &lt;a href="http://clojure.github.io/data.zip/"&gt;data.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Data.zip contains the data.zip.xml namespace which has a number of simple and powerful functions that operate on xml zippers and play very nicely together.&lt;/p&gt;

&lt;h2 id="accessors"&gt;Accessors&lt;/h2&gt;

&lt;p&gt;There are several functions that given a zipper pointing to an xml node, extract information on it.  For example, using the zipper we had above pointing to the &lt;bot&gt; node, we could call `(attr zipper :foo)` which would return "bar", naturally. `(text zipper)` would return "I'm the bottom!".&lt;/bot&gt;&lt;/p&gt;

&lt;p&gt;There are also predicates similar to these - &lt;code&gt;(attr= :foo "bar")&lt;/code&gt; returns a predicate that returns true if a given node has a "foo=bar" attribute - so &lt;code&gt;((attr= :foo "bar") zipper)&lt;/code&gt; would be true.  Similarly &lt;code&gt;(text= "asdf")&lt;/code&gt; is a predicate that matches based on element text, &lt;code&gt;(tag= :mid)&lt;/code&gt; matches on tag name.&lt;/p&gt;

&lt;h2 id="threading-magic"&gt;Threading magic&lt;/h2&gt;

&lt;p&gt;Clojure.data.zip has two functions that look and act a little like the &lt;code&gt;-&amp;gt;&lt;/code&gt; threading macro:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://clojure.github.io/data.zip/#clojure.data.zip.xml/xml-&amp;gt;"&gt;&lt;code&gt;xml-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="http://clojure.github.io/data.zip/#clojure.data.zip.xml/xml1-&amp;gt;"&gt;&lt;code&gt;xml1-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These work similarly - they take a zipper as a starting location, and then a sequence of matchers.  They apply each matcher in order as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If it's a function, call it on the zipper
    &lt;ol&gt;
      &lt;li&gt;If it returns a collection, each value of the collection is passed to the next matcher&lt;/li&gt;
      &lt;li&gt;If it returns a (zipper) location, the location is passed to the next matcher&lt;/li&gt;
      &lt;li&gt;If it returns true, the current location is passed to the next matcher&lt;/li&gt;
      &lt;li&gt;If it returns false or nil, this particular matching branch stops&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;If it's a keyword &lt;code&gt;:foo&lt;/code&gt; it is converted to the predicate &lt;code&gt;(tag= :foo)&lt;/code&gt; and run as above&lt;/li&gt;
  &lt;li&gt;If it's a string "bar" it is converted to the predicate &lt;code&gt;(text= "bar")&lt;/code&gt; and run as above&lt;/li&gt;
  &lt;li&gt;If it's a vector, it is converted to a sub query&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that this can result in more than one value - each matcher can return a collection, which results in more results being passed to later matchers.  The difference between &lt;code&gt;xml-&amp;gt;&lt;/code&gt; and &lt;code&gt;xml1-&amp;gt;&lt;/code&gt; is that &lt;code&gt;xml-&amp;gt;&lt;/code&gt; returns a collection of results, whereas &lt;code&gt;xml1-&amp;gt;&lt;/code&gt; returns only the first not-false-or-nil result.&lt;/p&gt;

&lt;p&gt;The actual result is whatever comes out of the rightmost matcher function.&lt;/p&gt;

&lt;p&gt;An example may help.  Given our xml yet again,&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xml-zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;; for convenience&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="no"&gt;:mid&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="no"&gt;:bot&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;attr=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I'm the bottom!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;returns a sequence with a single element &lt;code&gt;("I'm the bottom")&lt;/code&gt;.  If we'd called &lt;code&gt;xml1-&amp;gt;&lt;/code&gt; it would have just returned a single string.&lt;/p&gt;

&lt;p&gt;This worked by taking the &lt;top&gt; node, looking for a child &lt;mid&gt; node, then a child &lt;bot&gt; node, then checking that node had the `foo=bar` attribute, then returning it's text.&lt;/bot&gt;&lt;/mid&gt;&lt;/top&gt;&lt;/p&gt;

&lt;p&gt;Our xml is too simple for much more complex manipulation.  If you want to see more of the things you can do with xml and zippers, have a look at &lt;a href="https://github.com/clojure/data.zip/blob/master/src/test/clojure/clojure/data/zip/xml_test.clj"&gt;the test cases for clojure.data.zip&lt;/a&gt; - they are far more useful than the actual documentation!&lt;/p&gt;

&lt;p&gt;However, let's move on to a real world example - reading a big big xml file.&lt;/p&gt;

&lt;h2 id="parsing-wikipedia"&gt;Parsing Wikipedia&lt;/h2&gt;

&lt;p&gt;Wikipedia is &lt;a href="http://en.wikipedia.org/wiki/Wikipedia:Database_download#English-language_Wikipedia"&gt;available for download&lt;/a&gt; as a big gzipped xml file.  And when I say big - it's around 9.5 GB compressed, or 44 GB of xml.  You don't really want to read it into memory.&lt;/p&gt;

&lt;p&gt;So lets be lazy.&lt;/p&gt;

&lt;p&gt;First some boilerplate - I'm going to include the whole namespace here, so you can try this code yourself if you want:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wikiparse.core&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;wikiparse.util&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dbg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;as-short-xml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.xml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c-xml&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.data.xml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c-d-xml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c-zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;xml-zip&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.data.zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c-d-zip&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.data.zip.xml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c-d-z-xml&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xml-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xml1-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;attr=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.java.io&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clj-time.core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clj-time.format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.pprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;org.apache.commons.compress.compressors.bzip2&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="n"&gt;BZip2CompressorInputStream&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bz2-reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"produce a Reader on a bzipped file"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;io/file&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;io/input-stream&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="n"&gt;BZip2CompressorInputStream.&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;io/reader&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The bz2-reader function will unzip the file on the fly - it's all streams and readers, so you don't need to store the whole thing in memory.&lt;/p&gt;

&lt;p&gt;Let's start parsing the xml.  First, we'll define a reader - note, this is not something you'd ever do outside a repl, as using &lt;code&gt;def&lt;/code&gt; like this puts the reader in a global symbol.  See further down for better ways to handle readers.&lt;/p&gt;

&lt;p&gt;Then we can start parsing the xml:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bz2-reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"wikipedia.xml.bz2"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:mediawiki&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Wikipedia"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The top few lines of the wikipedia dump are:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;mediawiki&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"0.8"&lt;/span&gt; &lt;span class="na"&gt;xml:lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;siteinfo&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sitename&amp;gt;&lt;/span&gt;Wikipedia&lt;span class="nt"&gt;&amp;lt;/sitename&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;so this looks right.&lt;/p&gt;

&lt;p&gt;Most of the wikipedia dump is a long sequence of &lt;code&gt;&amp;lt;page&amp;gt;&lt;/code&gt; tags similar to:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight xml"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;page&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Autism&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;revision&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;557666522&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;timestamp&amp;gt;&lt;/span&gt;2013-05-31T11:04:03Z&lt;span class="nt"&gt;&amp;lt;/timestamp&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;xml:space=&lt;/span&gt;&lt;span class="s"&gt;"preserve"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
... lots of text here
      &lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;model&amp;gt;&lt;/span&gt;wikitext&lt;span class="nt"&gt;&amp;lt;/model&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;format&amp;gt;&lt;/span&gt;text/x-wiki&lt;span class="nt"&gt;&amp;lt;/format&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/revision&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/page&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;though there are some which are just redirect stubs:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight xml"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;page&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;AccessibleComputing&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;redirect&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Computer accessibility"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;revision&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;381202555&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;timestamp&amp;gt;&lt;/span&gt;2010-08-26T22:38:36Z&lt;span class="nt"&gt;&amp;lt;/timestamp&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;xml:space=&lt;/span&gt;&lt;span class="s"&gt;"preserve"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;#REDIRECT [[Computer accessibility]] {{R from CamelCase}}&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;model&amp;gt;&lt;/span&gt;wikitext&lt;span class="nt"&gt;&amp;lt;/model&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;format&amp;gt;&lt;/span&gt;text/x-wiki&lt;span class="nt"&gt;&amp;lt;/format&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/revision&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/page&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's look for the first few titles.  How about we use the zipper stuff from before?&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;take&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="no"&gt;:page&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"AccessibleComputing"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Anarchism"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"AfghanistanHistory"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"AfghanistanGeography"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"AfghanistanPeople"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"AfghanistanCommunications"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"AfghanistanTransportations"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"AfghanistanMilitary"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"AfghanistanTransnationalIssues"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"AssistiveTechnology"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cool - how about we test laziness, let's look for the 1000th title:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="no"&gt;:page&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Integral domain"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Awesome - how about the 100,000th?&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="no"&gt;:page&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"RMI TCP Connection(idle)"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;java.lang.OutOfMemoryError&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;overhead&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exceeded&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oops - what happened to that laziness?&lt;/p&gt;

&lt;h2 id="laziness---lose-your-head"&gt;Laziness - Lose your head&lt;/h2&gt;

&lt;p&gt;The trouble is, we have a reference to the original parsed xml structure in the symbol &lt;code&gt;x&lt;/code&gt;.  This means that even though the pages are expanded lazily, the old pages we've looked at can't be fully garbage collected, as their parent &lt;code&gt;x&lt;/code&gt; still has a reference to them.&lt;/p&gt;

&lt;p&gt;This is called "head retention" in clojure - it's not uncommon with lazy sequences.  If you keep a reference to the head of a sequence, it can't be garbage collected.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Worse&lt;/em&gt;, the zipper library does the same thing.  Every zipper can be traversed to find it's parent - so every zipper keeps a reference to it's parent.&lt;/p&gt;

&lt;p&gt;So we have to go back to simple structure parsing.  Don't worry, we won't throw away &lt;em&gt;all&lt;/em&gt; the zipper functionality - you just have to use it on each child node, not the overall tree.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page-title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml1-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xml-zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bz2-reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"wikipedia.xml.bz2"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nb"&gt;parse&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page-title&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Flatonia, Texas"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;aside&gt;
  &lt;p&gt;(Note: with-open is a macro that automatically closes the reader when we're done)&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;Success!  Getting rid of the symbol &lt;code&gt;x&lt;/code&gt; means we aren't keeping the head around - and we can still use a zipper within the &lt;code&gt;page-title&lt;/code&gt; function to manipulate the individual page.  For a simple task like this it is probably overkill, and will add a fair bit of overhead - especially as we are mapping the page title for the 99,999 pages we don't care about.  But the minute you want to filter or act on the page contents, you'll need that processing.&lt;/p&gt;

&lt;p&gt;And this still only took 135 seconds, using 123 MB peak RAM on my laptop - not too bad for an unoptimised scan through 100,000 xml nodes.&lt;/p&gt;

&lt;h2 id="data-processing-with-lazy-sequences"&gt;Data processing with lazy sequences&lt;/h2&gt;

&lt;p&gt;Clojure excels at processing sequences of stuff.  The wikipedia data is a bit simple for a great example, but it's a start.&lt;/p&gt;

&lt;p&gt;First, lets write a function to transform a wikipedia xml sub-document into a useful structure:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page-&amp;gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xml-zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml1-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml1-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;attr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml1-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:revision&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fmt/parse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml1-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:revision&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="no"&gt;:text&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml1-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:revision&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)}))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;aside&gt;
  &lt;p&gt;Note I've been a bit lazy here with error checking - if there is no timestamp element this will crash horribly.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;Now let's get the first few entries:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bz2-reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doall&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;take&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="nb"&gt;parse&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page-&amp;gt;map&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One strange thing I had to do here is use &lt;code&gt;doall&lt;/code&gt; - this is to force non-laziness.  Clojure's laziness is great generally, but without &lt;code&gt;doall&lt;/code&gt; you will get:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;XMLStreamException ParseError at [row,col]:[85,2582]
Message: Stream closed  com.sun.org.apache.xerces.internal.impl.XMLStreamReaderImpl.next (XMLStreamReaderImpl.java:596)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why?  This is a common point of pain in dealing with lazy sequences - you need to make sure you force non-lazy behaviour before you lose your data source or connection or similar.  In this case, the &lt;code&gt;with-open&lt;/code&gt; call opens a file for streaming - but everything inside the &lt;code&gt;take 4&lt;/code&gt; call is only processed when output is needed.  Which is after &lt;code&gt;with-open&lt;/code&gt; has closed the reader on you!&lt;/p&gt;

&lt;p&gt;So you need to add a &lt;code&gt;doall&lt;/code&gt; first, which takes those 4 lazy results and forces them to be evaluated as concrete results. You wouldn't need this if all the processing of the sequence was forced within the &lt;code&gt;with-open&lt;/code&gt; call in some other way.&lt;/p&gt;

&lt;p&gt;Anyway, back to the output of the above:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"AccessibleComputing"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Computer accessibility"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"381202555"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2010-08-26&lt;/span&gt;&lt;span class="n"&gt;T22&lt;/span&gt;&lt;span class="no"&gt;:38:36.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Anarchism"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"557411769"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2013-05-29&lt;/span&gt;&lt;span class="n"&gt;T21&lt;/span&gt;&lt;span class="no"&gt;:19:48.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"AfghanistanHistory"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"History of Afghanistan"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"74466652"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2006-09-08&lt;/span&gt;&lt;span class="n"&gt;T04&lt;/span&gt;&lt;span class="no"&gt;:15:52.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"AfghanistanGeography"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Geography of Afghanistan"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"407008307"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2011-01-10&lt;/span&gt;&lt;span class="n"&gt;T03&lt;/span&gt;&lt;span class="no"&gt;:56:19.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(I removed the text for clarity)&lt;/p&gt;

&lt;p&gt;Ok, now we have structured data we can process it.  Let's say we want to know the first 4 articles last updated before 2008?  Ignoring redirects, of course.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bz2-reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doall&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;take&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="nb"&gt;parse&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page-&amp;gt;map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;time/after?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;time/date-time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2008&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Wikipedia:Complete list of encyclopedia topics (obsolete)"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"31953688"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2005-12-19&lt;/span&gt;&lt;span class="n"&gt;T09&lt;/span&gt;&lt;span class="no"&gt;:54:11.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Wikipedia:Complete list of encyclopedia topics (obsolete)/6"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"15904520"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2005-05-16&lt;/span&gt;&lt;span class="n"&gt;T07&lt;/span&gt;&lt;span class="no"&gt;:18:26.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Wikipedia:Complete list of encyclopedia topics (obsolete)/7"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"15904521"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2005-05-16&lt;/span&gt;&lt;span class="n"&gt;T07&lt;/span&gt;&lt;span class="no"&gt;:18:30.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Wikipedia:Complete list of encyclopedia topics (obsolete)/8"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"15904522"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2005-05-16&lt;/span&gt;&lt;span class="n"&gt;T07&lt;/span&gt;&lt;span class="no"&gt;:18:56.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hmm - kind of boring.  Let's strip the obsolete pages:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bz2-reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doall&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;take&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="nb"&gt;parse&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="no"&gt;:content&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page-&amp;gt;map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;time/after?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;time/date-time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2008&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;re-find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="s"&gt;"\(obsolete\)"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Wikipedia:GNE Project Files/Proposed GNU Moderation System"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"57629800"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2006-06-09&lt;/span&gt;&lt;span class="n"&gt;T01&lt;/span&gt;&lt;span class="no"&gt;:38:24.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Wikipedia:GNE Project Files/GNE Project Design"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"57629879"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2006-06-09&lt;/span&gt;&lt;span class="n"&gt;T01&lt;/span&gt;&lt;span class="no"&gt;:39:07.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Wikipedia:GNE Project Files/Project Name"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"15910103"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2004-04-14&lt;/span&gt;&lt;span class="n"&gt;T22&lt;/span&gt;&lt;span class="no"&gt;:22:01.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"History of the Virgin Islands"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"155442896"&lt;/span&gt;&lt;span class="n"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="no"&gt;:timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;DateTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2007-09-03&lt;/span&gt;&lt;span class="n"&gt;T16&lt;/span&gt;&lt;span class="no"&gt;:52:44.000Z&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should give you a taste for what you can do.  Finding the above on my laptop took almost a minute - I'm not sure how far through the wikipedia dump it searched.  Counting the number of skipped pages is left as an exercise for the reader!&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is still a pretty simple data structure.  In many environments you will probably find some much worse examples - my most recent project involved parsing &lt;a href="http://www.xbrl.org/specification/gnl/rec-2009-06-22/gnl-rec-2009-06-22.html"&gt;xbrl&lt;/a&gt; which was a lot of fun.  If you meed this sort of xml, you'll really appreciate having a language like clojure on hand.&lt;/p&gt;

&lt;p&gt;I also haven't touched on modifying xml - the zipper frameworks have a lot of tools for on-the-fly modification of xml documents, but that's something for another article.&lt;/p&gt;
</content>
  </entry>
</feed>
